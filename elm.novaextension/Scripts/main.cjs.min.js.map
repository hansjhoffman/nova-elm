{"version":3,"file":"main.cjs.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../node_modules/fp-ts/es6/function.js","../../node_modules/fp-ts/es6/internal.js","../../node_modules/fp-ts/es6/Separated.js","../../node_modules/fp-ts/es6/Witherable.js","../../node_modules/fp-ts/es6/Either.js","../../node_modules/fp-ts/es6/Option.js","../../node_modules/fp-ts/es6/Semigroup.js","../../node_modules/fp-ts/es6/Map.js","../../node_modules/fp-ts/es6/EitherT.js","../../node_modules/fp-ts/es6/Task.js","../../node_modules/fp-ts/es6/TaskEither.js","../../node_modules/fp-ts/es6/ReadonlyNonEmptyArray.js","../../node_modules/fp-ts/es6/string.js","../../node_modules/fp-ts/es6/pipeable.js","../../node_modules/io-ts/es6/FreeSemigroup.js","../../node_modules/io-ts/es6/DecodeError.js","../../node_modules/io-ts/es6/Guard.js","../../node_modules/io-ts/es6/Schemable.js","../../node_modules/io-ts/es6/Kleisli.js","../../node_modules/io-ts/es6/Decoder.js","../../node_modules/fp-ts/es6/ReadonlyArray.js","../../node_modules/fp-ts/es6/Array.js","../../node_modules/fp-ts/es6/NonEmptyArray.js","../../node_modules/fp-ts/es6/Const.js","../../node_modules/fp-ts/es6/Monoid.js","../../node_modules/fp-ts/es6/ReadonlyRecord.js","../../node_modules/monocle-ts/es6/internal.js","../../node_modules/monocle-ts/es6/Iso.js","../../node_modules/monocle-ts/es6/Lens.js","../../node_modules/monocle-ts/es6/Optional.js","../../node_modules/monocle-ts/es6/Prism.js","../../node_modules/monocle-ts/es6/Traversal.js","../../node_modules/monocle-ts/es6/index.js","../../node_modules/ts-pattern/lib/symbols.js","../../node_modules/ts-pattern/lib/guards.js","../../node_modules/ts-pattern/lib/wildcards.js","../../node_modules/ts-pattern/lib/index.js"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getBooleanAlgebra = function (B) { return function () { return ({\n    meet: function (x, y) { return function (a) { return B.meet(x(a), y(a)); }; },\n    join: function (x, y) { return function (a) { return B.join(x(a), y(a)); }; },\n    zero: function () { return B.zero; },\n    one: function () { return B.one; },\n    implies: function (x, y) { return function (a) { return B.implies(x(a), y(a)); }; },\n    not: function (x) { return function (a) { return B.not(x(a)); }; }\n}); }; };\n/**\n * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.\n *\n * @example\n * import { Predicate, getSemigroup } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const S1 = getSemigroup(B.SemigroupAll)<number>()\n *\n * assert.deepStrictEqual(S1.concat(f, g)(1), true)\n * assert.deepStrictEqual(S1.concat(f, g)(3), false)\n *\n * const S2 = getSemigroup(B.SemigroupAny)<number>()\n *\n * assert.deepStrictEqual(S2.concat(f, g)(1), true)\n * assert.deepStrictEqual(S2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getSemigroup = function (S) { return function () { return ({\n    concat: function (f, g) { return function (a) { return S.concat(f(a), g(a)); }; }\n}); }; };\n/**\n * Unary functions form a monoid as long as you can provide a monoid for the codomain.\n *\n * @example\n * import { Predicate } from 'fp-ts/Predicate'\n * import { getMonoid } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const M1 = getMonoid(B.MonoidAll)<number>()\n *\n * assert.deepStrictEqual(M1.concat(f, g)(1), true)\n * assert.deepStrictEqual(M1.concat(f, g)(3), false)\n *\n * const M2 = getMonoid(B.MonoidAny)<number>()\n *\n * assert.deepStrictEqual(M2.concat(f, g)(1), true)\n * assert.deepStrictEqual(M2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getMonoid = function (M) {\n    var getSemigroupM = getSemigroup(M);\n    return function () { return ({\n        concat: getSemigroupM().concat,\n        empty: function () { return M.empty; }\n    }); };\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getSemiring = function (S) { return ({\n    add: function (f, g) { return function (x) { return S.add(f(x), g(x)); }; },\n    zero: function () { return S.zero; },\n    mul: function (f, g) { return function (x) { return S.mul(f(x), g(x)); }; },\n    one: function () { return S.one; }\n}); };\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getRing = function (R) {\n    var S = getSemiring(R);\n    return {\n        add: S.add,\n        mul: S.mul,\n        one: S.one,\n        zero: S.zero,\n        sub: function (f, g) { return function (x) { return R.sub(f(x), g(x)); }; }\n    };\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var apply = function (a) { return function (f) { return f(a); }; };\n/**\n * @since 2.0.0\n */\nexport function identity(a) {\n    return a;\n}\n/**\n * @since 2.0.0\n */\nexport var unsafeCoerce = identity;\n/**\n * @since 2.0.0\n */\nexport function constant(a) {\n    return function () { return a; };\n}\n/**\n * A thunk that returns always `true`.\n *\n * @since 2.0.0\n */\nexport var constTrue = \n/*#__PURE__*/\nconstant(true);\n/**\n * A thunk that returns always `false`.\n *\n * @since 2.0.0\n */\nexport var constFalse = \n/*#__PURE__*/\nconstant(false);\n/**\n * A thunk that returns always `null`.\n *\n * @since 2.0.0\n */\nexport var constNull = \n/*#__PURE__*/\nconstant(null);\n/**\n * A thunk that returns always `undefined`.\n *\n * @since 2.0.0\n */\nexport var constUndefined = \n/*#__PURE__*/\nconstant(undefined);\n/**\n * A thunk that returns always `void`.\n *\n * @since 2.0.0\n */\nexport var constVoid = constUndefined;\n/**\n * Flips the order of the arguments of a function of two arguments.\n *\n * @since 2.0.0\n */\nexport function flip(f) {\n    return function (b, a) { return f(a, b); };\n}\nexport function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {\n    switch (arguments.length) {\n        case 1:\n            return ab;\n        case 2:\n            return function () {\n                return bc(ab.apply(this, arguments));\n            };\n        case 3:\n            return function () {\n                return cd(bc(ab.apply(this, arguments)));\n            };\n        case 4:\n            return function () {\n                return de(cd(bc(ab.apply(this, arguments))));\n            };\n        case 5:\n            return function () {\n                return ef(de(cd(bc(ab.apply(this, arguments)))));\n            };\n        case 6:\n            return function () {\n                return fg(ef(de(cd(bc(ab.apply(this, arguments))))));\n            };\n        case 7:\n            return function () {\n                return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));\n            };\n        case 8:\n            return function () {\n                return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));\n            };\n        case 9:\n            return function () {\n                return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));\n            };\n    }\n    return;\n}\n/**\n * @since 2.0.0\n */\nexport function tuple() {\n    var t = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        t[_i] = arguments[_i];\n    }\n    return t;\n}\n/**\n * @since 2.0.0\n */\nexport function increment(n) {\n    return n + 1;\n}\n/**\n * @since 2.0.0\n */\nexport function decrement(n) {\n    return n - 1;\n}\n/**\n * @since 2.0.0\n */\nexport function absurd(_) {\n    throw new Error('Called `absurd` function which should be uncallable');\n}\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from 'fp-ts/function'\n *\n * const add = tupled((x: number, y: number): number => x + y)\n *\n * assert.strictEqual(add([1, 2]), 3)\n *\n * @since 2.4.0\n */\nexport function tupled(f) {\n    return function (a) { return f.apply(void 0, a); };\n}\n/**\n * Inverse function of `tupled`\n *\n * @since 2.4.0\n */\nexport function untupled(f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return f(a);\n    };\n}\nexport function pipe(a, ab, bc, cd, de, ef, fg, gh, hi, ij, jk, kl, lm, mn, no, op, pq, qr, rs, st) {\n    switch (arguments.length) {\n        case 1:\n            return a;\n        case 2:\n            return ab(a);\n        case 3:\n            return bc(ab(a));\n        case 4:\n            return cd(bc(ab(a)));\n        case 5:\n            return de(cd(bc(ab(a))));\n        case 6:\n            return ef(de(cd(bc(ab(a)))));\n        case 7:\n            return fg(ef(de(cd(bc(ab(a))))));\n        case 8:\n            return gh(fg(ef(de(cd(bc(ab(a)))))));\n        case 9:\n            return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n        case 10:\n            return ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))));\n        case 11:\n            return jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))));\n        case 12:\n            return kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))));\n        case 13:\n            return lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))));\n        case 14:\n            return mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))));\n        case 15:\n            return no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))));\n        case 16:\n            return op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))));\n        case 17:\n            return pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))))));\n        case 18:\n            return qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))))));\n        case 19:\n            return rs(qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))))))));\n        case 20:\n            return st(rs(qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))))))));\n    }\n    return;\n}\n/**\n * Type hole simulation\n *\n * @since 2.7.0\n */\nexport var hole = absurd;\n/**\n * @since 2.11.0\n */\nexport var SK = function (_, b) { return b; };\n/**\n * Use `Predicate` module instead.\n *\n * @since 2.0.0\n * @deprecated\n */\nexport function not(predicate) {\n    return function (a) { return !predicate(a); };\n}\n/**\n * Use `Endomorphism` module instead.\n *\n * @category instances\n * @since 2.10.0\n * @deprecated\n */\nexport var getEndomorphismMonoid = function () { return ({\n    concat: function (first, second) { return flow(first, second); },\n    empty: identity\n}); };\n","var __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\n// -------------------------------------------------------------------------------------\n// Option\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var isNone = function (fa) { return fa._tag === 'None'; };\n/** @internal */\nexport var isSome = function (fa) { return fa._tag === 'Some'; };\n/** @internal */\nexport var none = { _tag: 'None' };\n/** @internal */\nexport var some = function (a) { return ({ _tag: 'Some', value: a }); };\n// -------------------------------------------------------------------------------------\n// Either\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var isLeft = function (ma) { return ma._tag === 'Left'; };\n/** @internal */\nexport var isRight = function (ma) { return ma._tag === 'Right'; };\n/** @internal */\nexport var left = function (e) { return ({ _tag: 'Left', left: e }); };\n/** @internal */\nexport var right = function (a) { return ({ _tag: 'Right', right: a }); };\n// -------------------------------------------------------------------------------------\n// ReadonlyNonEmptyArray\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var singleton = function (a) { return [a]; };\n/** @internal */\nexport var isNonEmpty = function (as) { return as.length > 0; };\n/** @internal */\nexport var head = function (as) { return as[0]; };\n/** @internal */\nexport var tail = function (as) { return as.slice(1); };\n// -------------------------------------------------------------------------------------\n// empty\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var emptyReadonlyArray = [];\n/** @internal */\nexport var emptyRecord = {};\n// -------------------------------------------------------------------------------------\n// Record\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var has = Object.prototype.hasOwnProperty;\n// -------------------------------------------------------------------------------------\n// NonEmptyArray\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var fromReadonlyNonEmptyArray = function (as) { return __spreadArray([as[0]], as.slice(1)); };\n","/**\n * ```ts\n * interface Separated<E, A> {\n *    readonly left: E\n *    readonly right: A\n * }\n * ```\n *\n * Represents a result of separating a whole into two parts.\n *\n * @since 2.10.0\n */\nimport { pipe } from './function';\nimport { flap as flap_ } from './Functor';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.10.0\n */\nexport var separated = function (left, right) { return ({ left: left, right: right }); };\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _mapLeft = function (fa, f) { return pipe(fa, mapLeft(f)); };\nvar _bimap = function (fa, g, f) { return pipe(fa, bimap(g, f)); };\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.10.0\n */\nexport var map = function (f) { return function (fa) {\n    return separated(left(fa), f(right(fa)));\n}; };\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.10.0\n */\nexport var mapLeft = function (f) { return function (fa) {\n    return separated(f(left(fa)), right(fa));\n}; };\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.10.0\n */\nexport var bimap = function (f, g) { return function (fa) {\n    return separated(f(left(fa)), g(right(fa)));\n}; };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var URI = 'Separated';\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    mapLeft: _mapLeft,\n    bimap: _bimap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.10.0\n */\nexport var left = function (s) { return s.left; };\n/**\n * @since 2.10.0\n */\nexport var right = function (s) { return s.right; };\n","import * as _ from './internal';\nexport function wiltDefault(T, C) {\n    return function (F) {\n        var traverseF = T.traverse(F);\n        return function (wa, f) { return F.map(traverseF(wa, f), C.separate); };\n    };\n}\nexport function witherDefault(T, C) {\n    return function (F) {\n        var traverseF = T.traverse(F);\n        return function (wa, f) { return F.map(traverseF(wa, f), C.compact); };\n    };\n}\nexport function filterE(W) {\n    return function (F) {\n        var witherF = W.wither(F);\n        return function (predicate) { return function (ga) { return witherF(ga, function (a) { return F.map(predicate(a), function (b) { return (b ? _.some(a) : _.none); }); }); }; };\n    };\n}\n","import { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { tailRec } from './ChainRec';\nimport { chainOptionK as chainOptionK_, filterOrElse as filterOrElse_, fromOption as fromOption_, fromOptionK as fromOptionK_, fromPredicate as fromPredicate_ } from './FromEither';\nimport { flow, identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { separated } from './Separated';\nimport { wiltDefault, witherDefault } from './Witherable';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var left = _.left;\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var right = _.right;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar _chain = function (ma, f) { return pipe(ma, chain(f)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) { return function (fa, f) {\n    var foldMapM = foldMap(M);\n    return pipe(fa, foldMapM(f));\n}; };\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\nvar _bimap = function (fa, f, g) { return pipe(fa, bimap(f, g)); };\nvar _mapLeft = function (fa, f) { return pipe(fa, mapLeft(f)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\nvar _chainRec = function (a, f) {\n    return tailRec(f(a), function (e) {\n        return isLeft(e) ? right(left(e.left)) : isLeft(e.right) ? left(f(e.right.left)) : right(right(e.right.right));\n    });\n};\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var URI = 'Either';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = function (SE, SA) { return ({\n    show: function (ma) { return (isLeft(ma) ? \"left(\" + SE.show(ma.left) + \")\" : \"right(\" + SA.show(ma.right) + \")\"); }\n}); };\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = function (EL, EA) { return ({\n    equals: function (x, y) {\n        return x === y || (isLeft(x) ? isLeft(y) && EL.equals(x.left, y.left) : isRight(y) && EA.equals(x.right, y.right));\n    }\n}); };\n/**\n * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * @example\n * import { getSemigroup, left, right } from 'fp-ts/Either'\n * import { SemigroupSum } from 'fp-ts/number'\n *\n * const S = getSemigroup<string, number>(SemigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getSemigroup = function (S) { return ({\n    concat: function (x, y) { return (isLeft(y) ? x : isLeft(x) ? y : right(S.concat(x.right, y.right))); }\n}); };\n/**\n * Builds a `Compactable` instance for `Either` given `Monoid` for the left side.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getCompactable = function (M) {\n    var empty = left(M.empty);\n    return {\n        URI: URI,\n        _E: undefined,\n        compact: function (ma) { return (isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : right(ma.right.value)); },\n        separate: function (ma) {\n            return isLeft(ma)\n                ? separated(ma, ma)\n                : isLeft(ma.right)\n                    ? separated(right(ma.right.left), empty)\n                    : separated(empty, right(ma.right.right));\n        }\n    };\n};\n/**\n * Builds a `Filterable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getFilterable = function (M) {\n    var empty = left(M.empty);\n    var _a = getCompactable(M), compact = _a.compact, separate = _a.separate;\n    var filter = function (ma, predicate) {\n        return isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;\n    };\n    var partition = function (ma, p) {\n        return isLeft(ma)\n            ? separated(ma, ma)\n            : p(ma.right)\n                ? separated(empty, right(ma.right))\n                : separated(right(ma.right), empty);\n    };\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: compact,\n        separate: separate,\n        filter: filter,\n        filterMap: function (ma, f) {\n            if (isLeft(ma)) {\n                return ma;\n            }\n            var ob = f(ma.right);\n            return ob._tag === 'None' ? empty : right(ob.value);\n        },\n        partition: partition,\n        partitionMap: function (ma, f) {\n            if (isLeft(ma)) {\n                return separated(ma, ma);\n            }\n            var e = f(ma.right);\n            return isLeft(e) ? separated(right(e.left), empty) : separated(empty, right(e.right));\n        }\n    };\n};\n/**\n * Builds `Witherable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getWitherable = function (M) {\n    var F_ = getFilterable(M);\n    var C = getCompactable(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: F_.compact,\n        separate: F_.separate,\n        filter: F_.filter,\n        filterMap: F_.filterMap,\n        partition: F_.partition,\n        partitionMap: F_.partitionMap,\n        traverse: _traverse,\n        sequence: sequence,\n        reduce: _reduce,\n        foldMap: _foldMap,\n        reduceRight: _reduceRight,\n        wither: witherDefault(Traversable, C),\n        wilt: wiltDefault(Traversable, C)\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var getApplicativeValidation = function (SE) { return ({\n    URI: URI,\n    _E: undefined,\n    map: _map,\n    ap: function (fab, fa) {\n        return isLeft(fab)\n            ? isLeft(fa)\n                ? left(SE.concat(fab.left, fa.left))\n                : fab\n            : isLeft(fa)\n                ? fa\n                : right(fab.right(fa.right));\n    },\n    of: of\n}); };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var getAltValidation = function (SE) { return ({\n    URI: URI,\n    _E: undefined,\n    map: _map,\n    alt: function (me, that) {\n        if (isRight(me)) {\n            return me;\n        }\n        var ea = that();\n        return isLeft(ea) ? left(SE.concat(me.left, ea.left)) : ea;\n    }\n}); };\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) {\n    return isLeft(fa) ? fa : right(f(fa.right));\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category instance operations\n * @since 2.7.0\n */\nexport var of = right;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * Less strict version of [`ap`](#ap).\n *\n * @category instance operations\n * @since 2.8.0\n */\nexport var apW = function (fa) { return function (fab) { return (isLeft(fab) ? fab : isLeft(fa) ? fa : right(fab.right(fa.right))); }; };\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category instance operations\n * @since 2.0.0\n */\nexport var ap = apW;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * Less strict version of [`chain`](#chain).\n *\n * @category instance operations\n * @since 2.6.0\n */\nexport var chainW = function (f) { return function (ma) {\n    return isLeft(ma) ? ma : f(ma.right);\n}; };\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category instance operations\n * @since 2.0.0\n */\nexport var chain = chainW;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain\n};\n/**\n * Left-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'prefix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduce(startWith, concat)),\n *   'prefix:a'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduce(startWith, concat)),\n *   'prefix'\n * )\n *\n * @category instance operations\n * @since 2.0.0\n */\nexport var reduce = function (b, f) { return function (fa) {\n    return isLeft(fa) ? b : f(b, fa.right);\n}; };\n/**\n * Map each element of the structure to a monoid, and combine the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as S from 'fp-ts/string'\n *\n * const yell = (a: string) => `${a}!`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.foldMap(S.Monoid)(yell)),\n *   'a!'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.foldMap(S.Monoid)(yell)),\n *   S.Monoid.empty\n * )\n *\n * @category instance operations\n * @since 2.0.0\n */\nexport var foldMap = function (M) { return function (f) { return function (fa) {\n    return isLeft(fa) ? M.empty : f(fa.right);\n}; }; };\n/**\n * Right-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'postfix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduceRight(startWith, concat)),\n *   'a:postfix'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduceRight(startWith, concat)),\n *   'postfix'\n * )\n *\n * @category instance operations\n * @since 2.0.0\n */\nexport var reduceRight = function (b, f) { return function (fa) {\n    return isLeft(fa) ? b : f(fa.right, b);\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(['a']), E.traverse(O.Applicative)(RA.head)),\n *   O.some(E.right('a'))\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right([]), E.traverse(O.Applicative)(RA.head)),\n *   O.none\n * )\n *\n * @category instance operations\n * @since 2.6.3\n */\nexport var traverse = function (F) { return function (f) { return function (ta) { return (isLeft(ta) ? F.of(left(ta.left)) : F.map(f(ta.right), right)); }; }; };\n/**\n * Evaluate each monadic action in the structure from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.some('a')), E.sequence(O.Applicative)),\n *   O.some(E.right('a'))\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.none), E.sequence(O.Applicative)),\n *   O.none\n * )\n *\n * @category instance operations\n * @since 2.6.3\n */\nexport var sequence = function (F) { return function (ma) {\n    return isLeft(ma) ? F.of(left(ma.left)) : F.map(ma.right, right);\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category instance operations\n * @since 2.0.0\n */\nexport var bimap = function (f, g) { return function (fa) { return (isLeft(fa) ? left(f(fa.left)) : right(g(fa.right))); }; };\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category instance operations\n * @since 2.0.0\n */\nexport var mapLeft = function (f) { return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : fa;\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category instance operations\n * @since 2.9.0\n */\nexport var altW = function (that) { return function (fa) { return (isLeft(fa) ? that() : fa); }; };\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category instance operations\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) {\n    return isLeft(wa) ? wa : right(f(wa));\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var ChainRec = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain,\n    chainRec: _chainRec\n};\n/**\n * @category instance operations\n * @since 2.6.3\n */\nexport var throwError = left;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain,\n    throwError: throwError\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: identity\n};\n/**\n * @example\n * import { fromPredicate, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     -1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var fromPredicate = \n/*#__PURE__*/\nfromPredicate_(FromEither);\n// -------------------------------------------------------------------------------------\n// natural transformations\n// -------------------------------------------------------------------------------------\n/**\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     O.some(1),\n *     E.fromOption(() => 'error')\n *   ),\n *   E.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     O.none,\n *     E.fromOption(() => 'error')\n *   ),\n *   E.left('error')\n * )\n *\n * @category natural transformations\n * @since 2.0.0\n */\nexport var fromOption = \n/*#__PURE__*/\nfromOption_(FromEither);\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the either is an instance of `Left`, `false` otherwise.\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isLeft = _.isLeft;\n/**\n * Returns `true` if the either is an instance of `Right`, `false` otherwise.\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isRight = _.isRight;\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Less strict version of [`match`](#match).\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var matchW = function (onLeft, onRight) { return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : onRight(ma.right);\n}; };\n/**\n * Alias of [`matchW`](#matchw).\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var foldW = matchW;\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,\n * if the value is a `Right` the inner value is applied to the second function.\n *\n * @example\n * import { match, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * function onLeft(errors: Array<string>): string {\n *   return `Errors: ${errors.join(', ')}`\n * }\n *\n * function onRight(value: number): string {\n *   return `Ok: ${value}`\n * }\n *\n * assert.strictEqual(\n *   pipe(\n *     right(1),\n *     match(onLeft, onRight)\n *   ),\n *   'Ok: 1'\n * )\n * assert.strictEqual(\n *   pipe(\n *     left(['error 1', 'error 2']),\n *     match(onLeft, onRight)\n *   ),\n *   'Errors: error 1, error 2'\n * )\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var match = matchW;\n/**\n * Alias of [`match`](#match).\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var fold = match;\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * @category destructors\n * @since 2.6.0\n */\nexport var getOrElseW = function (onLeft) { return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : ma.right;\n}; };\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { getOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('error'),\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var getOrElse = getOrElseW;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apFirst = \n/*#__PURE__*/\napFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apSecond = \n/*#__PURE__*/\napSecond_(Apply);\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chainFirst = \n/*#__PURE__*/\nchainFirst_(Chain);\n/**\n * Less strict version of [`chainFirst`](#chainfirst)\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.8.0\n */\nexport var chainFirstW = chainFirst;\n/**\n * Less strict version of [`flatten`](#flatten).\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var flattenW = \n/*#__PURE__*/\nchainW(identity);\n/**\n * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.\n *\n * Derivable from `Chain`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))\n * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))\n * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var flatten = flattenW;\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var duplicate = \n/*#__PURE__*/\nextend(identity);\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var fromOptionK = \n/*#__PURE__*/\nfromOptionK_(FromEither);\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var chainOptionK = \n/*#__PURE__*/\nchainOptionK_(FromEither, Chain);\n/**\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     E.right(1),\n *     E.filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   E.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     E.right(-1),\n *     E.filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   E.left('error')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     E.left('a'),\n *     E.filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   E.left('a')\n * )\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var filterOrElse = \n/*#__PURE__*/\nfilterOrElse_(FromEither, Chain);\n/**\n * Less strict version of [`filterOrElse`](#filterorelse).\n *\n * @category combinators\n * @since 2.9.0\n */\nexport var filterOrElseW = filterOrElse;\n/**\n * Returns a `Right` if is a `Left` (and vice versa).\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var swap = function (ma) { return (isLeft(ma) ? right(ma.left) : left(ma.right)); };\n/**\n * Less strict version of [`orElse`](#orelse).\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var orElseW = function (onLeft) { return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : ma;\n}; };\n/**\n * Useful for recovering from errors.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var orElse = orElseW;\n// -------------------------------------------------------------------------------------\n// interop\n// -------------------------------------------------------------------------------------\n/**\n * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { fromNullable, left, right } from 'fp-ts/Either'\n *\n * const parse = fromNullable('nully')\n *\n * assert.deepStrictEqual(parse(1), right(1))\n * assert.deepStrictEqual(parse(null), left('nully'))\n *\n * @category interop\n * @since 2.0.0\n */\nexport var fromNullable = function (e) { return function (a) {\n    return a == null ? left(e) : right(a);\n}; };\n/**\n * Constructs a new `Either` from a function that might throw.\n *\n * See also [`tryCatchK`](#trycatchk).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * const unsafeHead = <A>(as: ReadonlyArray<A>): A => {\n *   if (as.length > 0) {\n *     return as[0]\n *   } else {\n *     throw new Error('empty array')\n *   }\n * }\n *\n * const head = <A>(as: ReadonlyArray<A>): E.Either<Error, A> =>\n *   E.tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))\n *\n * assert.deepStrictEqual(head([]), E.left(new Error('empty array')))\n * assert.deepStrictEqual(head([1, 2, 3]), E.right(1))\n *\n * @category interop\n * @since 2.0.0\n */\nexport var tryCatch = function (f, onThrow) {\n    try {\n        return right(f());\n    }\n    catch (e) {\n        return left(onThrow(e));\n    }\n};\n/**\n * Converts a function that may throw to one returning a `Either`.\n *\n * @category interop\n * @since 2.10.0\n */\nexport var tryCatchK = function (f, onThrow) { return function () {\n    var a = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        a[_i] = arguments[_i];\n    }\n    return tryCatch(function () { return f.apply(void 0, a); }, onThrow);\n}; };\n/**\n * @category interop\n * @since 2.9.0\n */\nexport var fromNullableK = function (e) {\n    var from = fromNullable(e);\n    return function (f) { return flow(f, from); };\n};\n/**\n * @category interop\n * @since 2.9.0\n */\nexport var chainNullableK = function (e) {\n    var from = fromNullableK(e);\n    return function (f) { return chain(from(f)); };\n};\n/**\n * @category interop\n * @since 2.10.0\n */\nexport var toUnion = \n/*#__PURE__*/\nfoldW(identity, identity);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Default value for the `onError` argument of `tryCatch`\n *\n * @since 2.0.0\n */\nexport function toError(e) {\n    return e instanceof Error ? e : new Error(String(e));\n}\n/**\n * @since 2.0.0\n */\nexport var elem = function (E) { return function (a, ma) {\n    return isLeft(ma) ? false : E.equals(a, ma.right);\n}; };\n/**\n * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.\n *\n * @example\n * import { exists, left, right } from 'fp-ts/Either'\n *\n * const gt2 = exists((n: number) => n > 2)\n *\n * assert.strictEqual(gt2(left('a')), false)\n * assert.strictEqual(gt2(right(1)), false)\n * assert.strictEqual(gt2(right(3)), true)\n *\n * @since 2.0.0\n */\nexport var exists = function (predicate) { return function (ma) {\n    return isLeft(ma) ? false : predicate(ma.right);\n}; };\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var Do = \n/*#__PURE__*/\nof(_.emptyRecord);\n/**\n * @since 2.8.0\n */\nexport var bindTo = \n/*#__PURE__*/\nbindTo_(Functor);\n/**\n * @since 2.8.0\n */\nexport var bind = \n/*#__PURE__*/\nbind_(Chain);\n/**\n * @since 2.8.0\n */\nexport var bindW = bind;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apS = \n/*#__PURE__*/\napS_(Apply);\n/**\n * @since 2.8.0\n */\nexport var apSW = apS;\n// -------------------------------------------------------------------------------------\n// sequence T\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var ApT = of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) { return function (as) {\n    var e = f(0, _.head(as));\n    if (isLeft(e)) {\n        return e;\n    }\n    var out = [e.right];\n    for (var i = 1; i < as.length; i++) {\n        var e_1 = f(i, as[i]);\n        if (isLeft(e_1)) {\n            return e_1;\n        }\n        out.push(e_1.right);\n    }\n    return right(out);\n}; };\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * @since 2.9.0\n */\nexport var traverseArray = function (f) { return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/\ntraverseArray(identity);\n/**\n * Use [`parse`](./Json.ts.html#parse) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexport function parseJSON(s, onError) {\n    return tryCatch(function () { return JSON.parse(s); }, onError);\n}\n/**\n * Use [`stringify`](./Json.ts.html#stringify) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexport var stringifyJSON = function (u, onError) {\n    return tryCatch(function () {\n        var s = JSON.stringify(u);\n        if (typeof s !== 'string') {\n            throw new Error('Converting unsupported structure to JSON');\n        }\n        return s;\n    }, onError);\n};\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var either = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: _chain,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    bimap: _bimap,\n    mapLeft: _mapLeft,\n    alt: _alt,\n    extend: _extend,\n    chainRec: _chainRec,\n    throwError: throwError\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplySemigroup = \n/*#__PURE__*/\ngetApplySemigroup_(Apply);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplyMonoid = \n/*#__PURE__*/\ngetApplicativeMonoid(Applicative);\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getValidationSemigroup = function (SE, SA) {\n    return getApplySemigroup_(getApplicativeValidation(SE))(SA);\n};\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getValidationMonoid = function (SE, MA) {\n    return getApplicativeMonoid(getApplicativeValidation(SE))(MA);\n};\n/**\n * Use [`getApplicativeValidation`](#getapplicativevalidation) and [`getAltValidation`](#getaltvalidation) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport function getValidation(SE) {\n    var ap = getApplicativeValidation(SE).ap;\n    var alt = getAltValidation(SE).alt;\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        of: of,\n        chain: _chain,\n        bimap: _bimap,\n        mapLeft: _mapLeft,\n        reduce: _reduce,\n        foldMap: _foldMap,\n        reduceRight: _reduceRight,\n        extend: _extend,\n        traverse: _traverse,\n        sequence: sequence,\n        chainRec: _chainRec,\n        throwError: throwError,\n        ap: ap,\n        alt: alt\n    };\n}\n","import { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { chainEitherK as chainEitherK_, fromEitherK as fromEitherK_ } from './FromEither';\nimport { constNull, constUndefined, flow, identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { not } from './Predicate';\nimport { first, last } from './Semigroup';\nimport { separated } from './Separated';\nimport { wiltDefault, witherDefault } from './Witherable';\nimport { guard as guard_ } from './Zero';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * `None` doesn't have a constructor, instead you can use it directly as a value. Represents a missing value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var none = _.none;\n/**\n * Constructs a `Some`. Represents an optional value that exists.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var some = _.some;\nexport function fromPredicate(predicate) {\n    return function (a) { return (predicate(a) ? some(a) : none); };\n}\n/**\n * Returns the `Left` value of an `Either` if possible.\n *\n * @example\n * import { getLeft, none, some } from 'fp-ts/Option'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(getLeft(right(1)), none)\n * assert.deepStrictEqual(getLeft(left('a')), some('a'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var getLeft = function (ma) { return (ma._tag === 'Right' ? none : some(ma.left)); };\n/**\n * Returns the `Right` value of an `Either` if possible.\n *\n * @example\n * import { getRight, none, some } from 'fp-ts/Option'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(getRight(right(1)), some(1))\n * assert.deepStrictEqual(getRight(left('a')), none)\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var getRight = function (ma) { return (ma._tag === 'Left' ? none : some(ma.right)); };\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _chain = function (ma, f) { return pipe(ma, chain(f)); };\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\nvar _filter = function (fa, predicate) { return pipe(fa, filter(predicate)); };\n/* istanbul ignore next */\nvar _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\n/* istanbul ignore next */\nvar _partition = function (fa, predicate) {\n    return pipe(fa, partition(predicate));\n};\n/* istanbul ignore next */\nvar _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var URI = 'Option';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = function (S) { return ({\n    show: function (ma) { return (isNone(ma) ? 'none' : \"some(\" + S.show(ma.value) + \")\"); }\n}); };\n/**\n * @example\n * import { none, some, getEq } from 'fp-ts/Option'\n * import * as N from 'fp-ts/number'\n *\n * const E = getEq(N.Eq)\n * assert.strictEqual(E.equals(none, none), true)\n * assert.strictEqual(E.equals(none, some(1)), false)\n * assert.strictEqual(E.equals(some(1), none), false)\n * assert.strictEqual(E.equals(some(1), some(2)), false)\n * assert.strictEqual(E.equals(some(1), some(1)), true)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = function (E) { return ({\n    equals: function (x, y) { return x === y || (isNone(x) ? isNone(y) : isNone(y) ? false : E.equals(x.value, y.value)); }\n}); };\n/**\n * The `Ord` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Ord` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n *\n * @example\n * import { none, some, getOrd } from 'fp-ts/Option'\n * import * as N from 'fp-ts/number'\n *\n * const O = getOrd(N.Ord)\n * assert.strictEqual(O.compare(none, none), 0)\n * assert.strictEqual(O.compare(none, some(1)), -1)\n * assert.strictEqual(O.compare(some(1), none), 1)\n * assert.strictEqual(O.compare(some(1), some(2)), -1)\n * assert.strictEqual(O.compare(some(1), some(1)), 0)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getOrd = function (O) { return ({\n    equals: getEq(O).equals,\n    compare: function (x, y) { return (x === y ? 0 : isSome(x) ? (isSome(y) ? O.compare(x.value, y.value) : 1) : -1); }\n}); };\n/**\n * Monoid returning the left-most non-`None` value. If both operands are `Some`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | some(a)            |\n * | none    | some(b) | some(b)            |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getMonoid, some, none } from 'fp-ts/Option'\n * import { SemigroupSum } from 'fp-ts/number'\n *\n * const M = getMonoid(SemigroupSum)\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getMonoid = function (S) { return ({\n    concat: function (x, y) { return (isNone(x) ? y : isNone(y) ? x : some(S.concat(x.value, y.value))); },\n    empty: none\n}); };\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) {\n    return isNone(fa) ? none : some(f(fa.value));\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * @category instance operations\n * @since 2.7.0\n */\nexport var of = some;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var ap = function (fa) { return function (fab) {\n    return isNone(fab) ? none : isNone(fa) ? none : some(fab.value(fa.value));\n}; };\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category instance operations\n * @since 2.0.0\n */\nexport var chain = function (f) { return function (ma) {\n    return isNone(ma) ? none : f(ma.value);\n}; };\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain\n};\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var reduce = function (b, f) { return function (fa) {\n    return isNone(fa) ? b : f(b, fa.value);\n}; };\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var foldMap = function (M) { return function (f) { return function (fa) {\n    return isNone(fa) ? M.empty : f(fa.value);\n}; }; };\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var reduceRight = function (b, f) { return function (fa) {\n    return isNone(fa) ? b : f(fa.value, b);\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category instance operations\n * @since 2.9.0\n */\nexport var altW = function (that) { return function (fa) {\n    return isNone(fa) ? that() : fa;\n}; };\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `Option` returns the left-most non-`None` value.\n *\n * @example\n * import * as O from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     O.some('a'),\n *     O.alt(() => O.some('b'))\n *   ),\n *   O.some('a')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     O.none,\n *     O.alt(() => O.some('b'))\n *   ),\n *   O.some('b')\n * )\n *\n * @category instance operations\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instance operations\n * @since 2.7.0\n */\nexport var zero = function () { return none; };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Zero = {\n    URI: URI,\n    zero: zero\n};\n/**\n * @category constructors\n * @since 2.11.0\n */\nexport var guard = \n/*#__PURE__*/\nguard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alternative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    alt: _alt,\n    zero: zero\n};\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) {\n    return isNone(wa) ? none : some(f(wa));\n}; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var compact = \n/*#__PURE__*/\nchain(identity);\nvar defaultSeparated = \n/*#__PURE__*/\nseparated(none, none);\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var separate = function (ma) {\n    return isNone(ma) ? defaultSeparated : separated(getLeft(ma.value), getRight(ma.value));\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var filter = function (predicate) { return function (fa) { return (isNone(fa) ? none : predicate(fa.value) ? fa : none); }; };\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var filterMap = function (f) { return function (fa) {\n    return isNone(fa) ? none : f(fa.value);\n}; };\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var partition = function (predicate) { return function (fa) { return separated(_filter(fa, not(predicate)), _filter(fa, predicate)); }; };\n/**\n * @category instance operations\n * @since 2.0.0\n */\nexport var partitionMap = function (f) { return flow(map(f), separate); };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category instance operations\n * @since 2.6.3\n */\nexport var traverse = function (F) { return function (f) { return function (ta) { return (isNone(ta) ? F.of(none) : F.map(f(ta.value), some)); }; }; };\n/**\n * @category instance operations\n * @since 2.6.3\n */\nexport var sequence = function (F) { return function (ta) { return (isNone(ta) ? F.of(none) : F.map(ta.value, some)); }; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\nvar _wither = \n/*#__PURE__*/\nwitherDefault(Traversable, Compactable);\nvar _wilt = \n/*#__PURE__*/\nwiltDefault(Traversable, Compactable);\n/**\n * @category instance operations\n * @since 2.6.5\n */\nexport var wither = function (F) {\n    var _witherF = _wither(F);\n    return function (f) { return function (fa) { return _witherF(fa, f); }; };\n};\n/**\n * @category instance operations\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n    var _wiltF = _wilt(F);\n    return function (f) { return function (fa) { return _wiltF(fa, f); }; };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Witherable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * @category instance operations\n * @since 2.7.0\n */\nexport var throwError = function () { return none; };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain,\n    throwError: throwError\n};\n/**\n * Transforms an `Either` to an `Option` discarding the error.\n *\n * Alias of [getRight](#getright)\n *\n * @category natural transformations\n * @since 2.0.0\n */\nexport var fromEither = getRight;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the option is an instance of `Some`, `false` otherwise.\n *\n * @example\n * import { some, none, isSome } from 'fp-ts/Option'\n *\n * assert.strictEqual(isSome(some(1)), true)\n * assert.strictEqual(isSome(none), false)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isSome = _.isSome;\n/**\n * Returns `true` if the option is `None`, `false` otherwise.\n *\n * @example\n * import { some, none, isNone } from 'fp-ts/Option'\n *\n * assert.strictEqual(isNone(some(1)), false)\n * assert.strictEqual(isNone(none), true)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isNone = function (fa) { return fa._tag === 'None'; };\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Less strict version of [`match`](#match).\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var matchW = function (onNone, onSome) { return function (ma) {\n    return isNone(ma) ? onNone() : onSome(ma.value);\n}; };\n/**\n * Alias of [`matchW`](#matchw).\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var foldW = matchW;\n/**\n * Takes a (lazy) default value, a function, and an `Option` value, if the `Option` value is `None` the default value is\n * returned, otherwise the function is applied to the value inside the `Some` and the result is returned.\n *\n * @example\n * import { some, none, match } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     match(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a some containing 1'\n * )\n *\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     match(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a none'\n * )\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var match = matchW;\n/**\n * Alias of [`match`](#match).\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var fold = match;\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * @category destructors\n * @since 2.6.0\n */\nexport var getOrElseW = function (onNone) { return function (ma) { return (isNone(ma) ? onNone() : ma.value); }; };\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns the given default value\n *\n * @example\n * import { some, none, getOrElse } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var getOrElse = getOrElseW;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#__PURE__*/\nflap_(Functor);\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apFirst = \n/*#__PURE__*/\napFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apSecond = \n/*#__PURE__*/\napSecond_(Apply);\n/**\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var flatten = compact;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chainFirst = \n/*#__PURE__*/\nchainFirst_(Chain);\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var duplicate = \n/*#__PURE__*/\nextend(identity);\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var fromEitherK = \n/*#__PURE__*/\nfromEitherK_(FromEither);\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var chainEitherK = \n/*#__PURE__*/\nchainEitherK_(FromEither, Chain);\n// -------------------------------------------------------------------------------------\n// interop\n// -------------------------------------------------------------------------------------\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`.\n *\n * @example\n * import { none, some, fromNullable } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(fromNullable(undefined), none)\n * assert.deepStrictEqual(fromNullable(null), none)\n * assert.deepStrictEqual(fromNullable(1), some(1))\n *\n * @category interop\n * @since 2.0.0\n */\nexport var fromNullable = function (a) { return (a == null ? none : some(a)); };\n/**\n * Transforms an exception into an `Option`. If `f` throws, returns `None`, otherwise returns the output wrapped in a\n * `Some`.\n *\n * See also [`tryCatchK`](#trycatchk).\n *\n * @example\n * import { none, some, tryCatch } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   tryCatch(() => {\n *     throw new Error()\n *   }),\n *   none\n * )\n * assert.deepStrictEqual(tryCatch(() => 1), some(1))\n *\n * @category interop\n * @since 2.0.0\n */\nexport var tryCatch = function (f) {\n    try {\n        return some(f());\n    }\n    catch (e) {\n        return none;\n    }\n};\n/**\n * Converts a function that may throw to one returning a `Option`.\n *\n * @category interop\n * @since 2.10.0\n */\nexport var tryCatchK = function (f) { return function () {\n    var a = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        a[_i] = arguments[_i];\n    }\n    return tryCatch(function () { return f.apply(void 0, a); });\n}; };\n/**\n * Returns a *smart constructor* from a function that returns a nullable value.\n *\n * @example\n * import { fromNullableK, none, some } from 'fp-ts/Option'\n *\n * const f = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const g = fromNullableK(f)\n *\n * assert.deepStrictEqual(g('1'), some(1))\n * assert.deepStrictEqual(g('a'), none)\n *\n * @category interop\n * @since 2.9.0\n */\nexport var fromNullableK = function (f) { return flow(f, fromNullable); };\n/**\n * This is `chain` + `fromNullable`, useful when working with optional values.\n *\n * @example\n * import { some, none, fromNullable, chainNullableK } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Employee {\n *   readonly company?: {\n *     readonly address?: {\n *       readonly street?: {\n *         readonly name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee1.company),\n *     chainNullableK(company => company.address),\n *     chainNullableK(address => address.street),\n *     chainNullableK(street => street.name)\n *   ),\n *   some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee2.company),\n *     chainNullableK(company => company.address),\n *     chainNullableK(address => address.street),\n *     chainNullableK(street => street.name)\n *   ),\n *   none\n * )\n *\n * @category interop\n * @since 2.9.0\n */\nexport var chainNullableK = function (f) { return function (ma) {\n    return isNone(ma) ? none : fromNullable(f(ma.value));\n}; };\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `null`.\n *\n * @example\n * import { some, none, toNullable } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toNullable\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toNullable\n *   ),\n *   null\n * )\n *\n * @category interop\n * @since 2.0.0\n */\nexport var toNullable = \n/*#__PURE__*/\nmatch(constNull, identity);\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `undefined`.\n *\n * @example\n * import { some, none, toUndefined } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toUndefined\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toUndefined\n *   ),\n *   undefined\n * )\n *\n * @category interop\n * @since 2.0.0\n */\nexport var toUndefined = \n/*#__PURE__*/\nmatch(constUndefined, identity);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if `ma` contains `a`\n *\n * @example\n * import { some, none, elem } from 'fp-ts/Option'\n * import * as N from 'fp-ts/number'\n *\n * assert.strictEqual(elem(N.Eq)(1, some(1)), true)\n * assert.strictEqual(elem(N.Eq)(2, some(1)), false)\n * assert.strictEqual(elem(N.Eq)(1, none), false)\n *\n * @since 2.0.0\n */\nexport function elem(E) {\n    return function (a, ma) { return (isNone(ma) ? false : E.equals(a, ma.value)); };\n}\n/**\n * Returns `true` if the predicate is satisfied by the wrapped value\n *\n * @example\n * import { some, none, exists } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 0)\n *   ),\n *   true\n * )\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 1)\n *   ),\n *   false\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     exists(n => n > 0)\n *   ),\n *   false\n * )\n *\n * @since 2.0.0\n */\nexport var exists = function (predicate) { return function (ma) {\n    return isNone(ma) ? false : predicate(ma.value);\n}; };\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var Do = \n/*#__PURE__*/\nof(_.emptyRecord);\n/**\n * @since 2.8.0\n */\nexport var bindTo = \n/*#__PURE__*/\nbindTo_(Functor);\n/**\n * @since 2.8.0\n */\nexport var bind = \n/*#__PURE__*/\nbind_(Chain);\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apS = \n/*#__PURE__*/\napS_(Apply);\n// -------------------------------------------------------------------------------------\n// sequence T\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var ApT = of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.\n *\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) { return function (as) {\n    var o = f(0, _.head(as));\n    if (isNone(o)) {\n        return none;\n    }\n    var out = [o.value];\n    for (var i = 1; i < as.length; i++) {\n        var o_1 = f(i, as[i]);\n        if (isNone(o_1)) {\n            return none;\n        }\n        out.push(o_1.value);\n    }\n    return some(out);\n}; };\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * @since 2.9.0\n */\nexport var traverseArray = function (f) {\n    return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); });\n};\n/**\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/\ntraverseArray(identity);\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n// tslint:disable: deprecation\n/**\n * Use `Refinement` module instead.\n *\n * @since 2.0.0\n * @deprecated\n */\nexport function getRefinement(getOption) {\n    return function (a) { return isSome(getOption(a)); };\n}\n/**\n * Use [`chainNullableK`](#chainnullablek) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexport var mapNullable = chainNullableK;\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var option = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: _chain,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    zero: zero,\n    alt: _alt,\n    extend: _extend,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    wither: _wither,\n    wilt: _wilt,\n    throwError: throwError\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplySemigroup = \n/*#__PURE__*/\ngetApplySemigroup_(Apply);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplyMonoid = \n/*#__PURE__*/\ngetApplicativeMonoid(Applicative);\n/**\n * Use\n *\n * ```ts\n * import { first } from 'fp-ts/Semigroup'\n * import { getMonoid } from 'fp-ts/Option'\n *\n * getMonoid(first())\n * ```\n *\n * instead.\n *\n * Monoid returning the left-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(b) | some(b)      |\n * | some(a) | some(b) | some(a)      |\n *\n * @example\n * import { getFirstMonoid, some, none } from 'fp-ts/Option'\n *\n * const M = getFirstMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(2)), some(2))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(1))\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getFirstMonoid = function () { return getMonoid(first()); };\n/**\n * Use\n *\n * ```ts\n * import { last } from 'fp-ts/Semigroup'\n * import { getMonoid } from 'fp-ts/Option'\n *\n * getMonoid(last())\n * ```\n *\n * instead.\n *\n * Monoid returning the right-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(b) | some(b)      |\n * | some(a) | some(b) | some(b)      |\n *\n * @example\n * import { getLastMonoid, some, none } from 'fp-ts/Option'\n *\n * const M = getLastMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(2)), some(2))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(2))\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getLastMonoid = function () { return getMonoid(last()); };\n","/**\n * If a type `A` can form a `Semigroup` it has an **associative** binary operation.\n *\n * ```ts\n * interface Semigroup<A> {\n *   readonly concat: (x: A, y: A) => A\n * }\n * ```\n *\n * Associativity means the following equality must hold for any choice of `x`, `y`, and `z`.\n *\n * ```ts\n * concat(x, concat(y, z)) = concat(concat(x, y), z)\n * ```\n *\n * A common example of a semigroup is the type `string` with the operation `+`.\n *\n * ```ts\n * import { Semigroup } from 'fp-ts/Semigroup'\n *\n * const semigroupString: Semigroup<string> = {\n *   concat: (x, y) => x + y\n * }\n *\n * const x = 'x'\n * const y = 'y'\n * const z = 'z'\n *\n * semigroupString.concat(x, y) // 'xy'\n *\n * semigroupString.concat(x, semigroupString.concat(y, z)) // 'xyz'\n *\n * semigroupString.concat(semigroupString.concat(x, y), z) // 'xyz'\n * ```\n *\n * *Adapted from https://typelevel.org/cats*\n *\n * @since 2.0.0\n */\nimport { getSemigroup, identity } from './function';\nimport * as _ from './internal';\nimport * as M from './Magma';\nimport * as Or from './Ord';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Get a semigroup where `concat` will return the minimum, based on the provided order.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.min(N.Ord)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 1)\n *\n * @category constructors\n * @since 2.10.0\n */\nexport var min = function (O) { return ({\n    concat: Or.min(O)\n}); };\n/**\n * Get a semigroup where `concat` will return the maximum, based on the provided order.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.max(N.Ord)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 2)\n *\n * @category constructors\n * @since 2.10.0\n */\nexport var max = function (O) { return ({\n    concat: Or.max(O)\n}); };\n/**\n * @category constructors\n * @since 2.10.0\n */\nexport var constant = function (a) { return ({\n    concat: function () { return a; }\n}); };\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * The dual of a `Semigroup`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import { reverse } from 'fp-ts/Semigroup'\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(reverse(S.Semigroup).concat('a', 'b'), 'ba')\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var reverse = M.reverse;\n/**\n * Given a struct of semigroups returns a semigroup for the struct.\n *\n * @example\n * import { struct } from 'fp-ts/Semigroup'\n * import * as N from 'fp-ts/number'\n *\n * interface Point {\n *   readonly x: number\n *   readonly y: number\n * }\n *\n * const S = struct<Point>({\n *   x: N.SemigroupSum,\n *   y: N.SemigroupSum\n * })\n *\n * assert.deepStrictEqual(S.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var struct = function (semigroups) { return ({\n    concat: function (first, second) {\n        var r = {};\n        for (var k in semigroups) {\n            if (_.has.call(semigroups, k)) {\n                r[k] = semigroups[k].concat(first[k], second[k]);\n            }\n        }\n        return r;\n    }\n}); };\n/**\n * Given a tuple of semigroups returns a semigroup for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Semigroup'\n * import * as B from 'fp-ts/boolean'\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/string'\n *\n * const S1 = tuple(S.Semigroup, N.SemigroupSum)\n * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const S2 = tuple(S.Semigroup, N.SemigroupSum, B.SemigroupAll)\n * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var tuple = function () {\n    var semigroups = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        semigroups[_i] = arguments[_i];\n    }\n    return ({\n        concat: function (first, second) { return semigroups.map(function (s, i) { return s.concat(first[i], second[i]); }); }\n    });\n};\n/**\n * Between each pair of elements insert `middle`.\n *\n * @example\n * import { intercalate } from 'fp-ts/Semigroup'\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * const S1 = pipe(S.Semigroup, intercalate(' + '))\n *\n * assert.strictEqual(S1.concat('a', 'b'), 'a + b')\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var intercalate = function (middle) { return function (S) { return ({\n    concat: function (x, y) { return S.concat(x, S.concat(middle, y)); }\n}); }; };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * Always return the first argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.first<number>().concat(1, 2), 1)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var first = function () { return ({ concat: identity }); };\n/**\n * Always return the last argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.last<number>().concat(1, 2), 2)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var last = function () { return ({ concat: function (_, y) { return y; } }); };\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n * If `as` is empty, return the provided `startWith` value.\n *\n * @example\n * import { concatAll } from 'fp-ts/Semigroup'\n * import * as N from 'fp-ts/number'\n *\n * const sum = concatAll(N.SemigroupSum)(0)\n *\n * assert.deepStrictEqual(sum([1, 2, 3]), 6)\n * assert.deepStrictEqual(sum([]), 0)\n *\n * @since 2.10.0\n */\nexport var concatAll = M.concatAll;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `void` module instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupVoid = constant(undefined);\n/**\n * Use [`getAssignSemigroup`](./struct.ts.html#getAssignSemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getObjectSemigroup = function () { return ({\n    concat: function (first, second) { return Object.assign({}, first, second); }\n}); };\n/**\n * Use [`last`](#last) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getLastSemigroup = last;\n/**\n * Use [`first`](#first) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getFirstSemigroup = first;\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexport var getTupleSemigroup = tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexport var getStructSemigroup = struct;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexport var getDualSemigroup = reverse;\n/**\n * Use [`max`](#max) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexport var getJoinSemigroup = max;\n/**\n * Use [`min`](#min) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexport var getMeetSemigroup = min;\n/**\n * Use [`intercalate`](#intercalate) instead.\n *\n * @category combinators\n * @since 2.5.0\n * @deprecated\n */\nexport var getIntercalateSemigroup = intercalate;\nexport function fold(S) {\n    var concatAllS = concatAll(S);\n    return function (startWith, as) { return (as === undefined ? concatAllS(startWith) : concatAllS(startWith)(as)); };\n}\n/**\n * Use [`SemigroupAll`](./boolean.ts.html#SemigroupAll) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupAll = {\n    concat: function (x, y) { return x && y; }\n};\n/**\n * Use [`SemigroupAny`](./boolean.ts.html#SemigroupAny) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupAny = {\n    concat: function (x, y) { return x || y; }\n};\n/**\n * Use [`getSemigroup`](./function.ts.html#getSemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getFunctionSemigroup = getSemigroup;\n/**\n * Use [`Semigroup`](./string.ts.html#Semigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupString = {\n    concat: function (x, y) { return x + y; }\n};\n/**\n * Use [`SemigroupSum`](./number.ts.html#SemigroupSum) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupSum = {\n    concat: function (x, y) { return x + y; }\n};\n/**\n * Use [`SemigroupProduct`](./number.ts.html#SemigroupProduct) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var semigroupProduct = {\n    concat: function (x, y) { return x * y; }\n};\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { pipe } from './function';\nimport { flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as O from './Option';\nimport * as RM from './ReadonlyMap';\nimport { separated } from './Separated';\nimport { wiltDefault, witherDefault } from './Witherable';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = RM.getShow;\n/**\n * Calculate the number of key/value pairs in a map\n *\n * @since 2.0.0\n */\nexport var size = RM.size;\n/**\n * Test whether or not a map is empty\n *\n * @since 2.0.0\n */\nexport var isEmpty = RM.isEmpty;\n// TODO: remove non-curried overloading in v3\n/**\n * Test whether or not a key exists in a map\n *\n * @since 2.0.0\n */\nexport var member = RM.member;\n// TODO: remove non-curried overloading in v3\n/**\n * Test whether or not a value is a member of a map\n *\n * @since 2.0.0\n */\nexport var elem = RM.elem;\n/**\n * Get a sorted `Array` of the keys contained in a `Map`.\n *\n * @since 2.0.0\n */\nexport var keys = function (O) { return function (m) { return Array.from(m.keys()).sort(O.compare); }; };\n/**\n * Get a sorted `Array` of the values contained in a `Map`.\n *\n * @since 2.0.0\n */\nexport var values = function (O) { return function (m) { return Array.from(m.values()).sort(O.compare); }; };\n/**\n * @since 2.0.0\n */\nexport function collect(O) {\n    var keysO = keys(O);\n    return function (f) { return function (m) {\n        var out = [];\n        var ks = keysO(m);\n        for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {\n            var key = ks_1[_i];\n            out.push(f(key, m.get(key)));\n        }\n        return out;\n    }; };\n}\n/**\n * Get a sorted `Array` of the key/value pairs contained in a `Map`.\n *\n * @since 2.0.0\n */\nexport function toArray(O) {\n    return collect(O)(function (k, a) { return [k, a]; });\n}\nexport function toUnfoldable(ord, U) {\n    var toArrayO = toArray(ord);\n    return function (d) {\n        var kas = toArrayO(d);\n        var len = kas.length;\n        return U.unfold(0, function (b) { return (b < len ? _.some([kas[b], b + 1]) : _.none); });\n    };\n}\n/**\n * Insert or replace a key/value pair in a `Map`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var upsertAt = function (E) {\n    var lookupWithKeyE = lookupWithKey(E);\n    return function (k, a) {\n        var lookupWithKeyEk = lookupWithKeyE(k);\n        return function (m) {\n            var found = lookupWithKeyEk(m);\n            if (_.isNone(found)) {\n                var out = new Map(m);\n                out.set(k, a);\n                return out;\n            }\n            else if (found.value[1] !== a) {\n                var out = new Map(m);\n                out.set(found.value[0], a);\n                return out;\n            }\n            return m;\n        };\n    };\n};\n/**\n * Delete a key and value from a map\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var deleteAt = function (E) {\n    var lookupWithKeyE = lookupWithKey(E);\n    return function (k) { return function (m) {\n        var found = lookupWithKeyE(k, m);\n        if (_.isSome(found)) {\n            var r = new Map(m);\n            r.delete(found.value[0]);\n            return r;\n        }\n        return m;\n    }; };\n};\n/**\n * @since 2.0.0\n */\nexport var updateAt = function (E) {\n    var modifyAtE = modifyAt(E);\n    return function (k, a) { return modifyAtE(k, function () { return a; }); };\n};\n/**\n * @since 2.0.0\n */\nexport var modifyAt = function (E) {\n    var lookupWithKeyE = lookupWithKey(E);\n    return function (k, f) { return function (m) {\n        var found = lookupWithKeyE(k, m);\n        if (_.isNone(found)) {\n            return _.none;\n        }\n        var r = new Map(m);\n        r.set(found.value[0], f(found.value[1]));\n        return _.some(r);\n    }; };\n};\n/**\n * Delete a key and value from a map, returning the value as well as the subsequent map\n *\n * @since 2.0.0\n */\nexport function pop(E) {\n    var lookupE = lookup(E);\n    var deleteAtE = deleteAt(E);\n    return function (k) {\n        var deleteAtEk = deleteAtE(k);\n        return function (m) {\n            return pipe(lookupE(k, m), O.map(function (a) { return [a, deleteAtEk(m)]; }));\n        };\n    };\n}\nexport function lookupWithKey(E) {\n    return function (k, m) {\n        if (m === undefined) {\n            var lookupWithKeyE_1 = lookupWithKey(E);\n            return function (m) { return lookupWithKeyE_1(k, m); };\n        }\n        var entries = m.entries();\n        var e;\n        // tslint:disable-next-line: strict-boolean-expressions\n        while (!(e = entries.next()).done) {\n            var _a = e.value, ka = _a[0], a = _a[1];\n            if (E.equals(ka, k)) {\n                return _.some([ka, a]);\n            }\n        }\n        return _.none;\n    };\n}\n// TODO: remove non-curried overloading in v3\n/**\n * Lookup the value for a key in a `Map`.\n *\n * @since 2.0.0\n */\nexport var lookup = RM.lookup;\n// TODO: remove non-curried overloading in v3\n/**\n * Test whether or not one `Map` contains all of the keys and values contained in another `Map`\n *\n * @since 2.0.0\n */\nexport var isSubmap = RM.isSubmap;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RM.getEq;\n/**\n * Gets `Monoid` instance for Maps given `Semigroup` instance for their values\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getMonoid(SK, SA) {\n    var lookupWithKeyS = lookupWithKey(SK);\n    return {\n        concat: function (mx, my) {\n            if (isEmpty(mx)) {\n                return my;\n            }\n            if (isEmpty(my)) {\n                return mx;\n            }\n            var r = new Map(mx);\n            var entries = my.entries();\n            var e;\n            // tslint:disable-next-line: strict-boolean-expressions\n            while (!(e = entries.next()).done) {\n                var _a = e.value, k = _a[0], a = _a[1];\n                var mxOptA = lookupWithKeyS(k, mx);\n                if (_.isSome(mxOptA)) {\n                    r.set(mxOptA.value[0], SA.concat(mxOptA.value[1], a));\n                }\n                else {\n                    r.set(k, a);\n                }\n            }\n            return r;\n        },\n        empty: new Map()\n    };\n}\n/**\n * Create a map with one key/value pair\n *\n * @since 2.0.0\n */\nexport var singleton = function (k, a) { return new Map([[k, a]]); };\nexport function fromFoldable(E, M, F) {\n    return function (fka) {\n        var lookupWithKeyE = lookupWithKey(E);\n        return F.reduce(fka, new Map(), function (b, _a) {\n            var k = _a[0], a = _a[1];\n            var bOpt = lookupWithKeyE(k, b);\n            if (_.isSome(bOpt)) {\n                b.set(bOpt.value[0], M.concat(bOpt.value[1], a));\n            }\n            else {\n                b.set(k, a);\n            }\n            return b;\n        });\n    };\n}\nvar _mapWithIndex = function (fa, f) {\n    var m = new Map();\n    var entries = fa.entries();\n    var e;\n    // tslint:disable-next-line: strict-boolean-expressions\n    while (!(e = entries.next()).done) {\n        var _a = e.value, key = _a[0], a = _a[1];\n        m.set(key, f(key, a));\n    }\n    return m;\n};\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var partitionMapWithIndex = function (f) { return function (fa) {\n    var left = new Map();\n    var right = new Map();\n    var entries = fa.entries();\n    var e;\n    // tslint:disable-next-line: strict-boolean-expressions\n    while (!(e = entries.next()).done) {\n        var _a = e.value, k = _a[0], a = _a[1];\n        var ei = f(k, a);\n        if (_.isLeft(ei)) {\n            left.set(k, ei.left);\n        }\n        else {\n            right.set(k, ei.right);\n        }\n    }\n    return separated(left, right);\n}; };\nexport function partitionWithIndex(predicateWithIndex) {\n    return function (fa) {\n        var left = new Map();\n        var right = new Map();\n        var entries = fa.entries();\n        var e;\n        // tslint:disable-next-line: strict-boolean-expressions\n        while (!(e = entries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            if (predicateWithIndex(k, a)) {\n                right.set(k, a);\n            }\n            else {\n                left.set(k, a);\n            }\n        }\n        return separated(left, right);\n    };\n}\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var filterMapWithIndex = function (f) { return function (fa) {\n    var m = new Map();\n    var entries = fa.entries();\n    var e;\n    // tslint:disable-next-line: strict-boolean-expressions\n    while (!(e = entries.next()).done) {\n        var _a = e.value, k = _a[0], a = _a[1];\n        var o = f(k, a);\n        if (_.isSome(o)) {\n            m.set(k, o.value);\n        }\n    }\n    return m;\n}; };\nexport function filterWithIndex(p) {\n    return function (m) {\n        var out = new Map();\n        var entries = m.entries();\n        var e;\n        // tslint:disable-next-line: strict-boolean-expressions\n        while (!(e = entries.next()).done) {\n            var _a = e.value, k = _a[0], a = _a[1];\n            if (p(k, a)) {\n                out.set(k, a);\n            }\n        }\n        return out;\n    };\n}\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return _mapWithIndex(fa, function (_, a) { return f(a); }); };\nvar _filter = function (fa, p) {\n    return _filterWithIndex(fa, function (_, a) { return p(a); });\n};\nvar _filterMap = function (fa, f) { return _filterMapWithIndex(fa, function (_, a) { return f(a); }); };\nvar _partition = function (fa, predicate) {\n    return _partitionWithIndex(fa, function (_, a) { return predicate(a); });\n};\nvar _partitionMap = function (fa, f) { return _partitionMapWithIndex(fa, function (_, a) { return f(a); }); };\nvar _filterWithIndex = function (fa, p) { return pipe(fa, filterWithIndex(p)); };\nvar _filterMapWithIndex = function (fa, f) { return pipe(fa, filterMapWithIndex(f)); };\nvar _partitionWithIndex = function (fa, p) { return pipe(fa, partitionWithIndex(p)); };\nvar _partitionMapWithIndex = function (fa, f) {\n    return pipe(fa, partitionMapWithIndex(f));\n};\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * @category Compactable\n * @since 2.0.0\n */\nexport var compact = function (fa) {\n    var m = new Map();\n    var entries = fa.entries();\n    var e;\n    // tslint:disable-next-line: strict-boolean-expressions\n    while (!(e = entries.next()).done) {\n        var _a = e.value, k = _a[0], oa = _a[1];\n        if (_.isSome(oa)) {\n            m.set(k, oa.value);\n        }\n    }\n    return m;\n};\n/**\n * @category Filterable\n * @since 2.0.0\n */\nexport var filter = function (predicate) { return function (fa) { return _filter(fa, predicate); }; };\n/**\n * @category Filterable\n * @since 2.0.0\n */\nexport var filterMap = function (f) { return function (fa) {\n    return _filterMap(fa, f);\n}; };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return _map(fa, f); }; };\n/**\n * @category FunctorWithIndex\n * @since 2.7.1\n */\nexport var mapWithIndex = function (f) { return function (fa) {\n    return _mapWithIndex(fa, f);\n}; };\n/**\n * @category Filterable\n * @since 2.0.0\n */\nexport var partition = function (predicate) { return function (fa) { return _partition(fa, predicate); }; };\n/**\n * @category Filterable\n * @since 2.0.0\n */\nexport var partitionMap = function (f) { return function (fa) { return _partitionMap(fa, f); }; };\n/**\n * @category Compactable\n * @since 2.0.0\n */\nexport var separate = function (fa) {\n    var left = new Map();\n    var right = new Map();\n    var entries = fa.entries();\n    var e;\n    // tslint:disable-next-line: strict-boolean-expressions\n    while (!(e = entries.next()).done) {\n        var _a = e.value, k = _a[0], ei = _a[1];\n        if (_.isLeft(ei)) {\n            left.set(k, ei.left);\n        }\n        else {\n            right.set(k, ei.right);\n        }\n    }\n    return separated(left, right);\n};\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var URI = 'Map';\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E, S) {\n    var unionES = union(E, S);\n    return {\n        concat: function (first, second) { return unionES(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (E, S) { return ({\n    concat: getUnionSemigroup(E, S).concat,\n    empty: new Map()\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (E, S) {\n    var intersectionES = intersection(E, S);\n    return {\n        concat: function (first, second) { return intersectionES(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function (E) { return function () {\n    var differenceE = difference(E);\n    return {\n        concat: function (first, second) { return differenceE(second)(first); }\n    };\n}; };\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getFilterableWithIndex() {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        mapWithIndex: _mapWithIndex,\n        compact: compact,\n        separate: separate,\n        filter: _filter,\n        filterMap: _filterMap,\n        partition: _partition,\n        partitionMap: _partitionMap,\n        partitionMapWithIndex: _partitionMapWithIndex,\n        partitionWithIndex: _partitionWithIndex,\n        filterMapWithIndex: _filterMapWithIndex,\n        filterWithIndex: _filterWithIndex\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getWitherable(O) {\n    var TWI = getTraversableWithIndex(O);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: compact,\n        separate: separate,\n        filter: _filter,\n        filterMap: _filterMap,\n        partition: _partition,\n        partitionMap: _partitionMap,\n        reduce: TWI.reduce,\n        foldMap: TWI.foldMap,\n        reduceRight: TWI.reduceRight,\n        traverse: TWI.traverse,\n        sequence: TWI.sequence,\n        mapWithIndex: _mapWithIndex,\n        reduceWithIndex: TWI.reduceWithIndex,\n        foldMapWithIndex: TWI.foldMapWithIndex,\n        reduceRightWithIndex: TWI.reduceRightWithIndex,\n        traverseWithIndex: TWI.traverseWithIndex,\n        wilt: wiltDefault(TWI, Compactable),\n        wither: witherDefault(TWI, Compactable)\n    };\n}\n/**\n * @since 2.11.0\n */\nexport var reduce = RM.reduce;\n/**\n * @since 2.11.0\n */\nexport var foldMap = RM.foldMap;\n/**\n * @since 2.11.0\n */\nexport var reduceRight = RM.reduceRight;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getFoldable = function (O) {\n    return __assign(__assign({}, RM.getFoldable(O)), { URI: URI });\n};\n/**\n * @since 2.11.0\n */\nexport var reduceWithIndex = RM.reduceWithIndex;\n/**\n * @since 2.11.0\n */\nexport var foldMapWithIndex = RM.foldMapWithIndex;\n/**\n * @since 2.11.0\n */\nexport var reduceRightWithIndex = RM.reduceRightWithIndex;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getFoldableWithIndex = function (O) {\n    return __assign(__assign({}, RM.getFoldableWithIndex(O)), { URI: URI });\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getTraversableWithIndex = function (O) {\n    var FWI = getFoldableWithIndex(O);\n    var keysO = keys(O);\n    var traverseWithIndex = function (F) {\n        return function (ta, f) {\n            var fm = F.of(new Map());\n            var ks = keysO(ta);\n            var len = ks.length;\n            var _loop_1 = function (i) {\n                var key = ks[i];\n                var a = ta.get(key);\n                fm = F.ap(F.map(fm, function (m) { return function (b) { return m.set(key, b); }; }), f(key, a));\n            };\n            for (var i = 0; i < len; i++) {\n                _loop_1(i);\n            }\n            return fm;\n        };\n    };\n    var traverse = function (F) {\n        var traverseWithIndexF = traverseWithIndex(F);\n        return function (ta, f) { return traverseWithIndexF(ta, function (_, a) { return f(a); }); };\n    };\n    var sequence = function (F) {\n        var traverseWithIndexF = traverseWithIndex(F);\n        return function (ta) { return traverseWithIndexF(ta, function (_, a) { return a; }); };\n    };\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        mapWithIndex: _mapWithIndex,\n        reduce: FWI.reduce,\n        foldMap: FWI.foldMap,\n        reduceRight: FWI.reduceRight,\n        reduceWithIndex: FWI.reduceWithIndex,\n        foldMapWithIndex: FWI.foldMapWithIndex,\n        reduceRightWithIndex: FWI.reduceRightWithIndex,\n        traverse: traverse,\n        sequence: sequence,\n        traverseWithIndex: traverseWithIndex\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\nvar copy = function (m) { return new Map(m); };\n/**\n * @since 2.11.0\n */\nexport var union = function (E, M) {\n    var unionEM = RM.union(E, M);\n    return function (second) { return function (first) {\n        if (isEmpty(first)) {\n            return copy(second);\n        }\n        if (isEmpty(second)) {\n            return copy(first);\n        }\n        return unionEM(second)(first);\n    }; };\n};\n/**\n * @since 2.11.0\n */\nexport var intersection = function (E, M) {\n    var intersectionEM = RM.intersection(E, M);\n    return function (second) { return function (first) {\n        if (isEmpty(first) || isEmpty(second)) {\n            return new Map();\n        }\n        return intersectionEM(second)(first);\n    }; };\n};\n/**\n * @since 2.11.0\n */\nexport var difference = function (E) {\n    var differenceE = RM.difference(E);\n    return function (second) { return function (first) {\n        if (isEmpty(first)) {\n            return copy(second);\n        }\n        if (isEmpty(second)) {\n            return copy(first);\n        }\n        return differenceE(second)(first);\n    }; };\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use a `new Map()` instead.\n *\n * @since 2.0.0\n * @deprecated\n */\nexport var empty = new Map();\n/**\n * Use [`upsertAt`](#upsertat) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexport var insertAt = upsertAt;\n/**\n * Use [`Filterable`](#filterable) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var map_ = Filterable;\n","import { ap as ap_ } from './Apply';\nimport * as E from './Either';\nimport { flow, pipe } from './function';\nimport { map as map_ } from './Functor';\nexport function right(F) {\n    return flow(E.right, F.of);\n}\nexport function left(F) {\n    return flow(E.left, F.of);\n}\nexport function rightF(F) {\n    return function (fa) { return F.map(fa, E.right); };\n}\nexport function leftF(F) {\n    return function (fe) { return F.map(fe, E.left); };\n}\nexport function map(F) {\n    return map_(F, E.Functor);\n}\nexport function ap(F) {\n    return ap_(F, E.Apply);\n}\nexport function chain(M) {\n    return function (f) { return function (ma) { return M.chain(ma, function (e) { return (E.isLeft(e) ? M.of(e) : f(e.right)); }); }; };\n}\nexport function alt(M) {\n    return function (second) { return function (first) { return M.chain(first, function (e) { return (E.isLeft(e) ? second() : M.of(e)); }); }; };\n}\nexport function bimap(F) {\n    return function (f, g) { return function (fea) { return F.map(fea, E.bimap(f, g)); }; };\n}\nexport function mapLeft(F) {\n    return function (f) { return function (fea) { return F.map(fea, E.mapLeft(f)); }; };\n}\nexport function altValidation(M, S) {\n    return function (second) { return function (first) {\n        return M.chain(first, E.match(function (e1) {\n            return M.map(second(), E.mapLeft(function (e2) { return S.concat(e1, e2); }));\n        }, right(M)));\n    }; };\n}\nexport function match(F) {\n    return function (onLeft, onRight) { return function (ma) { return F.map(ma, E.match(onLeft, onRight)); }; };\n}\nexport function matchE(M) {\n    return function (onLeft, onRight) { return function (ma) { return M.chain(ma, E.match(onLeft, onRight)); }; };\n}\nexport function getOrElse(M) {\n    return function (onLeft) { return function (ma) { return M.chain(ma, E.match(onLeft, M.of)); }; };\n}\nexport function orElse(M) {\n    return function (onLeft) { return function (ma) { return M.chain(ma, function (e) { return (E.isLeft(e) ? onLeft(e.left) : M.of(e)); }); }; };\n}\nexport function orElseFirst(M) {\n    var orElseM = orElse(M);\n    return function (onLeft) { return orElseM(function (e) { return M.map(onLeft(e), function (eb) { return (E.isLeft(eb) ? eb : E.left(e)); }); }); };\n}\nexport function orLeft(M) {\n    return function (onLeft) { return function (ma) {\n        return M.chain(ma, E.match(function (e) { return M.map(onLeft(e), E.left); }, function (a) { return M.of(E.right(a)); }));\n    }; };\n}\nexport function swap(F) {\n    return function (ma) { return F.map(ma, E.swap); };\n}\nexport function toUnion(F) {\n    return function (fa) { return F.map(fa, E.toUnion); };\n}\n/** @deprecated  */\n/* istanbul ignore next */\nexport function getEitherM(M) {\n    var _ap = ap(M);\n    var _map = map(M);\n    var _chain = chain(M);\n    var _alt = alt(M);\n    var _bimap = bimap(M);\n    var _mapLeft = mapLeft(M);\n    var _fold = matchE(M);\n    var _getOrElse = getOrElse(M);\n    var _orElse = orElse(M);\n    return {\n        map: function (fa, f) { return pipe(fa, _map(f)); },\n        ap: function (fab, fa) { return pipe(fab, _ap(fa)); },\n        of: right(M),\n        chain: function (ma, f) { return pipe(ma, _chain(f)); },\n        alt: function (fa, that) { return pipe(fa, _alt(that)); },\n        bimap: function (fea, f, g) { return pipe(fea, _bimap(f, g)); },\n        mapLeft: function (fea, f) { return pipe(fea, _mapLeft(f)); },\n        fold: function (fa, onLeft, onRight) { return pipe(fa, _fold(onLeft, onRight)); },\n        getOrElse: function (fa, onLeft) { return pipe(fa, _getOrElse(onLeft)); },\n        orElse: function (fa, f) { return pipe(fa, _orElse(f)); },\n        swap: swap(M),\n        rightM: rightF(M),\n        leftM: leftF(M),\n        left: left(M)\n    };\n}\n","/**\n * ```ts\n * interface Task<A> {\n *   (): Promise<A>\n * }\n * ```\n *\n * `Task<A>` represents an asynchronous computation that yields a value of type `A` and **never fails**.\n * If you want to represent an asynchronous computation that may fail, please see `TaskEither`.\n *\n * @since 2.0.0\n */\nimport { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { chainFirstIOK as chainFirstIOK_, chainIOK as chainIOK_, fromIOK as fromIOK_ } from './FromIO';\nimport { identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// natural transformations\n// -------------------------------------------------------------------------------------\n/**\n * @category natural transformations\n * @since 2.0.0\n */\nexport var fromIO = function (ma) { return function () { return Promise.resolve(ma()); }; };\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Creates a task that will complete after a time delay\n *\n * @example\n * import { sequenceT } from 'fp-ts/Apply'\n * import * as T from 'fp-ts/Task'\n *\n * async function test() {\n *   const log: Array<string> = []\n *   const append = (message: string): T.Task<void> =>\n *     T.fromIO(() => {\n *       log.push(message)\n *     })\n *   const fa = append('a')\n *   const fb = append('b')\n *   const fc = T.delay(10)(append('c'))\n *   const fd = append('d')\n *   await sequenceT(T.ApplyPar)(fa, fb, fc, fd)()\n *   assert.deepStrictEqual(log, ['a', 'b', 'd', 'c'])\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.0.0\n */\nexport function delay(millis) {\n    return function (ma) { return function () {\n        return new Promise(function (resolve) {\n            setTimeout(function () {\n                // tslint:disable-next-line: no-floating-promises\n                ma().then(resolve);\n            }, millis);\n        });\n    }; };\n}\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _apPar = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _apSeq = function (fab, fa) {\n    return pipe(fab, chain(function (f) { return pipe(fa, map(f)); }));\n};\nvar _chain = function (ma, f) { return pipe(ma, chain(f)); };\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return function () { return fa().then(f); }; }; };\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nexport var ap = function (fa) { return function (fab) { return function () {\n    return Promise.all([fab(), fa()]).then(function (_a) {\n        var f = _a[0], a = _a[1];\n        return f(a);\n    });\n}; }; };\n/**\n * @category Pointed\n * @since 2.0.0\n */\nexport var of = function (a) { return function () { return Promise.resolve(a); }; };\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nexport var chain = function (f) { return function (ma) { return function () {\n    return ma().then(function (a) { return f(a)(); });\n}; }; };\n/**\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var flatten = \n/*#__PURE__*/\nchain(identity);\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var URI = 'Task';\n/**\n * Monoid returning the first completed task.\n *\n * Note: uses `Promise.race` internally.\n *\n * @example\n * import * as T from 'fp-ts/Task'\n *\n * async function test() {\n *   const S = T.getRaceMonoid<string>()\n *   const fa = T.delay(20)(T.of('a'))\n *   const fb = T.delay(10)(T.of('b'))\n *   assert.deepStrictEqual(await S.concat(fa, fb)(), 'b')\n * }\n *\n * test()\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getRaceMonoid() {\n    return {\n        concat: function (x, y) { return function () { return Promise.race([x(), y()]); }; },\n        empty: never\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var ApplyPar = {\n    URI: URI,\n    map: _map,\n    ap: _apPar\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apFirst = \n/*#__PURE__*/\napFirst_(ApplyPar);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apSecond = \n/*#__PURE__*/\napSecond_(ApplyPar);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var ApplicativePar = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var ApplySeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var ApplicativeSeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: _chain\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: _chain\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadIO = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: _chain,\n    fromIO: fromIO\n};\n/**\n * @category FromTask\n * @since 2.7.0\n * @deprecated\n */\nexport var fromTask = identity;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadTask = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: _chain,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chainFirst = \n/*#__PURE__*/\nchainFirst_(Chain);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: fromIO\n};\n/**\n * @category combinators\n * @since 2.4.0\n */\nexport var fromIOK = \n/*#__PURE__*/\nfromIOK_(FromIO);\n/**\n * @category combinators\n * @since 2.4.0\n */\nexport var chainIOK = \n/*#__PURE__*/\nchainIOK_(FromIO, Chain);\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var chainFirstIOK = \n/*#__PURE__*/\nchainFirstIOK_(FromIO, Chain);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromTask = {\n    URI: URI,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * A `Task` that never completes.\n *\n * @since 2.0.0\n */\nexport var never = function () { return new Promise(function (_) { return undefined; }); };\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var Do = \n/*#__PURE__*/\nof(_.emptyRecord);\n/**\n * @since 2.8.0\n */\nexport var bindTo = \n/*#__PURE__*/\nbindTo_(Functor);\n/**\n * @since 2.8.0\n */\nexport var bind = \n/*#__PURE__*/\nbind_(Chain);\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apS = \n/*#__PURE__*/\napS_(ApplyPar);\n// -------------------------------------------------------------------------------------\n// sequence T\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var ApT = of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) { return function (as) { return function () { return Promise.all(as.map(function (a, i) { return f(i, a)(); })); }; }; };\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndexSeq = function (f) { return function (as) { return function () {\n    return _.tail(as).reduce(function (acc, a, i) {\n        return acc.then(function (bs) {\n            return f(i + 1, a)().then(function (b) {\n                bs.push(b);\n                return bs;\n            });\n        });\n    }, f(0, _.head(as))().then(_.singleton));\n}; }; };\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndexSeq = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndexSeq(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * @since 2.9.0\n */\nexport var traverseArray = function (f) {\n    return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); });\n};\n/**\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/\ntraverseArray(identity);\n/**\n * @since 2.9.0\n */\nexport var traverseSeqArrayWithIndex = traverseReadonlyArrayWithIndexSeq;\n/**\n * @since 2.9.0\n */\nexport var traverseSeqArray = function (f) {\n    return traverseReadonlyArrayWithIndexSeq(function (_, a) { return f(a); });\n};\n/**\n * @since 2.9.0\n */\nexport var sequenceSeqArray = \n/*#__PURE__*/\ntraverseSeqArray(identity);\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n// tslint:disable: deprecation\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var task = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: _chain,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var taskSeq = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _apSeq,\n    chain: _chain,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getSemigroup = \n/*#__PURE__*/\ngetApplySemigroup_(ApplySeq);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * Lift a monoid into 'Task', the inner values are concatenated using the provided `Monoid`.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getMonoid = \n/*#__PURE__*/\ngetApplicativeMonoid(ApplicativeSeq);\n","import { getApplicativeMonoid } from './Applicative';\nimport { ap as ap_, apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { compact as compact_, separate as separate_ } from './Compactable';\nimport * as E from './Either';\nimport * as ET from './EitherT';\nimport { filter as filter_, filterMap as filterMap_, partition as partition_, partitionMap as partitionMap_ } from './Filterable';\nimport { chainEitherK as chainEitherK_, chainOptionK as chainOptionK_, filterOrElse as filterOrElse_, fromEitherK as fromEitherK_, fromOption as fromOption_, fromOptionK as fromOptionK_, fromPredicate as fromPredicate_ } from './FromEither';\nimport { chainFirstIOK as chainFirstIOK_, chainIOK as chainIOK_, fromIOK as fromIOK_ } from './FromIO';\nimport { chainFirstTaskK as chainFirstTaskK_, chainTaskK as chainTaskK_, fromTaskK as fromTaskK_ } from './FromTask';\nimport { flow, identity, pipe, SK } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as T from './Task';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var left = \n/*#__PURE__*/\nET.left(T.Pointed);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var right = \n/*#__PURE__*/\nET.right(T.Pointed);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var rightTask = \n/*#__PURE__*/\nET.rightF(T.Functor);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var leftTask = \n/*#__PURE__*/\nET.leftF(T.Functor);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var rightIO = \n/*#__PURE__*/\nflow(T.fromIO, rightTask);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var leftIO = \n/*#__PURE__*/\nflow(T.fromIO, leftTask);\n// -------------------------------------------------------------------------------------\n// natural transformations\n// -------------------------------------------------------------------------------------\n/**\n * @category natural transformations\n * @since 2.7.0\n */\nexport var fromIO = rightIO;\n/**\n * @category natural transformations\n * @since 2.7.0\n */\nexport var fromTask = rightTask;\n/**\n * @category natural transformations\n * @since 2.0.0\n */\nexport var fromEither = T.of;\n/**\n * @category natural transformations\n * @since 2.0.0\n */\nexport var fromIOEither = T.fromIO;\n/**\n * @category natural transformations\n * @since 2.11.0\n */\nexport var fromTaskOption = function (onNone) {\n    return T.map(E.fromOption(onNone));\n};\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * @category destructors\n * @since 2.10.0\n */\nexport var match = \n/*#__PURE__*/\nET.match(T.Functor);\n/**\n * Less strict version of [`match`](#match).\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var matchW = match;\n/**\n * @category destructors\n * @since 2.10.0\n */\nexport var matchE = \n/*#__PURE__*/\nET.matchE(T.Monad);\n/**\n * Alias of [`matchE`](#matche).\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var fold = matchE;\n/**\n * Less strict version of [`matchE`](#matche).\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var matchEW = matchE;\n/**\n * Alias of [`matchEW`](#matchew).\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var foldW = matchEW;\n/**\n * @category destructors\n * @since 2.0.0\n */\nexport var getOrElse = \n/*#__PURE__*/\nET.getOrElse(T.Monad);\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * @category destructors\n * @since 2.6.0\n */\nexport var getOrElseW = getOrElse;\n// -------------------------------------------------------------------------------------\n// interop\n// -------------------------------------------------------------------------------------\n/**\n * Transforms a `Promise` that may reject to a `Promise` that never rejects and returns an `Either` instead.\n *\n * Note: `f` should never `throw` errors, they are not caught.\n *\n * See also [`tryCatchK`](#trycatchk).\n *\n * @example\n * import { left, right } from 'fp-ts/Either'\n * import { tryCatch } from 'fp-ts/TaskEither'\n *\n * tryCatch(() => Promise.resolve(1), String)().then(result => {\n *   assert.deepStrictEqual(result, right(1))\n * })\n * tryCatch(() => Promise.reject('error'), String)().then(result => {\n *   assert.deepStrictEqual(result, left('error'))\n * })\n *\n * @category interop\n * @since 2.0.0\n */\nexport var tryCatch = function (f, onRejected) { return function () {\n    return f().then(_.right, function (reason) { return _.left(onRejected(reason)); });\n}; };\n/**\n * Converts a function returning a `Promise` to one returning a `TaskEither`.\n *\n * @category interop\n * @since 2.5.0\n */\nexport var tryCatchK = function (f, onRejected) { return function () {\n    var a = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        a[_i] = arguments[_i];\n    }\n    return tryCatch(function () { return f.apply(void 0, a); }, onRejected);\n}; };\n/**\n * @category interop\n * @since 2.10.0\n */\nexport var toUnion = \n/*#__PURE__*/\nET.toUnion(T.Functor);\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Returns `ma` if is a `Right` or the value returned by `onLeft` otherwise.\n *\n * See also [alt](#alt).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as TE from 'fp-ts/TaskEither'\n *\n * async function test() {\n *   const errorHandler = TE.orElse((error: string) => TE.right(`recovering from ${error}...`))\n *   assert.deepStrictEqual(await pipe(TE.right('ok'), errorHandler)(), E.right('ok'))\n *   assert.deepStrictEqual(await pipe(TE.left('ko'), errorHandler)(), E.right('recovering from ko...'))\n * }\n *\n * test()\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var orElse = \n/*#__PURE__*/\nET.orElse(T.Monad);\n/**\n * Less strict version of [`orElse`](#orelse).\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var orElseW = orElse;\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var orElseFirst = \n/*#__PURE__*/\nET.orElseFirst(T.Monad);\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var orElseFirstW = orElseFirst;\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var orLeft = \n/*#__PURE__*/\nET.orLeft(T.Monad);\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var swap = \n/*#__PURE__*/\nET.swap(T.Functor);\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var fromTaskOptionK = function (onNone) {\n    var from = fromTaskOption(onNone);\n    return function (f) { return flow(f, from); };\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var chainTaskOptionK = function (onNone) {\n    return flow(fromTaskOptionK(onNone), chain);\n};\n/**\n * @category combinators\n * @since 2.4.0\n */\nexport var fromIOEitherK = function (f) { return flow(f, fromIOEither); };\n/**\n * Less strict version of [`chainIOEitherK`](#chainioeitherk).\n *\n * @category combinators\n * @since 2.6.1\n */\nexport var chainIOEitherKW = function (f) { return chainW(fromIOEitherK(f)); };\n/**\n * @category combinators\n * @since 2.4.0\n */\nexport var chainIOEitherK = chainIOEitherKW;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _apPar = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _apSeq = function (fab, fa) {\n    return pipe(fab, chain(function (f) { return pipe(fa, map(f)); }));\n};\n/* istanbul ignore next */\nvar _chain = function (ma, f) { return pipe(ma, chain(f)); };\n/* istanbul ignore next */\nvar _bimap = function (fa, f, g) { return pipe(fa, bimap(f, g)); };\n/* istanbul ignore next */\nvar _mapLeft = function (fa, f) { return pipe(fa, mapLeft(f)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nexport var map = \n/*#__PURE__*/\nET.map(T.Functor);\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nexport var bimap = \n/*#__PURE__*/\nET.bimap(T.Functor);\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nexport var mapLeft = \n/*#__PURE__*/\nET.mapLeft(T.Functor);\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nexport var ap = \n/*#__PURE__*/\nET.ap(T.ApplyPar);\n/**\n * Less strict version of [`ap`](#ap).\n *\n * @category Apply\n * @since 2.8.0\n */\nexport var apW = ap;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nexport var chain = \n/*#__PURE__*/\nET.chain(T.Monad);\n/**\n * Less strict version of [`chain`](#chain).\n *\n * @category Monad\n * @since 2.6.0\n */\nexport var chainW = chain;\n/**\n * Less strict version of [`flatten`](#flatten).\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var flattenW = \n/*#__PURE__*/\nchainW(identity);\n/**\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var flatten = flattenW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `TaskEither` returns `fa` if is a `Right` or the value returned by `that` otherwise.\n *\n * See also [orElse](#orelse).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import * as TE from 'fp-ts/TaskEither'\n *\n * async function test() {\n *   assert.deepStrictEqual(\n *     await pipe(\n *       TE.right(1),\n *       TE.alt(() => TE.right(2))\n *     )(),\n *     E.right(1)\n *   )\n *   assert.deepStrictEqual(\n *     await pipe(\n *       TE.left('a'),\n *       TE.alt(() => TE.right(2))\n *     )(),\n *     E.right(2)\n *   )\n *   assert.deepStrictEqual(\n *     await pipe(\n *       TE.left('a'),\n *       TE.alt(() => TE.left('b'))\n *     )(),\n *     E.left('b')\n *   )\n * }\n *\n * test()\n *\n * @category Alt\n * @since 2.0.0\n */\nexport var alt = \n/*#__PURE__*/\nET.alt(T.Monad);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nexport var altW = alt;\n/**\n * @category Pointed\n * @since 2.0.0\n */\nexport var of = right;\n/**\n * @category MonadTask\n * @since 2.7.0\n */\nexport var throwError = left;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var URI = 'TaskEither';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport function getApplicativeTaskValidation(A, S) {\n    var ap = ap_(A, E.getApplicativeValidation(S));\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: function (fab, fa) { return pipe(fab, ap(fa)); },\n        of: of\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport function getAltTaskValidation(S) {\n    var alt = ET.altValidation(T.Monad, S);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        alt: function (fa, that) { return pipe(fa, alt(that)); }\n    };\n}\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getCompactable = function (M) {\n    var C = E.getCompactable(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        compact: compact_(T.Functor, C),\n        separate: separate_(T.Functor, C, E.Functor)\n    };\n};\n/**\n * @category instances\n * @since 2.1.0\n */\nexport function getFilterable(M) {\n    var F = E.getFilterable(M);\n    var C = getCompactable(M);\n    var filter = filter_(T.Functor, F);\n    var filterMap = filterMap_(T.Functor, F);\n    var partition = partition_(T.Functor, F);\n    var partitionMap = partitionMap_(T.Functor, F);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: C.compact,\n        separate: C.separate,\n        filter: function (fa, predicate) { return pipe(fa, filter(predicate)); },\n        filterMap: function (fa, f) { return pipe(fa, filterMap(f)); },\n        partition: function (fa, predicate) { return pipe(fa, partition(predicate)); },\n        partitionMap: function (fa, f) { return pipe(fa, partitionMap(f)); }\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var ApplyPar = {\n    URI: URI,\n    map: _map,\n    ap: _apPar\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apFirst = \n/*#__PURE__*/\napFirst_(ApplyPar);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apSecond = \n/*#__PURE__*/\napSecond_(ApplyPar);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var ApplicativePar = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var ApplySeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var ApplicativeSeq = {\n    URI: URI,\n    map: _map,\n    ap: _apSeq,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: _chain\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: _chain,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadIO = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: _chain,\n    of: of,\n    fromIO: fromIO\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadTask = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: _chain,\n    of: of,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: _map,\n    ap: _apPar,\n    chain: _chain,\n    of: of,\n    throwError: throwError\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chainFirst = \n/*#__PURE__*/\nchainFirst_(Chain);\n/**\n * Less strict version of [`chainFirst`](#chainfirst).\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.8.0\n */\nexport var chainFirstW = chainFirst;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category natural transformations\n * @since 2.0.0\n */\nexport var fromOption = \n/*#__PURE__*/\nfromOption_(FromEither);\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var fromOptionK = \n/*#__PURE__*/\nfromOptionK_(FromEither);\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var chainOptionK = \n/*#__PURE__*/\nchainOptionK_(FromEither, Chain);\n/**\n * @category combinators\n * @since 2.4.0\n */\nexport var chainEitherK = \n/*#__PURE__*/\nchainEitherK_(FromEither, Chain);\n/**\n * Less strict version of [`chainEitherK`](#chaineitherk).\n *\n * @category combinators\n * @since 2.6.1\n */\nexport var chainEitherKW = chainEitherK;\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var fromPredicate = \n/*#__PURE__*/\nfromPredicate_(FromEither);\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var filterOrElse = \n/*#__PURE__*/\nfilterOrElse_(FromEither, Chain);\n/**\n * Less strict version of [`filterOrElse`](#filterorelse).\n *\n * @category combinators\n * @since 2.9.0\n */\nexport var filterOrElseW = filterOrElse;\n/**\n * @category combinators\n * @since 2.4.0\n */\nexport var fromEitherK = \n/*#__PURE__*/\nfromEitherK_(FromEither);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromIO = {\n    URI: URI,\n    fromIO: fromIO\n};\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var fromIOK = \n/*#__PURE__*/\nfromIOK_(FromIO);\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var chainIOK = \n/*#__PURE__*/\nchainIOK_(FromIO, Chain);\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var chainFirstIOK = \n/*#__PURE__*/\nchainFirstIOK_(FromIO, Chain);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromTask = {\n    URI: URI,\n    fromIO: fromIO,\n    fromTask: fromTask\n};\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var fromTaskK = \n/*#__PURE__*/\nfromTaskK_(FromTask);\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var chainTaskK = \n/*#__PURE__*/\nchainTaskK_(FromTask, Chain);\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var chainFirstTaskK = \n/*#__PURE__*/\nchainFirstTaskK_(FromTask, Chain);\nexport function taskify(f) {\n    return function () {\n        var args = Array.prototype.slice.call(arguments);\n        return function () {\n            return new Promise(function (resolve) {\n                var cbResolver = function (e, r) { return (e != null ? resolve(_.left(e)) : resolve(_.right(r))); };\n                f.apply(null, args.concat(cbResolver));\n            });\n        };\n    };\n}\n/**\n * Make sure that a resource is cleaned up in the event of an exception (\\*). The release action is called regardless of\n * whether the body action throws (\\*) or returns.\n *\n * (\\*) i.e. returns a `Left`\n *\n * @since 2.0.0\n */\nexport var bracket = function (acquire, use, release) {\n    return pipe(acquire, chain(function (a) {\n        return pipe(use(a), T.chain(function (e) {\n            return pipe(release(a, e), chain(function () { return T.of(e); }));\n        }));\n    }));\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var Do = \n/*#__PURE__*/\nof(_.emptyRecord);\n/**\n * @since 2.8.0\n */\nexport var bindTo = \n/*#__PURE__*/\nbindTo_(Functor);\n/**\n * @since 2.8.0\n */\nexport var bind = \n/*#__PURE__*/\nbind_(Chain);\n/**\n * @since 2.8.0\n */\nexport var bindW = bind;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apS = \n/*#__PURE__*/\napS_(ApplyPar);\n/**\n * @since 2.8.0\n */\nexport var apSW = apS;\n// -------------------------------------------------------------------------------------\n// sequence T\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexport var ApT = of(_.emptyReadonlyArray);\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndex = function (f) {\n    return flow(T.traverseReadonlyNonEmptyArrayWithIndex(f), T.map(E.traverseReadonlyNonEmptyArrayWithIndex(SK)));\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativePar)`.\n *\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndex = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndex(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @since 2.11.0\n */\nexport var traverseReadonlyNonEmptyArrayWithIndexSeq = function (f) { return function (as) { return function () {\n    return _.tail(as).reduce(function (acc, a, i) {\n        return acc.then(function (ebs) {\n            return _.isLeft(ebs)\n                ? acc\n                : f(i + 1, a)().then(function (eb) {\n                    if (_.isLeft(eb)) {\n                        return eb;\n                    }\n                    ebs.right.push(eb.right);\n                    return ebs;\n                });\n        });\n    }, f(0, _.head(as))().then(E.map(_.singleton)));\n}; }; };\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.\n *\n * @since 2.11.0\n */\nexport var traverseReadonlyArrayWithIndexSeq = function (f) {\n    var g = traverseReadonlyNonEmptyArrayWithIndexSeq(f);\n    return function (as) { return (_.isNonEmpty(as) ? g(as) : ApT); };\n};\n/**\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;\n/**\n * @since 2.9.0\n */\nexport var traverseArray = function (f) { return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/\ntraverseArray(identity);\n/**\n * @since 2.9.0\n */\nexport var traverseSeqArrayWithIndex = traverseReadonlyArrayWithIndexSeq;\n/**\n * @since 2.9.0\n */\nexport var traverseSeqArray = function (f) { return traverseReadonlyArrayWithIndexSeq(function (_, a) { return f(a); }); };\n/**\n * @since 2.9.0\n */\nexport var sequenceSeqArray = \n/*#__PURE__*/\ntraverseSeqArray(identity);\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n// tslint:disable: deprecation\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var taskEither = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft,\n    map: _map,\n    of: of,\n    ap: _apPar,\n    chain: _chain,\n    alt: _alt,\n    fromIO: fromIO,\n    fromTask: fromTask,\n    throwError: throwError\n};\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var taskEitherSeq = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft,\n    map: _map,\n    of: of,\n    ap: _apSeq,\n    chain: _chain,\n    alt: _alt,\n    fromIO: fromIO,\n    fromTask: fromTask,\n    throwError: throwError\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplySemigroup = \n/*#__PURE__*/\ngetApplySemigroup_(ApplySeq);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplyMonoid = \n/*#__PURE__*/\ngetApplicativeMonoid(ApplicativeSeq);\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getSemigroup = function (S) {\n    return getApplySemigroup_(T.ApplySeq)(E.getSemigroup(S));\n};\n/**\n * Use [`getApplicativeTaskValidation`](#getapplicativetaskvalidation) and [`getAltTaskValidation`](#getalttaskvalidation) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport function getTaskValidation(SE) {\n    var applicativeTaskValidation = getApplicativeTaskValidation(T.ApplicativePar, SE);\n    var altTaskValidation = getAltTaskValidation(SE);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: applicativeTaskValidation.ap,\n        of: of,\n        chain: _chain,\n        bimap: _bimap,\n        mapLeft: _mapLeft,\n        alt: altTaskValidation.alt,\n        fromIO: fromIO,\n        fromTask: fromTask,\n        throwError: throwError\n    };\n}\n","var __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { fromEquals } from './Eq';\nimport { identity, pipe, SK } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { getMonoid } from './Ord';\nimport * as Se from './Semigroup';\n// -------------------------------------------------------------------------------------\n// internal\n// -------------------------------------------------------------------------------------\n/**\n * @internal\n */\nexport var empty = _.emptyReadonlyArray;\n/**\n * @internal\n */\nexport var isNonEmpty = _.isNonEmpty;\n/**\n * @internal\n */\nexport var isOutOfBound = function (i, as) { return i < 0 || i >= as.length; };\n/**\n * @internal\n */\nexport var prependW = function (head) { return function (tail) { return __spreadArray([head], tail); }; };\n/**\n * @internal\n */\nexport var prepend = prependW;\n/**\n * @internal\n */\nexport var appendW = function (end) { return function (init) { return __spreadArray(__spreadArray([], init), [end]); }; };\n/**\n * @internal\n */\nexport var append = appendW;\n/**\n * @internal\n */\nexport var unsafeInsertAt = function (i, a, as) {\n    if (isNonEmpty(as)) {\n        var xs = _.fromReadonlyNonEmptyArray(as);\n        xs.splice(i, 0, a);\n        return xs;\n    }\n    return [a];\n};\n/**\n * @internal\n */\nexport var unsafeUpdateAt = function (i, a, as) {\n    if (as[i] === a) {\n        return as;\n    }\n    else {\n        var xs = _.fromReadonlyNonEmptyArray(as);\n        xs[i] = a;\n        return xs;\n    }\n};\n/**\n * Remove duplicates from a `ReadonlyNonEmptyArray`, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/ReadonlyNonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var uniq = function (E) { return function (as) {\n    if (as.length === 1) {\n        return as;\n    }\n    var out = [head(as)];\n    var rest = tail(as);\n    var _loop_1 = function (a) {\n        if (out.every(function (o) { return !E.equals(o, a); })) {\n            out.push(a);\n        }\n    };\n    for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {\n        var a = rest_1[_i];\n        _loop_1(a);\n    }\n    return out;\n}; };\n/**\n * Sort the elements of a `ReadonlyNonEmptyArray` in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n *\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n *\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = RNEA.sortBy([byName, byAge])\n *\n * const persons: RNEA.ReadonlyNonEmptyArray<Person> = [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 },\n *   { name: 'b', age: 2 }\n * ]\n *\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var sortBy = function (ords) {\n    if (isNonEmpty(ords)) {\n        var M = getMonoid();\n        return sort(ords.reduce(M.concat, M.empty));\n    }\n    return identity;\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var union = function (E) {\n    var uniqE = uniq(E);\n    return function (second) { return function (first) { return uniqE(pipe(first, concat(second))); }; };\n};\n/**\n * Rotate a `ReadonlyNonEmptyArray` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n * assert.deepStrictEqual(rotate(-2)([1, 2, 3, 4, 5]), [3, 4, 5, 1, 2])\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var rotate = function (n) { return function (as) {\n    var len = as.length;\n    var m = Math.round(n) % len;\n    if (isOutOfBound(Math.abs(m), as) || m === 0) {\n        return as;\n    }\n    if (m < 0) {\n        var _a = splitAt(-m)(as), f = _a[0], s = _a[1];\n        return pipe(s, concat(f));\n    }\n    else {\n        return rotate(m - len)(as);\n    }\n}; };\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Return a `ReadonlyNonEmptyArray` from a `ReadonlyArray` returning `none` if the input is empty.\n *\n * @category constructors\n * @since 2.5.0\n */\nexport var fromReadonlyArray = function (as) {\n    return isNonEmpty(as) ? _.some(as) : _.none;\n};\n/**\n * Return a `ReadonlyNonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { makeBy } from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(pipe(5, makeBy(double)), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var makeBy = function (f) { return function (n) {\n    var j = Math.max(0, Math.floor(n));\n    var out = [f(0)];\n    for (var i = 1; i < j; i++) {\n        out.push(f(i));\n    }\n    return out;\n}; };\n/**\n * Create a `ReadonlyNonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { replicate } from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(3, replicate('a')), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var replicate = function (a) { return makeBy(function () { return a; }); };\n/**\n * Create a `ReadonlyNonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var range = function (start, end) {\n    return start <= end ? makeBy(function (i) { return start + i; })(end - start + 1) : [start];\n};\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Return the tuple of the `head` and the `tail`.\n *\n * @example\n * import { unprepend } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(unprepend([1, 2, 3, 4]), [1, [2, 3, 4]])\n *\n * @category destructors\n * @since 2.9.0\n */\nexport var unprepend = function (as) { return [head(as), tail(as)]; };\n/**\n * Return the tuple of the `init` and the `last`.\n *\n * @example\n * import { unappend } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(unappend([1, 2, 3, 4]), [[1, 2, 3], 4])\n *\n * @category destructors\n * @since 2.9.0\n */\nexport var unappend = function (as) { return [init(as), last(as)]; };\n// -------------------------------------------------------------------------------------\n// interop\n// -------------------------------------------------------------------------------------\n/**\n * @category interop\n * @since 2.5.0\n */\nexport var fromArray = function (as) { return fromReadonlyArray(as.slice()); };\nexport function concatW(second) {\n    return function (first) { return first.concat(second); };\n}\nexport function concat(x, y) {\n    return y ? x.concat(y) : function (y) { return y.concat(x); };\n}\n/**\n * @category combinators\n * @since 2.5.0\n */\nexport var reverse = function (as) {\n    return as.length === 1 ? as : __spreadArray([last(as)], as.slice(0, -1).reverse());\n};\nexport function group(E) {\n    return function (as) {\n        var len = as.length;\n        if (len === 0) {\n            return empty;\n        }\n        var out = [];\n        var head = as[0];\n        var nea = [head];\n        for (var i = 1; i < len; i++) {\n            var a = as[i];\n            if (E.equals(a, head)) {\n                nea.push(a);\n            }\n            else {\n                out.push(nea);\n                head = a;\n                nea = [head];\n            }\n        }\n        out.push(nea);\n        return out;\n    };\n}\n/**\n * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { groupBy } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['a', 'b', 'ab']), {\n *   '1': ['a', 'b'],\n *   '2': ['ab']\n * })\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var groupBy = function (f) { return function (as) {\n    var out = {};\n    for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n        var a = as_1[_i];\n        var k = f(a);\n        if (out.hasOwnProperty(k)) {\n            out[k].push(a);\n        }\n        else {\n            out[k] = [a];\n        }\n    }\n    return out;\n}; };\n/**\n * @category combinators\n * @since 2.5.0\n */\nexport var sort = function (O) { return function (as) {\n    return as.length === 1 ? as : as.slice().sort(O.compare);\n}; };\n/**\n * @category combinators\n * @since 2.5.0\n */\nexport var updateAt = function (i, a) {\n    return modifyAt(i, function () { return a; });\n};\n/**\n * @category combinators\n * @since 2.5.0\n */\nexport var modifyAt = function (i, f) { return function (as) { return (isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as))); }; };\n/**\n * @category combinators\n * @since 2.5.1\n */\nexport var zipWith = function (as, bs, f) {\n    var cs = [f(as[0], bs[0])];\n    var len = Math.min(as.length, bs.length);\n    for (var i = 1; i < len; i++) {\n        cs[i] = f(as[i], bs[i]);\n    }\n    return cs;\n};\nexport function zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return zipWith(as, bs, function (a, b) { return [a, b]; });\n}\n/**\n * @category combinators\n * @since 2.5.1\n */\nexport var unzip = function (abs) {\n    var fa = [abs[0][0]];\n    var fb = [abs[0][1]];\n    for (var i = 1; i < abs.length; i++) {\n        fa[i] = abs[i][0];\n        fb[i] = abs[i][1];\n    }\n    return [fa, fb];\n};\n/**\n * Prepend an element to every member of a `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { prependAll } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var prependAll = function (middle) { return function (as) {\n    var out = [middle, as[0]];\n    for (var i = 1; i < as.length; i++) {\n        out.push(middle, as[i]);\n    }\n    return out;\n}; };\n/**\n * Places an element in between members of a `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { intersperse } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.9.0\n */\nexport var intersperse = function (middle) { return function (as) {\n    var rest = tail(as);\n    return isNonEmpty(rest) ? pipe(rest, prependAll(middle), prepend(head(as))) : as;\n}; };\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var chainWithIndex = function (f) { return function (as) {\n    var out = _.fromReadonlyNonEmptyArray(f(0, head(as)));\n    for (var i = 1; i < as.length; i++) {\n        out.push.apply(out, f(i, as[i]));\n    }\n    return out;\n}; };\n/**\n * A useful recursion pattern for processing a `ReadonlyNonEmptyArray` to produce a new `ReadonlyNonEmptyArray`, often used for \"chopping\" up the input\n * `ReadonlyNonEmptyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `ReadonlyNonEmptyArray` and produce a\n * value and the tail of the `ReadonlyNonEmptyArray`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var chop = function (f) { return function (as) {\n    var _a = f(as), b = _a[0], rest = _a[1];\n    var out = [b];\n    var next = rest;\n    while (isNonEmpty(next)) {\n        var _b = f(next), b_1 = _b[0], rest_2 = _b[1];\n        out.push(b_1);\n        next = rest_2;\n    }\n    return out;\n}; };\n/**\n * Splits a `ReadonlyNonEmptyArray` into two pieces, the first piece has max `n` elements.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var splitAt = function (n) { return function (as) {\n    var m = Math.max(1, n);\n    return m >= as.length ? [as, empty] : [pipe(as.slice(1, m), prepend(head(as))), as.slice(m)];\n}; };\n/**\n * Splits a `ReadonlyNonEmptyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `ReadonlyNonEmptyArray`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var chunksOf = function (n) { return chop(splitAt(n)); };\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _mapWithIndex = function (fa, f) { return pipe(fa, mapWithIndex(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _chain = function (ma, f) { return pipe(ma, chain(f)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/* istanbul ignore next */\nvar _reduceWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = foldMapWithIndex(M);\n    return function (fa, f) { return pipe(fa, foldMapWithIndexM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceRightWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (ta, f) { return pipe(ta, traverseWithIndexF(f)); };\n};\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * @category Pointed\n * @since 2.5.0\n */\nexport var of = _.singleton;\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nexport var altW = function (that) { return function (as) { return pipe(as, concatW(that())); }; };\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.6.2\n */\nexport var alt = altW;\n/**\n * @category Apply\n * @since 2.5.0\n */\nexport var ap = function (as) { return chain(function (f) { return pipe(as, map(f)); }); };\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.5.0\n */\nexport var chain = function (f) { return chainWithIndex(function (_, a) { return f(a); }); };\n/**\n * @category Extend\n * @since 2.5.0\n */\nexport var extend = function (f) { return function (as) {\n    var next = tail(as);\n    var out = [f(as)];\n    while (isNonEmpty(next)) {\n        out.push(f(next));\n        next = tail(next);\n    }\n    return out;\n}; };\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var duplicate = \n/*#__PURE__*/\nextend(identity);\n/**\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var flatten = \n/*#__PURE__*/\nchain(identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.5.0\n */\nexport var map = function (f) {\n    return mapWithIndex(function (_, a) { return f(a); });\n};\n/**\n * @category FunctorWithIndex\n * @since 2.5.0\n */\nexport var mapWithIndex = function (f) { return function (as) {\n    var out = [f(0, head(as))];\n    for (var i = 1; i < as.length; i++) {\n        out.push(f(i, as[i]));\n    }\n    return out;\n}; };\n/**\n * @category Foldable\n * @since 2.5.0\n */\nexport var reduce = function (b, f) {\n    return reduceWithIndex(b, function (_, b, a) { return f(b, a); });\n};\n/**\n * **Note**. The constraint is relaxed: a `Semigroup` instead of a `Monoid`.\n *\n * @category Foldable\n * @since 2.5.0\n */\nexport var foldMap = function (S) { return function (f) { return function (as) {\n    return as.slice(1).reduce(function (s, a) { return S.concat(s, f(a)); }, f(as[0]));\n}; }; };\n/**\n * @category Foldable\n * @since 2.5.0\n */\nexport var reduceRight = function (b, f) {\n    return reduceRightWithIndex(b, function (_, b, a) { return f(b, a); });\n};\n/**\n * @category FoldableWithIndex\n * @since 2.5.0\n */\nexport var reduceWithIndex = function (b, f) { return function (as) {\n    return as.reduce(function (b, a, i) { return f(i, b, a); }, b);\n}; };\n/**\n * **Note**. The constraint is relaxed: a `Semigroup` instead of a `Monoid`.\n *\n * @category FoldableWithIndex\n * @since 2.5.0\n */\nexport var foldMapWithIndex = function (S) { return function (f) { return function (as) { return as.slice(1).reduce(function (s, a, i) { return S.concat(s, f(i + 1, a)); }, f(0, as[0])); }; }; };\n/**\n * @category FoldableWithIndex\n * @since 2.5.0\n */\nexport var reduceRightWithIndex = function (b, f) { return function (as) { return as.reduceRight(function (b, a, i) { return f(i, a, b); }, b); }; };\n/**\n * @category Traversable\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\n/**\n * @category Traversable\n * @since 2.6.3\n */\nexport var sequence = function (F) { return traverseWithIndex(F)(SK); };\n/**\n * @category TraversableWithIndex\n * @since 2.6.3\n */\nexport var traverseWithIndex = function (F) { return function (f) { return function (as) {\n    var out = F.map(f(0, head(as)), of);\n    for (var i = 1; i < as.length; i++) {\n        out = F.ap(F.map(out, function (bs) { return function (b) { return pipe(bs, append(b)); }; }), f(i, as[i]));\n    }\n    return out;\n}; }; };\n/**\n * @category Comonad\n * @since 2.6.3\n */\nexport var extract = _.head;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.5.0\n */\nexport var URI = 'ReadonlyNonEmptyArray';\n/**\n * @category instances\n * @since 2.5.0\n */\nexport var getShow = function (S) { return ({\n    show: function (as) { return \"[\" + as.map(S.show).join(', ') + \"]\"; }\n}); };\n/**\n * Builds a `Semigroup` instance for `ReadonlyNonEmptyArray`\n *\n * @category instances\n * @since 2.5.0\n */\nexport var getSemigroup = function () { return ({\n    concat: concat\n}); };\n/**\n * @example\n * import { getEq } from 'fp-ts/ReadonlyNonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * const E = getEq(N.Eq)\n * assert.strictEqual(E.equals([1, 2], [1, 2]), true)\n * assert.strictEqual(E.equals([1, 2], [1, 3]), false)\n *\n * @category instances\n * @since 2.5.0\n */\nexport var getEq = function (E) {\n    return fromEquals(function (xs, ys) { return xs.length === ys.length && xs.every(function (x, i) { return E.equals(x, ys[i]); }); });\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E) {\n    var unionE = union(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var apFirst = \n/*#__PURE__*/\napFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var apSecond = \n/*#__PURE__*/\napSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var chainFirst = \n/*#__PURE__*/\nchainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Comonad = {\n    URI: URI,\n    map: _map,\n    extend: _extend,\n    extract: extract\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var Do = \n/*#__PURE__*/\nof(_.emptyRecord);\n/**\n * @since 2.8.0\n */\nexport var bindTo = \n/*#__PURE__*/\nbindTo_(Functor);\n/**\n * @since 2.8.0\n */\nexport var bind = \n/*#__PURE__*/\nbind_(Chain);\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apS = \n/*#__PURE__*/\napS_(Apply);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.5.0\n */\nexport var head = extract;\n/**\n * @since 2.5.0\n */\nexport var tail = _.tail;\n/**\n * @since 2.5.0\n */\nexport var last = function (as) { return as[as.length - 1]; };\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { init } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])\n * assert.deepStrictEqual(init([1]), [])\n *\n * @since 2.5.0\n */\nexport var init = function (as) { return as.slice(0, -1); };\n/**\n * @since 2.5.0\n */\nexport var min = function (O) {\n    var S = Se.min(O);\n    return function (as) { return as.reduce(S.concat); };\n};\n/**\n * @since 2.5.0\n */\nexport var max = function (O) {\n    var S = Se.max(O);\n    return function (as) { return as.reduce(S.concat); };\n};\n/**\n * @since 2.10.0\n */\nexport var concatAll = function (S) { return function (as) { return as.reduce(S.concat); }; };\n/**\n * Break a `ReadonlyArray` into its first element and remaining elements.\n *\n * @category destructors\n * @since 2.11.0\n */\nexport var matchLeft = function (f) { return function (as) {\n    return f(head(as), tail(as));\n}; };\n/**\n * Break a `ReadonlyArray` into its initial elements and the last element.\n *\n * @category destructors\n * @since 2.11.0\n */\nexport var matchRight = function (f) { return function (as) {\n    return f(init(as), last(as));\n}; };\n/**\n * Apply a function to the head, creating a new `ReadonlyNonEmptyArray`.\n *\n * @since 2.11.0\n */\nexport var modifyHead = function (f) { return function (as) { return __spreadArray([\n    f(head(as))\n], tail(as)); }; };\n/**\n * Change the head, creating a new `ReadonlyNonEmptyArray`.\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var updateHead = function (a) { return modifyHead(function () { return a; }); };\n/**\n * Apply a function to the last element, creating a new `ReadonlyNonEmptyArray`.\n *\n * @since 2.11.0\n */\nexport var modifyLast = function (f) { return function (as) {\n    return pipe(init(as), append(f(last(as))));\n}; };\n/**\n * Change the last element, creating a new `ReadonlyNonEmptyArray`.\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var updateLast = function (a) { return modifyLast(function () { return a; }); };\nexport function groupSort(O) {\n    var sortO = sort(O);\n    var groupO = group(O);\n    return function (as) { return (isNonEmpty(as) ? groupO(sortO(as)) : empty); };\n}\nexport function filter(predicate) {\n    return filterWithIndex(function (_, a) { return predicate(a); });\n}\n/**\n * Use [`filterWithIndex`](./ReadonlyArray.ts.html#filterwithindex) instead.\n *\n * @category combinators\n * @since 2.5.0\n * @deprecated\n */\nexport var filterWithIndex = function (predicate) { return function (as) { return fromReadonlyArray(as.filter(function (a, i) { return predicate(i, a); })); }; };\n/**\n * Use [`unprepend`](#unprepend) instead.\n *\n * @category destructors\n * @since 2.10.0\n * @deprecated\n */\nexport var uncons = unprepend;\n/**\n * Use [`unappend`](#unappend) instead.\n *\n * @category destructors\n * @since 2.10.0\n * @deprecated\n */\nexport var unsnoc = unappend;\nexport function cons(head, tail) {\n    return tail === undefined ? prepend(head) : pipe(tail, prepend(head));\n}\n/**\n * Use [`append`](./ReadonlyArray.ts.html#append) instead.\n *\n * @category constructors\n * @since 2.5.0\n * @deprecated\n */\nexport var snoc = function (init, end) { return pipe(init, concat([end])); };\n/**\n * Use [`insertAt`](./ReadonlyArray.ts.html#insertat) instead.\n *\n * @category combinators\n * @since 2.5.0\n * @deprecated\n */\nexport var insertAt = function (i, a) { return function (as) {\n    return i < 0 || i > as.length ? _.none : _.some(unsafeInsertAt(i, a, as));\n}; };\n/**\n * Use [`prependAll`](#prependall) instead.\n *\n * @category combinators\n * @since 2.9.0\n * @deprecated\n */\nexport var prependToAll = prependAll;\n/**\n * Use [`concatAll`](#concatall) instead.\n *\n * @since 2.5.0\n * @deprecated\n */\nexport var fold = concatAll;\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.5.0\n * @deprecated\n */\nexport var readonlyNonEmptyArray = {\n    URI: URI,\n    of: of,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    ap: _ap,\n    chain: _chain,\n    extend: _extend,\n    extract: extract,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    alt: _alt\n};\n","import { isNonEmpty } from './ReadonlyNonEmptyArray';\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Eq.equals('a', 'a'), true)\n * assert.deepStrictEqual(S.Eq.equals('a', 'b'), false)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var Eq = {\n    equals: function (first, second) { return first === second; }\n};\n/**\n * `string` semigroup under concatenation.\n *\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Semigroup.concat('a', 'b'), 'ab')\n *\n * @category instances\n * @since 2.10.0\n */\nexport var Semigroup = {\n    concat: function (first, second) { return first + second; }\n};\n/**\n * `string` monoid under concatenation.\n *\n * The `empty` value is `''`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Monoid.concat('a', 'b'), 'ab')\n * assert.deepStrictEqual(S.Monoid.concat('a', S.Monoid.empty), 'a')\n *\n * @category instances\n * @since 2.10.0\n */\nexport var Monoid = {\n    concat: Semigroup.concat,\n    empty: ''\n};\n/**\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Ord.compare('a', 'a'), 0)\n * assert.deepStrictEqual(S.Ord.compare('a', 'b'), -1)\n * assert.deepStrictEqual(S.Ord.compare('b', 'a'), 1)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var Ord = {\n    equals: Eq.equals,\n    compare: function (first, second) { return (first < second ? -1 : first > second ? 1 : 0); }\n};\n/**\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Show.show('a'), '\"a\"')\n *\n * @category instances\n * @since 2.10.0\n */\nexport var Show = {\n    show: function (s) { return JSON.stringify(s); }\n};\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.isString('a'), true)\n * assert.deepStrictEqual(S.isString(1), false)\n *\n * @category refinements\n * @since 2.11.0\n */\nexport var isString = function (u) { return typeof u === 'string'; };\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('a', S.toUpperCase), 'A')\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var toUpperCase = function (s) { return s.toUpperCase(); };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('A', S.toLowerCase), 'a')\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var toLowerCase = function (s) { return s.toLowerCase(); };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.replace('b', 'd')), 'adc')\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var replace = function (searchValue, replaceValue) { return function (s) {\n    return s.replace(searchValue, replaceValue);\n}; };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(' a ', S.trim), 'a')\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var trim = function (s) { return s.trim(); };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(' a ', S.trimLeft), 'a ')\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var trimLeft = function (s) { return s.trimLeft(); };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(' a ', S.trimRight), ' a')\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var trimRight = function (s) { return s.trimRight(); };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abcd', S.slice(1, 3)), 'bc')\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var slice = function (start, end) { return function (s) { return s.slice(start, end); }; };\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * An empty `string`.\n *\n * @since 2.10.0\n */\nexport var empty = '';\n/**\n * Test whether a `string` is empty.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('', S.isEmpty), true)\n * assert.deepStrictEqual(pipe('a', S.isEmpty), false)\n *\n * @since 2.10.0\n */\nexport var isEmpty = function (s) { return s.length === 0; };\n/**\n * Calculate the number of characters in a `string`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.size), 3)\n *\n * @since 2.10.0\n */\nexport var size = function (s) { return s.length; };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.split('')), ['a', 'b', 'c'])\n * assert.deepStrictEqual(pipe('', S.split('')), [''])\n *\n * @since 2.11.0\n */\nexport var split = function (separator) { return function (s) {\n    var out = s.split(separator);\n    return isNonEmpty(out) ? out : [s];\n}; };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.includes('b')), true)\n * assert.deepStrictEqual(pipe('abc', S.includes('d')), false)\n *\n * @since 2.11.0\n */\nexport var includes = function (searchString, position) { return function (s) {\n    return s.includes(searchString, position);\n}; };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.startsWith('a')), true)\n * assert.deepStrictEqual(pipe('bc', S.startsWith('a')), false)\n *\n * @since 2.11.0\n */\nexport var startsWith = function (searchString, position) { return function (s) {\n    return s.startsWith(searchString, position);\n}; };\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.endsWith('c')), true)\n * assert.deepStrictEqual(pipe('ab', S.endsWith('c')), false)\n *\n * @since 2.11.0\n */\nexport var endsWith = function (searchString, position) { return function (s) {\n    return s.endsWith(searchString, position);\n}; };\n","import { identity, pipe as pipeFromFunctionModule } from './function';\nvar isFunctor = function (I) { return typeof I.map === 'function'; };\nvar isContravariant = function (I) { return typeof I.contramap === 'function'; };\nvar isFunctorWithIndex = function (I) { return typeof I.mapWithIndex === 'function'; };\nvar isApply = function (I) { return typeof I.ap === 'function'; };\nvar isChain = function (I) { return typeof I.chain === 'function'; };\nvar isBifunctor = function (I) { return typeof I.bimap === 'function'; };\nvar isExtend = function (I) { return typeof I.extend === 'function'; };\nvar isFoldable = function (I) { return typeof I.reduce === 'function'; };\nvar isFoldableWithIndex = function (I) { return typeof I.reduceWithIndex === 'function'; };\nvar isAlt = function (I) { return typeof I.alt === 'function'; };\nvar isCompactable = function (I) { return typeof I.compact === 'function'; };\nvar isFilterable = function (I) { return typeof I.filter === 'function'; };\nvar isFilterableWithIndex = function (I) {\n    return typeof I.filterWithIndex === 'function';\n};\nvar isProfunctor = function (I) { return typeof I.promap === 'function'; };\nvar isSemigroupoid = function (I) { return typeof I.compose === 'function'; };\nvar isMonadThrow = function (I) { return typeof I.throwError === 'function'; };\n/** @deprecated */\nexport function pipeable(I) {\n    var r = {};\n    if (isFunctor(I)) {\n        var map = function (f) { return function (fa) { return I.map(fa, f); }; };\n        r.map = map;\n    }\n    if (isContravariant(I)) {\n        var contramap = function (f) { return function (fa) { return I.contramap(fa, f); }; };\n        r.contramap = contramap;\n    }\n    if (isFunctorWithIndex(I)) {\n        var mapWithIndex = function (f) { return function (fa) { return I.mapWithIndex(fa, f); }; };\n        r.mapWithIndex = mapWithIndex;\n    }\n    if (isApply(I)) {\n        var ap = function (fa) { return function (fab) { return I.ap(fab, fa); }; };\n        var apFirst = function (fb) { return function (fa) {\n            return I.ap(I.map(fa, function (a) { return function () { return a; }; }), fb);\n        }; };\n        r.ap = ap;\n        r.apFirst = apFirst;\n        r.apSecond = function (fb) { return function (fa) {\n            return I.ap(I.map(fa, function () { return function (b) { return b; }; }), fb);\n        }; };\n    }\n    if (isChain(I)) {\n        var chain = function (f) { return function (ma) { return I.chain(ma, f); }; };\n        var chainFirst = function (f) { return function (ma) { return I.chain(ma, function (a) { return I.map(f(a), function () { return a; }); }); }; };\n        var flatten = function (mma) { return I.chain(mma, identity); };\n        r.chain = chain;\n        r.chainFirst = chainFirst;\n        r.flatten = flatten;\n    }\n    if (isBifunctor(I)) {\n        var bimap = function (f, g) { return function (fa) { return I.bimap(fa, f, g); }; };\n        var mapLeft = function (f) { return function (fa) { return I.mapLeft(fa, f); }; };\n        r.bimap = bimap;\n        r.mapLeft = mapLeft;\n    }\n    if (isExtend(I)) {\n        var extend = function (f) { return function (wa) { return I.extend(wa, f); }; };\n        var duplicate = function (wa) { return I.extend(wa, identity); };\n        r.extend = extend;\n        r.duplicate = duplicate;\n    }\n    if (isFoldable(I)) {\n        var reduce = function (b, f) { return function (fa) { return I.reduce(fa, b, f); }; };\n        var foldMap = function (M) {\n            var foldMapM = I.foldMap(M);\n            return function (f) { return function (fa) { return foldMapM(fa, f); }; };\n        };\n        var reduceRight = function (b, f) { return function (fa) { return I.reduceRight(fa, b, f); }; };\n        r.reduce = reduce;\n        r.foldMap = foldMap;\n        r.reduceRight = reduceRight;\n    }\n    if (isFoldableWithIndex(I)) {\n        var reduceWithIndex = function (b, f) { return function (fa) {\n            return I.reduceWithIndex(fa, b, f);\n        }; };\n        var foldMapWithIndex = function (M) {\n            var foldMapM = I.foldMapWithIndex(M);\n            return function (f) { return function (fa) { return foldMapM(fa, f); }; };\n        };\n        var reduceRightWithIndex = function (b, f) { return function (fa) {\n            return I.reduceRightWithIndex(fa, b, f);\n        }; };\n        r.reduceWithIndex = reduceWithIndex;\n        r.foldMapWithIndex = foldMapWithIndex;\n        r.reduceRightWithIndex = reduceRightWithIndex;\n    }\n    if (isAlt(I)) {\n        var alt = function (that) { return function (fa) { return I.alt(fa, that); }; };\n        r.alt = alt;\n    }\n    if (isCompactable(I)) {\n        r.compact = I.compact;\n        r.separate = I.separate;\n    }\n    if (isFilterable(I)) {\n        var filter = function (predicate) { return function (fa) {\n            return I.filter(fa, predicate);\n        }; };\n        var filterMap = function (f) { return function (fa) { return I.filterMap(fa, f); }; };\n        var partition = function (predicate) { return function (fa) {\n            return I.partition(fa, predicate);\n        }; };\n        var partitionMap = function (f) { return function (fa) { return I.partitionMap(fa, f); }; };\n        r.filter = filter;\n        r.filterMap = filterMap;\n        r.partition = partition;\n        r.partitionMap = partitionMap;\n    }\n    if (isFilterableWithIndex(I)) {\n        var filterWithIndex = function (predicateWithIndex) { return function (fa) { return I.filterWithIndex(fa, predicateWithIndex); }; };\n        var filterMapWithIndex = function (f) { return function (fa) {\n            return I.filterMapWithIndex(fa, f);\n        }; };\n        var partitionWithIndex = function (predicateWithIndex) { return function (fa) { return I.partitionWithIndex(fa, predicateWithIndex); }; };\n        var partitionMapWithIndex = function (f) { return function (fa) {\n            return I.partitionMapWithIndex(fa, f);\n        }; };\n        r.filterWithIndex = filterWithIndex;\n        r.filterMapWithIndex = filterMapWithIndex;\n        r.partitionWithIndex = partitionWithIndex;\n        r.partitionMapWithIndex = partitionMapWithIndex;\n    }\n    if (isProfunctor(I)) {\n        var promap = function (f, g) { return function (fa) { return I.promap(fa, f, g); }; };\n        r.promap = promap;\n    }\n    if (isSemigroupoid(I)) {\n        var compose = function (that) { return function (fa) { return I.compose(fa, that); }; };\n        r.compose = compose;\n    }\n    if (isMonadThrow(I)) {\n        var fromOption = function (onNone) { return function (ma) {\n            return ma._tag === 'None' ? I.throwError(onNone()) : I.of(ma.value);\n        }; };\n        var fromEither = function (ma) {\n            return ma._tag === 'Left' ? I.throwError(ma.left) : I.of(ma.right);\n        };\n        var fromPredicate = function (predicate, onFalse) { return function (a) { return (predicate(a) ? I.of(a) : I.throwError(onFalse(a))); }; };\n        var filterOrElse = function (predicate, onFalse) { return function (ma) { return I.chain(ma, function (a) { return (predicate(a) ? I.of(a) : I.throwError(onFalse(a))); }); }; };\n        r.fromOption = fromOption;\n        r.fromEither = fromEither;\n        r.fromPredicate = fromPredicate;\n        r.filterOrElse = filterOrElse;\n    }\n    return r;\n}\n/**\n * Use [`pipe`](https://gcanti.github.io/fp-ts/modules/function.ts.html#flow) from `function` module instead.\n *\n * @since 2.0.0\n * @deprecated\n */\nexport var pipe = pipeFromFunctionModule;\n","/**\n * @category constructors\n * @since 2.2.7\n */\nexport var of = function (a) { return ({ _tag: 'Of', value: a }); };\n/**\n * @category constructors\n * @since 2.2.7\n */\nexport var concat = function (left, right) { return ({\n    _tag: 'Concat',\n    left: left,\n    right: right\n}); };\n/**\n * @category destructors\n * @since 2.2.7\n */\nexport var fold = function (onOf, onConcat) { return function (f) {\n    switch (f._tag) {\n        case 'Of':\n            return onOf(f.value);\n        case 'Concat':\n            return onConcat(f.left, f.right);\n    }\n}; };\n/**\n * @category instances\n * @since 2.2.7\n */\nexport function getSemigroup() {\n    return { concat: concat };\n}\n","import * as FS from './FreeSemigroup';\n/**\n * @category model\n * @since 2.2.7\n */\nexport var required = 'required';\n/**\n * @category model\n * @since 2.2.7\n */\nexport var optional = 'optional';\n/**\n * @category constructors\n * @since 2.2.7\n */\nexport var leaf = function (actual, error) { return ({ _tag: 'Leaf', actual: actual, error: error }); };\n/**\n * @category constructors\n * @since 2.2.7\n */\nexport var key = function (key, kind, errors) { return ({\n    _tag: 'Key',\n    key: key,\n    kind: kind,\n    errors: errors\n}); };\n/**\n * @category constructors\n * @since 2.2.7\n */\nexport var index = function (index, kind, errors) { return ({\n    _tag: 'Index',\n    index: index,\n    kind: kind,\n    errors: errors\n}); };\n/**\n * @category constructors\n * @since 2.2.7\n */\nexport var member = function (index, errors) { return ({\n    _tag: 'Member',\n    index: index,\n    errors: errors\n}); };\n/**\n * @category constructors\n * @since 2.2.7\n */\nexport var lazy = function (id, errors) { return ({\n    _tag: 'Lazy',\n    id: id,\n    errors: errors\n}); };\n/**\n * @category constructors\n * @since 2.2.9\n */\nexport var wrap = function (error, errors) { return ({\n    _tag: 'Wrap',\n    error: error,\n    errors: errors\n}); };\n/**\n * @category destructors\n * @since 2.2.7\n */\nexport var fold = function (patterns) {\n    var f = function (e) {\n        switch (e._tag) {\n            case 'Leaf':\n                return patterns.Leaf(e.actual, e.error);\n            case 'Key':\n                return patterns.Key(e.key, e.kind, e.errors);\n            case 'Index':\n                return patterns.Index(e.index, e.kind, e.errors);\n            case 'Member':\n                return patterns.Member(e.index, e.errors);\n            case 'Lazy':\n                return patterns.Lazy(e.id, e.errors);\n            case 'Wrap':\n                return patterns.Wrap(e.error, e.errors);\n        }\n    };\n    return f;\n};\n/**\n * @category instances\n * @since 2.2.7\n */\nexport function getSemigroup() {\n    return FS.getSemigroup();\n}\n","/**\n * **This module is experimental**\n *\n * Experimental features are published in order to get early feedback from the community, see these tracking\n * [issues](https://github.com/gcanti/io-ts/issues?q=label%3Av2.2+) for further discussions and enhancements.\n *\n * A feature tagged as _Experimental_ is in a high state of flux, you're at risk of it changing without notice.\n *\n * @since 2.2.0\n */\nimport { identity } from 'fp-ts/es6/function';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport { memoize } from './Schemable';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.2.0\n */\nexport var literal = function () {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        values[_i] = arguments[_i];\n    }\n    return ({\n        is: function (u) { return values.findIndex(function (a) { return a === u; }) !== -1; }\n    });\n};\n// -------------------------------------------------------------------------------------\n// primitives\n// -------------------------------------------------------------------------------------\n/**\n * @category primitives\n * @since 2.2.0\n */\nexport var string = {\n    is: function (u) { return typeof u === 'string'; }\n};\n/**\n * Note: `NaN` is excluded.\n *\n * @category primitives\n * @since 2.2.0\n */\nexport var number = {\n    is: function (u) { return typeof u === 'number' && !isNaN(u); }\n};\n/**\n * @category primitives\n * @since 2.2.0\n */\nexport var boolean = {\n    is: function (u) { return typeof u === 'boolean'; }\n};\n/**\n * @category primitives\n * @since 2.2.0\n */\nexport var UnknownArray = {\n    is: Array.isArray\n};\n/**\n * @category primitives\n * @since 2.2.0\n */\nexport var UnknownRecord = {\n    is: function (u) { return u !== null && typeof u === 'object' && !Array.isArray(u); }\n};\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.2.0\n */\nexport var refine = function (refinement) { return function (from) { return ({\n    is: function (i) { return from.is(i) && refinement(i); }\n}); }; };\n/**\n * @category combinators\n * @since 2.2.0\n */\nexport var nullable = function (or) { return ({\n    is: function (i) { return i === null || or.is(i); }\n}); };\n/**\n * @category combinators\n * @since 2.2.15\n */\nexport var struct = function (properties) {\n    return pipe(UnknownRecord, refine(function (r) {\n        for (var k in properties) {\n            if (!(k in r) || !properties[k].is(r[k])) {\n                return false;\n            }\n        }\n        return true;\n    }));\n};\n/**\n * Use `struct` instead.\n *\n * @category combinators\n * @since 2.2.0\n * @deprecated\n */\nexport var type = struct;\n/**\n * @category combinators\n * @since 2.2.0\n */\nexport var partial = function (properties) {\n    return pipe(UnknownRecord, refine(function (r) {\n        for (var k in properties) {\n            var v = r[k];\n            if (v !== undefined && !properties[k].is(v)) {\n                return false;\n            }\n        }\n        return true;\n    }));\n};\n/**\n * @category combinators\n * @since 2.2.0\n */\nexport var array = function (item) {\n    return pipe(UnknownArray, refine(function (us) { return us.every(item.is); }));\n};\n/**\n * @category combinators\n * @since 2.2.0\n */\nexport var record = function (codomain) {\n    return pipe(UnknownRecord, refine(function (r) {\n        for (var k in r) {\n            if (!codomain.is(r[k])) {\n                return false;\n            }\n        }\n        return true;\n    }));\n};\n/**\n * @category combinators\n * @since 2.2.0\n */\nexport var tuple = function () {\n    var components = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        components[_i] = arguments[_i];\n    }\n    return ({\n        is: function (u) { return Array.isArray(u) && u.length === components.length && components.every(function (c, i) { return c.is(u[i]); }); }\n    });\n};\n/**\n * @category combinators\n * @since 2.2.0\n */\nexport var intersect = function (right) { return function (left) { return ({\n    is: function (u) { return left.is(u) && right.is(u); }\n}); }; };\n/**\n * @category combinators\n * @since 2.2.0\n */\nexport var union = function () {\n    var members = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        members[_i] = arguments[_i];\n    }\n    return ({\n        is: function (u) { return members.some(function (m) { return m.is(u); }); }\n    });\n};\n/**\n * @category combinators\n * @since 2.2.0\n */\nexport var sum = function (tag) { return function (members) {\n    return pipe(UnknownRecord, refine(function (r) {\n        var v = r[tag];\n        if (v in members) {\n            return members[v].is(r);\n        }\n        return false;\n    }));\n}; };\n/**\n * @category combinators\n * @since 2.2.0\n */\nexport var lazy = function (f) {\n    var get = memoize(f);\n    return {\n        is: function (u) { return get().is(u); }\n    };\n};\n/**\n * @category combinators\n * @since 2.2.15\n */\nexport var readonly = identity;\n/**\n * @category combinators\n * @since 2.2.8\n */\nexport var alt = function (that) { return function (me) { return ({\n    is: function (i) { return me.is(i) || that().is(i); }\n}); }; };\n/**\n * @category combinators\n * @since 2.2.8\n */\nexport var zero = function () { return ({\n    is: function (_) { return false; }\n}); };\n/**\n * @category combinators\n * @since 2.2.8\n */\nexport var compose = function (to) { return function (from) { return ({\n    is: function (i) { return from.is(i) && to.is(i); }\n}); }; };\n/**\n * @category combinators\n * @since 2.2.8\n */\nexport var id = function () { return ({\n    is: function (_) { return true; }\n}); };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.2.0\n */\nexport var URI = 'io-ts/Guard';\n/**\n * @category instances\n * @since 2.2.8\n */\nexport var Schemable = {\n    URI: URI,\n    literal: literal,\n    string: string,\n    number: number,\n    boolean: boolean,\n    nullable: nullable,\n    type: type,\n    struct: struct,\n    partial: partial,\n    record: record,\n    array: array,\n    tuple: tuple,\n    intersect: intersect,\n    sum: sum,\n    lazy: function (_, f) { return lazy(f); },\n    readonly: readonly\n};\n/**\n * @category instances\n * @since 2.2.8\n */\nexport var WithUnknownContainers = {\n    UnknownArray: UnknownArray,\n    UnknownRecord: UnknownRecord\n};\n/**\n * @category instances\n * @since 2.2.8\n */\nexport var WithUnion = {\n    union: union\n};\n/**\n * @category instances\n * @since 2.2.8\n */\nexport var WithRefine = {\n    refine: refine\n};\n","/**\n * @since 2.2.0\n */\nexport function memoize(f) {\n    var cache = new Map();\n    return function (a) {\n        if (!cache.has(a)) {\n            var b = f(a);\n            cache.set(a, b);\n            return b;\n        }\n        return cache.get(a);\n    };\n}\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\nvar typeOf = function (x) { return (x === null ? 'null' : typeof x); };\n/**\n * @internal\n */\nexport var intersect_ = function (a, b) {\n    if (a !== undefined && b !== undefined) {\n        var tx = typeOf(a);\n        var ty = typeOf(b);\n        if (tx === 'object' || ty === 'object') {\n            return Object.assign({}, a, b);\n        }\n    }\n    return b;\n};\n","import * as E from 'fp-ts/es6/Either';\nimport * as G from './Guard';\nimport { intersect_, memoize } from './Schemable';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.2.7\n */\nexport function fromRefinement(M) {\n    return function (refinement, onError) { return ({\n        decode: function (i) { return (refinement(i) ? M.of(i) : M.throwError(onError(i))); }\n    }); };\n}\n/**\n * @category constructors\n * @since 2.2.7\n */\nexport function literal(M) {\n    return function (onError) { return function () {\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        return ({\n            decode: function (i) { return (G.literal.apply(G, values).is(i) ? M.of(i) : M.throwError(onError(i, values))); }\n        });\n    }; };\n}\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function mapLeftWithInput(M) {\n    return function (f) { return function (decoder) { return ({\n        decode: function (i) { return M.mapLeft(decoder.decode(i), function (e) { return f(i, e); }); }\n    }); }; };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function refine(M) {\n    return function (refinement, onError) { return function (from) { return compose(M)(fromRefinement(M)(refinement, onError))(from); }; };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function parse(M) {\n    return function (decode) { return function (from) { return compose(M)({ decode: decode })(from); }; };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function nullable(M) {\n    return function (onError) { return function (or) { return ({\n        decode: function (i) {\n            return i === null\n                ? M.of(null)\n                : M.bimap(or.decode(i), function (e) { return onError(i, e); }, function (a) { return a; });\n        }\n    }); }; };\n}\n/**\n * @category combinators\n * @since 2.2.15\n */\nexport function fromStruct(M) {\n    var traverse = traverseRecordWithIndex(M);\n    return function (onPropertyError) { return function (properties) { return ({\n        decode: function (i) {\n            return traverse(properties, function (key, decoder) {\n                return M.mapLeft(decoder.decode(i[key]), function (e) { return onPropertyError(key, e); });\n            });\n        }\n    }); }; };\n}\n/**\n * Use `fromStruct` instead.\n *\n * @category combinators\n * @since 2.2.7\n * @deprecated\n */\nexport var fromType = fromStruct;\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function fromPartial(M) {\n    var traverse = traverseRecordWithIndex(M);\n    var undefinedProperty = M.of(E.right(undefined));\n    var skipProperty = M.of(E.left(undefined));\n    return function (onPropertyError) { return function (properties) { return ({\n        decode: function (i) {\n            return M.map(traverse(properties, function (key, decoder) {\n                var ikey = i[key];\n                if (ikey === undefined) {\n                    return key in i\n                        ? // don't strip undefined properties\n                            undefinedProperty\n                        : // don't add missing properties\n                            skipProperty;\n                }\n                return M.bimap(decoder.decode(ikey), function (e) { return onPropertyError(key, e); }, function (a) { return E.right(a); });\n            }), compactRecord);\n        }\n    }); }; };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function fromArray(M) {\n    var traverse = traverseArrayWithIndex(M);\n    return function (onItemError) { return function (item) { return ({\n        decode: function (is) { return traverse(is, function (index, i) { return M.mapLeft(item.decode(i), function (e) { return onItemError(index, e); }); }); }\n    }); }; };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function fromRecord(M) {\n    var traverse = traverseRecordWithIndex(M);\n    return function (onKeyError) { return function (codomain) { return ({\n        decode: function (ir) { return traverse(ir, function (key, i) { return M.mapLeft(codomain.decode(i), function (e) { return onKeyError(key, e); }); }); }\n    }); }; };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function fromTuple(M) {\n    var traverse = traverseArrayWithIndex(M);\n    return function (onIndexError) { return function () {\n        var components = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            components[_i] = arguments[_i];\n        }\n        return ({\n            decode: function (is) {\n                return traverse(components, function (index, decoder) {\n                    return M.mapLeft(decoder.decode(is[index]), function (e) { return onIndexError(index, e); });\n                });\n            }\n        });\n    }; };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function union(M) {\n    return function (onMemberError) { return function () {\n        var members = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            members[_i] = arguments[_i];\n        }\n        return ({\n            decode: function (i) {\n                var out = M.mapLeft(members[0].decode(i), function (e) { return onMemberError(0, e); });\n                var _loop_1 = function (index) {\n                    out = M.alt(out, function () { return M.mapLeft(members[index].decode(i), function (e) { return onMemberError(index, e); }); });\n                };\n                for (var index = 1; index < members.length; index++) {\n                    _loop_1(index);\n                }\n                return out;\n            }\n        });\n    }; };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function intersect(M) {\n    return function (right) { return function (left) { return ({\n        decode: function (i) {\n            return M.ap(M.map(left.decode(i), function (a) { return function (b) { return intersect_(a, b); }; }), right.decode(i));\n        }\n    }); }; };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function fromSum(M) {\n    return function (onTagError) { return function (tag) { return function (members) {\n        var keys = Object.keys(members);\n        return {\n            decode: function (ir) {\n                var v = ir[tag];\n                if (v in members) {\n                    return members[v].decode(ir);\n                }\n                return M.throwError(onTagError(tag, v, keys));\n            }\n        };\n    }; }; };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function lazy(M) {\n    return function (onError) { return function (id, f) {\n        var get = memoize(f);\n        return {\n            decode: function (u) { return M.mapLeft(get().decode(u), function (e) { return onError(id, e); }); }\n        };\n    }; };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function compose(M) {\n    return function (ab) { return function (ia) { return ({\n        decode: function (i) { return M.chain(ia.decode(i), ab.decode); }\n    }); }; };\n}\n/**\n * @category combinators\n * @since 2.2.8\n */\nexport function id(M) {\n    return function () { return ({\n        decode: M.of\n    }); };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function map(F) {\n    return function (f) { return function (ia) { return ({\n        decode: function (i) { return F.map(ia.decode(i), f); }\n    }); }; };\n}\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport function alt(A) {\n    return function (that) { return function (me) { return ({\n        decode: function (i) { return A.alt(me.decode(i), function () { return that().decode(i); }); }\n    }); }; };\n}\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\nvar traverseArrayWithIndex = function (M) { return function (as, f) {\n    return as.reduce(function (mbs, a, i) {\n        return M.ap(M.map(mbs, function (bs) { return function (b) {\n            bs.push(b);\n            return bs;\n        }; }), f(i, a));\n    }, M.of([]));\n}; };\nvar traverseRecordWithIndex = function (M) { return function (r, f) {\n    var ks = Object.keys(r);\n    if (ks.length === 0) {\n        return M.of({});\n    }\n    var fr = M.of({});\n    var _loop_2 = function (key) {\n        fr = M.ap(M.map(fr, function (r) { return function (b) {\n            r[key] = b;\n            return r;\n        }; }), f(key, r[key]));\n    };\n    for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {\n        var key = ks_1[_i];\n        _loop_2(key);\n    }\n    return fr;\n}; };\nvar compactRecord = function (r) {\n    var out = {};\n    for (var k in r) {\n        var rk = r[k];\n        if (E.isRight(rk)) {\n            out[k] = rk.right;\n        }\n    }\n    return out;\n};\n","import * as E from 'fp-ts/es6/Either';\nimport { identity } from 'fp-ts/es6/function';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport * as DE from './DecodeError';\nimport * as FS from './FreeSemigroup';\nimport * as G from './Guard';\nimport * as K from './Kleisli';\n// -------------------------------------------------------------------------------------\n// Kleisli config\n// -------------------------------------------------------------------------------------\n/**\n * @internal\n */\nexport var SE = \n/*#__PURE__*/\nDE.getSemigroup();\n/**\n * @internal\n */\nexport var ap = function (fab, fa) {\n    return E.isLeft(fab)\n        ? E.isLeft(fa)\n            ? E.left(SE.concat(fab.left, fa.left))\n            : fab\n        : E.isLeft(fa)\n            ? fa\n            : E.right(fab.right(fa.right));\n};\nvar M = {\n    URI: E.URI,\n    _E: undefined,\n    map: function (fa, f) { return pipe(fa, E.map(f)); },\n    ap: ap,\n    of: E.right,\n    chain: function (ma, f) { return pipe(ma, E.chain(f)); },\n    throwError: E.left,\n    bimap: function (fa, f, g) { return pipe(fa, E.bimap(f, g)); },\n    mapLeft: function (fa, f) { return pipe(fa, E.mapLeft(f)); },\n    alt: function (me, that) {\n        if (E.isRight(me)) {\n            return me;\n        }\n        var ea = that();\n        return E.isLeft(ea) ? E.left(SE.concat(me.left, ea.left)) : ea;\n    }\n};\n/**\n * @category DecodeError\n * @since 2.2.7\n */\nexport var error = function (actual, message) { return FS.of(DE.leaf(actual, message)); };\n/**\n * @category DecodeError\n * @since 2.2.7\n */\nexport var success = E.right;\n/**\n * @category DecodeError\n * @since 2.2.7\n */\nexport var failure = function (actual, message) {\n    return E.left(error(actual, message));\n};\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.2.8\n */\nexport var fromRefinement = function (refinement, expected) {\n    return K.fromRefinement(M)(refinement, function (u) { return error(u, expected); });\n};\n/**\n * @category constructors\n * @since 2.2.8\n */\nexport var fromGuard = function (guard, expected) {\n    return fromRefinement(guard.is, expected);\n};\n/**\n * @category constructors\n * @since 2.2.7\n */\nexport var literal = \n/*#__PURE__*/\nK.literal(M)(function (u, values) { return error(u, values.map(function (value) { return JSON.stringify(value); }).join(' | ')); });\n// -------------------------------------------------------------------------------------\n// primitives\n// -------------------------------------------------------------------------------------\n/**\n * @category primitives\n * @since 2.2.7\n */\nexport var string = \n/*#__PURE__*/\nfromGuard(G.string, 'string');\n/**\n * @category primitives\n * @since 2.2.7\n */\nexport var number = \n/*#__PURE__*/\nfromGuard(G.number, 'number');\n/**\n * @category primitives\n * @since 2.2.7\n */\nexport var boolean = \n/*#__PURE__*/\nfromGuard(G.boolean, 'boolean');\n/**\n * @category primitives\n * @since 2.2.7\n */\nexport var UnknownArray = \n/*#__PURE__*/\nfromGuard(G.UnknownArray, 'Array<unknown>');\n/**\n * @category primitives\n * @since 2.2.7\n */\nexport var UnknownRecord = \n/*#__PURE__*/\nfromGuard(G.UnknownRecord, 'Record<string, unknown>');\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport var mapLeftWithInput = \n/*#__PURE__*/\nK.mapLeftWithInput(M);\n/**\n * @category combinators\n * @since 2.2.9\n */\nexport var withMessage = function (message) {\n    return mapLeftWithInput(function (input, e) { return FS.of(DE.wrap(message(input, e), e)); });\n};\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport var refine = function (refinement, id) { return K.refine(M)(refinement, function (a) { return error(a, id); }); };\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport var parse = \n/*#__PURE__*/\nK.parse(M);\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport var nullable = \n/*#__PURE__*/\nK.nullable(M)(function (u, e) { return FS.concat(FS.of(DE.member(0, error(u, 'null'))), FS.of(DE.member(1, e))); });\n/**\n * @category combinators\n * @since 2.2.15\n */\nexport var fromStruct = function (properties) {\n    return K.fromStruct(M)(function (k, e) { return FS.of(DE.key(k, DE.required, e)); })(properties);\n};\n/**\n * Use `fromStruct` instead.\n *\n * @category combinators\n * @since 2.2.8\n * @deprecated\n */\nexport var fromType = fromStruct;\n/**\n * @category combinators\n * @since 2.2.15\n */\nexport var struct = function (properties) { return pipe(UnknownRecord, compose(fromStruct(properties))); };\n/**\n * Use `struct` instead.\n *\n * @category combinators\n * @since 2.2.7\n * @deprecated\n */\nexport var type = struct;\n/**\n * @category combinators\n * @since 2.2.8\n */\nexport var fromPartial = function (properties) {\n    return K.fromPartial(M)(function (k, e) { return FS.of(DE.key(k, DE.optional, e)); })(properties);\n};\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport var partial = function (properties) { return pipe(UnknownRecord, compose(fromPartial(properties))); };\n/**\n * @category combinators\n * @since 2.2.8\n */\nexport var fromArray = function (item) {\n    return K.fromArray(M)(function (i, e) { return FS.of(DE.index(i, DE.optional, e)); })(item);\n};\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport var array = function (item) {\n    return pipe(UnknownArray, compose(fromArray(item)));\n};\n/**\n * @category combinators\n * @since 2.2.8\n */\nexport var fromRecord = function (codomain) {\n    return K.fromRecord(M)(function (k, e) { return FS.of(DE.key(k, DE.optional, e)); })(codomain);\n};\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport var record = function (codomain) {\n    return pipe(UnknownRecord, compose(fromRecord(codomain)));\n};\n/**\n * @category combinators\n * @since 2.2.8\n */\nexport var fromTuple = function () {\n    var components = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        components[_i] = arguments[_i];\n    }\n    return K.fromTuple(M)(function (i, e) { return FS.of(DE.index(i, DE.required, e)); }).apply(void 0, components);\n};\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport var tuple = function () {\n    var components = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        components[_i] = arguments[_i];\n    }\n    return pipe(UnknownArray, compose(fromTuple.apply(void 0, components)));\n};\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport var union = \n/*#__PURE__*/\nK.union(M)(function (i, e) { return FS.of(DE.member(i, e)); });\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport var intersect = \n/*#__PURE__*/\nK.intersect(M);\n/**\n * @category combinators\n * @since 2.2.8\n */\nexport var fromSum = function (tag) { return function (members) {\n    return K.fromSum(M)(function (tag, value, keys) {\n        return FS.of(DE.key(tag, DE.required, error(value, keys.length === 0 ? 'never' : keys.map(function (k) { return JSON.stringify(k); }).join(' | '))));\n    })(tag)(members);\n}; };\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport var sum = function (tag) { return function (members) { return pipe(UnknownRecord, compose(fromSum(tag)(members))); }; };\n/**\n * @category combinators\n * @since 2.2.7\n */\nexport var lazy = \n/*#__PURE__*/\nK.lazy(M)(function (id, e) { return FS.of(DE.lazy(id, e)); });\n/**\n * @category combinators\n * @since 2.2.15\n */\nexport var readonly = identity;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar map_ = function (fa, f) { return pipe(fa, map(f)); };\nvar alt_ = function (me, that) { return pipe(me, alt(that)); };\nvar compose_ = function (ab, la) { return pipe(la, compose(ab)); };\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * @category Functor\n * @since 2.2.7\n */\nexport var map = \n/*#__PURE__*/\nK.map(M);\n/**\n * @category Alt\n * @since 2.2.7\n */\nexport var alt = \n/*#__PURE__*/\nK.alt(M);\n/**\n * @category Semigroupoid\n * @since 2.2.8\n */\nexport var compose = \n/*#__PURE__*/\nK.compose(M);\n/**\n * @category Category\n * @since 2.2.8\n */\nexport var id = \n/*#__PURE__*/\nK.id(M);\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.2.7\n */\nexport var URI = 'io-ts/Decoder';\n/**\n * @category instances\n * @since 2.2.8\n */\nexport var Functor = {\n    URI: URI,\n    map: map_\n};\n/**\n * @category instances\n * @since 2.2.8\n */\nexport var Alt = {\n    URI: URI,\n    map: map_,\n    alt: alt_\n};\n/**\n * @category instances\n * @since 2.2.8\n */\nexport var Category = {\n    URI: URI,\n    compose: compose_,\n    id: id\n};\n/**\n * @category instances\n * @since 2.2.8\n */\nexport var Schemable = {\n    URI: URI,\n    literal: literal,\n    string: string,\n    number: number,\n    boolean: boolean,\n    nullable: nullable,\n    type: type,\n    struct: struct,\n    partial: partial,\n    record: record,\n    array: array,\n    tuple: tuple,\n    intersect: intersect,\n    sum: sum,\n    lazy: lazy,\n    readonly: readonly\n};\n/**\n * @category instances\n * @since 2.2.8\n */\nexport var WithUnknownContainers = {\n    UnknownArray: UnknownArray,\n    UnknownRecord: UnknownRecord\n};\n/**\n * @category instances\n * @since 2.2.8\n */\nexport var WithUnion = {\n    union: union\n};\n/**\n * @category instances\n * @since 2.2.8\n */\nexport var WithRefine = {\n    refine: refine\n};\nvar empty = [];\nvar make = function (value, forest) {\n    if (forest === void 0) { forest = empty; }\n    return ({\n        value: value,\n        forest: forest\n    });\n};\nvar drawTree = function (tree) { return tree.value + drawForest('\\n', tree.forest); };\nvar drawForest = function (indentation, forest) {\n    var r = '';\n    var len = forest.length;\n    var tree;\n    for (var i = 0; i < len; i++) {\n        tree = forest[i];\n        var isLast = i === len - 1;\n        r += indentation + (isLast ? '└' : '├') + '─ ' + tree.value;\n        r += drawForest(indentation + (len > 1 && !isLast ? '│  ' : '   '), tree.forest);\n    }\n    return r;\n};\nvar toTree = DE.fold({\n    Leaf: function (input, error) { return make(\"cannot decode \" + JSON.stringify(input) + \", should be \" + error); },\n    Key: function (key, kind, errors) { return make(kind + \" property \" + JSON.stringify(key), toForest(errors)); },\n    Index: function (index, kind, errors) { return make(kind + \" index \" + index, toForest(errors)); },\n    Member: function (index, errors) { return make(\"member \" + index, toForest(errors)); },\n    Lazy: function (id, errors) { return make(\"lazy type \" + id, toForest(errors)); },\n    Wrap: function (error, errors) { return make(error, toForest(errors)); }\n});\nvar toForest = function (e) {\n    var stack = [];\n    var focus = e;\n    var res = [];\n    while (true) {\n        switch (focus._tag) {\n            case 'Of':\n                res.push(toTree(focus.value));\n                var tmp = stack.pop();\n                if (tmp === undefined) {\n                    return res;\n                }\n                else {\n                    focus = tmp;\n                }\n                break;\n            case 'Concat':\n                stack.push(focus.right);\n                focus = focus.left;\n                break;\n        }\n    }\n};\n/**\n * @since 2.2.7\n */\nexport var draw = function (e) { return toForest(e).map(drawTree).join('\\n'); };\n/**\n * @internal\n */\nexport var stringify = \n/*#__PURE__*/\nE.fold(draw, function (a) { return JSON.stringify(a, null, 2); });\n","var __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { fromEquals } from './Eq';\nimport { fromEitherK as fromEitherK_ } from './FromEither';\nimport { identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as N from './number';\nimport { fromCompare } from './Ord';\nimport * as RNEA from './ReadonlyNonEmptyArray';\nimport { separated } from './Separated';\nimport { filterE as filterE_, wiltDefault, witherDefault } from './Witherable';\nimport { guard as guard_ } from './Zero';\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Test whether a `ReadonlyArray` is empty.\n *\n * @example\n * import { isEmpty } from 'fp-ts/ReadonlyArray'\n *\n * assert.strictEqual(isEmpty([]), true)\n *\n * @category refinements\n * @since 2.5.0\n */\nexport var isEmpty = function (as) { return as.length === 0; };\n/**\n * Test whether a `ReadonlyArray` is non empty.\n *\n * @category refinements\n * @since 2.5.0\n */\nexport var isNonEmpty = RNEA.isNonEmpty;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Prepend an element to the front of a `ReadonlyArray`, creating a new `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { prepend } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])\n *\n * @category constructors\n * @since 2.10.0\n */\nexport var prepend = RNEA.prepend;\n/**\n * Less strict version of [`prepend`](#prepend).\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var prependW = RNEA.prependW;\n/**\n * Append an element to the end of a `ReadonlyArray`, creating a new `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { append } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])\n *\n * @category constructors\n * @since 2.10.0\n */\nexport var append = RNEA.append;\n/**\n * Less strict version of [`append`](#append).\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var appendW = RNEA.appendW;\n/**\n * Return a `ReadonlyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { makeBy } from 'fp-ts/ReadonlyArray'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.5.0\n */\nexport var makeBy = function (n, f) { return (n <= 0 ? empty : RNEA.makeBy(f)(n)); };\n/**\n * Create a `ReadonlyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { replicate } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.5.0\n */\nexport var replicate = function (n, a) { return makeBy(n, function () { return a; }); };\nexport function fromPredicate(predicate) {\n    return function (a) { return (predicate(a) ? [a] : empty); };\n}\n// -------------------------------------------------------------------------------------\n// natural transformations\n// -------------------------------------------------------------------------------------\n/**\n * @category natural transformations\n * @since 2.11.0\n */\nexport var fromOption = function (ma) { return (_.isNone(ma) ? empty : [ma.value]); };\n/**\n * Transforms an `Either` to a `ReadonlyArray`.\n *\n * @category natural transformations\n * @since 2.11.0\n */\nexport var fromEither = function (e) { return (_.isLeft(e) ? empty : [e.right]); };\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Less strict version of [`match`](#match).\n *\n * @category destructors\n * @since 2.11.0\n */\nexport var matchW = function (onEmpty, onNonEmpty) { return function (as) { return (isNonEmpty(as) ? onNonEmpty(as) : onEmpty()); }; };\n/**\n * @category destructors\n * @since 2.11.0\n */\nexport var match = matchW;\n/**\n * Less strict version of [`matchLeft`](#matchleft).\n *\n * @category destructors\n * @since 2.11.0\n */\nexport var matchLeftW = function (onEmpty, onNonEmpty) { return function (as) { return (isNonEmpty(as) ? onNonEmpty(RNEA.head(as), RNEA.tail(as)) : onEmpty()); }; };\n/**\n * Break a `ReadonlyArray` into its first element and remaining elements.\n *\n * @example\n * import { matchLeft } from 'fp-ts/ReadonlyArray'\n *\n * const len: <A>(as: ReadonlyArray<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))\n * assert.strictEqual(len([1, 2, 3]), 3)\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var matchLeft = matchLeftW;\n/**\n * Alias of [`matchLeft`](#matchleft).\n *\n * @category destructors\n * @since 2.5.0\n */\nexport var foldLeft = matchLeft;\n/**\n * Less strict version of [`matchRight`](#matchright).\n *\n * @category destructors\n * @since 2.11.0\n */\nexport var matchRightW = function (onEmpty, onNonEmpty) { return function (as) { return (isNonEmpty(as) ? onNonEmpty(RNEA.init(as), RNEA.last(as)) : onEmpty()); }; };\n/**\n * Break a `ReadonlyArray` into its initial elements and the last element.\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var matchRight = matchRightW;\n/**\n * Alias of [`matchRight`](#matchright).\n *\n * @category destructors\n * @since 2.5.0\n */\nexport var foldRight = matchRight;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.7.0\n */\nexport var chainWithIndex = function (f) { return function (as) {\n    if (isEmpty(as)) {\n        return empty;\n    }\n    var out = [];\n    for (var i = 0; i < as.length; i++) {\n        out.push.apply(out, f(i, as[i]));\n    }\n    return out;\n}; };\n/**\n * Same as `reduce` but it carries over the intermediate steps.\n *\n * @example\n * import { scanLeft } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var scanLeft = function (b, f) { return function (as) {\n    var len = as.length;\n    var out = new Array(len + 1);\n    out[0] = b;\n    for (var i = 0; i < len; i++) {\n        out[i + 1] = f(out[i], as[i]);\n    }\n    return out;\n}; };\n/**\n * Fold an array from the right, keeping all intermediate results instead of only the final result\n *\n * @example\n * import { scanRight } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var scanRight = function (b, f) { return function (as) {\n    var len = as.length;\n    var out = new Array(len + 1);\n    out[len] = b;\n    for (var i = len - 1; i >= 0; i--) {\n        out[i] = f(as[i], out[i + 1]);\n    }\n    return out;\n}; };\n/**\n * Calculate the number of elements in a `ReadonlyArray`.\n *\n * @since 2.10.0\n */\nexport var size = function (as) { return as.length; };\n/**\n * Test whether an array contains a particular index\n *\n * @since 2.5.0\n */\nexport var isOutOfBound = RNEA.isOutOfBound;\nexport function lookup(i, as) {\n    return as === undefined ? function (as) { return lookup(i, as); } : isOutOfBound(i, as) ? _.none : _.some(as[i]);\n}\n/**\n * Get the first element in an array, or `None` if the array is empty\n *\n * @example\n * import { head } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(head([1, 2, 3]), some(1))\n * assert.deepStrictEqual(head([]), none)\n *\n * @since 2.5.0\n */\nexport var head = function (as) { return (isNonEmpty(as) ? _.some(RNEA.head(as)) : _.none); };\n/**\n * Get the last element in an array, or `None` if the array is empty\n *\n * @example\n * import { last } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(last([1, 2, 3]), some(3))\n * assert.deepStrictEqual(last([]), none)\n *\n * @since 2.5.0\n */\nexport var last = function (as) { return (isNonEmpty(as) ? _.some(RNEA.last(as)) : _.none); };\n/**\n * Get all but the first element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { tail } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(tail([]), none)\n *\n * @since 2.5.0\n */\nexport var tail = function (as) {\n    return isNonEmpty(as) ? _.some(RNEA.tail(as)) : _.none;\n};\n/**\n * Get all but the last element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { init } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))\n * assert.deepStrictEqual(init([]), none)\n *\n * @since 2.5.0\n */\nexport var init = function (as) {\n    return isNonEmpty(as) ? _.some(RNEA.init(as)) : _.none;\n};\n/**\n * Keep only a max number of elements from the start of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.takeLeft(2)), [1, 2])\n *\n * // out of bounds\n * assert.strictEqual(pipe(input, RA.takeLeft(4)), input)\n * assert.strictEqual(pipe(input, RA.takeLeft(-1)), input)\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var takeLeft = function (n) { return function (as) {\n    return isOutOfBound(n, as) ? as : n === 0 ? empty : as.slice(0, n);\n}; };\n/**\n * Keep only a max number of elements from the end of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.takeRight(2)), [2, 3])\n *\n * // out of bounds\n * assert.strictEqual(pipe(input, RA.takeRight(4)), input)\n * assert.strictEqual(pipe(input, RA.takeRight(-1)), input)\n *\n * @since 2.5.0\n */\nexport var takeRight = function (n) { return function (as) {\n    return isOutOfBound(n, as) ? as : n === 0 ? empty : as.slice(-n);\n}; };\nexport function takeLeftWhile(predicate) {\n    return function (as) {\n        var out = [];\n        for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n            var a = as_1[_i];\n            if (!predicate(a)) {\n                break;\n            }\n            out.push(a);\n        }\n        var len = out.length;\n        return len === as.length ? as : len === 0 ? empty : out;\n    };\n}\nvar spanLeftIndex = function (as, predicate) {\n    var l = as.length;\n    var i = 0;\n    for (; i < l; i++) {\n        if (!predicate(as[i])) {\n            break;\n        }\n    }\n    return i;\n};\nexport function spanLeft(predicate) {\n    return function (as) {\n        var _a = splitAt(spanLeftIndex(as, predicate))(as), init = _a[0], rest = _a[1];\n        return { init: init, rest: rest };\n    };\n}\n/**\n * Drop a max number of elements from the start of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.dropLeft(2)), [3])\n * assert.strictEqual(pipe(input, RA.dropLeft(0)), input)\n * assert.strictEqual(pipe(input, RA.dropLeft(-1)), input)\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var dropLeft = function (n) { return function (as) {\n    return n <= 0 || isEmpty(as) ? as : n >= as.length ? empty : as.slice(n, as.length);\n}; };\n/**\n * Drop a max number of elements from the end of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.dropRight(2)), [1])\n * assert.strictEqual(pipe(input, RA.dropRight(0)), input)\n * assert.strictEqual(pipe(input, RA.dropRight(-1)), input)\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var dropRight = function (n) { return function (as) {\n    return n <= 0 || isEmpty(as) ? as : n >= as.length ? empty : as.slice(0, as.length - n);\n}; };\nexport function dropLeftWhile(predicate) {\n    return function (as) {\n        var i = spanLeftIndex(as, predicate);\n        return i === 0 ? as : i === as.length ? empty : as.slice(i);\n    };\n}\n/**\n * Find the first index for which a predicate holds\n *\n * @example\n * import { findIndex } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)\n *\n * @since 2.5.0\n */\nexport var findIndex = function (predicate) { return function (as) {\n    for (var i = 0; i < as.length; i++) {\n        if (predicate(as[i])) {\n            return _.some(i);\n        }\n    }\n    return _.none;\n}; };\nexport function findFirst(predicate) {\n    return function (as) {\n        for (var i = 0; i < as.length; i++) {\n            if (predicate(as[i])) {\n                return _.some(as[i]);\n            }\n        }\n        return _.none;\n    };\n}\n/**\n * Find the first element returned by an option based selector function\n *\n * @example\n * import { findFirstMap } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age?: number\n * }\n *\n * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the first person that has an age\n * assert.deepStrictEqual(findFirstMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Mary'))\n *\n * @since 2.5.0\n */\nexport var findFirstMap = function (f) { return function (as) {\n    for (var i = 0; i < as.length; i++) {\n        var out = f(as[i]);\n        if (_.isSome(out)) {\n            return out;\n        }\n    }\n    return _.none;\n}; };\nexport function findLast(predicate) {\n    return function (as) {\n        for (var i = as.length - 1; i >= 0; i--) {\n            if (predicate(as[i])) {\n                return _.some(as[i]);\n            }\n        }\n        return _.none;\n    };\n}\n/**\n * Find the last element returned by an option based selector function\n *\n * @example\n * import { findLastMap } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age?: number\n * }\n *\n * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the last person that has an age\n * assert.deepStrictEqual(findLastMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Joey'))\n *\n * @since 2.5.0\n */\nexport var findLastMap = function (f) { return function (as) {\n    for (var i = as.length - 1; i >= 0; i--) {\n        var out = f(as[i]);\n        if (_.isSome(out)) {\n            return out;\n        }\n    }\n    return _.none;\n}; };\n/**\n * Returns the index of the last element of the list which matches the predicate\n *\n * @example\n * import { findLastIndex } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface X {\n *   readonly a: number\n *   readonly b: number\n * }\n * const xs: ReadonlyArray<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)\n *\n *\n * @since 2.5.0\n */\nexport var findLastIndex = function (predicate) { return function (as) {\n    for (var i = as.length - 1; i >= 0; i--) {\n        if (predicate(as[i])) {\n            return _.some(i);\n        }\n    }\n    return _.none;\n}; };\n/**\n * Insert an element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { insertAt } from 'fp-ts/ReadonlyArray'\n * import { some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))\n *\n * @since 2.5.0\n */\nexport var insertAt = function (i, a) { return function (as) {\n    return i < 0 || i > as.length ? _.none : _.some(RNEA.unsafeInsertAt(i, a, as));\n}; };\n/**\n * Change the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { updateAt } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))\n * assert.deepStrictEqual(updateAt(1, 1)([]), none)\n *\n * @since 2.5.0\n */\nexport var updateAt = function (i, a) {\n    return modifyAt(i, function () { return a; });\n};\n/**\n * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { deleteAt } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(deleteAt(1)([]), none)\n *\n * @since 2.5.0\n */\nexport var deleteAt = function (i) { return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeDeleteAt(i, as));\n}; };\n/**\n * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out\n * of bounds\n *\n * @example\n * import { modifyAt } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * const double = (x: number): number => x * 2\n * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))\n * assert.deepStrictEqual(modifyAt(1, double)([]), none)\n *\n * @since 2.5.0\n */\nexport var modifyAt = function (i, f) { return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n}; };\n/**\n * Reverse an array, creating a new array\n *\n * @example\n * import { reverse } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var reverse = function (as) { return (as.length <= 1 ? as : as.slice().reverse()); };\n/**\n * Extracts from an array of `Either` all the `Right` elements. All the `Right` elements are extracted in order\n *\n * @example\n * import { rights } from 'fp-ts/ReadonlyArray'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var rights = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Right') {\n            r.push(a.right);\n        }\n    }\n    return r;\n};\n/**\n * Extracts from an array of `Either` all the `Left` elements. All the `Left` elements are extracted in order\n *\n * @example\n * import { lefts } from 'fp-ts/ReadonlyArray'\n * import { left, right } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var lefts = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Left') {\n            r.push(a.left);\n        }\n    }\n    return r;\n};\n/**\n * Sort the elements of an array in increasing order, creating a new array\n *\n * @example\n * import { sort } from 'fp-ts/ReadonlyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var sort = function (O) { return function (as) {\n    return as.length <= 1 ? as : as.slice().sort(O.compare);\n}; };\n// TODO: curry and make data-last in v3\n/**\n * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one\n * input array is short, excess elements of the longer array are discarded.\n *\n * @example\n * import { zipWith } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var zipWith = function (fa, fb, f) {\n    var fc = [];\n    var len = Math.min(fa.length, fb.length);\n    for (var i = 0; i < len; i++) {\n        fc[i] = f(fa[i], fb[i]);\n    }\n    return fc;\n};\nexport function zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return zipWith(as, bs, function (a, b) { return [a, b]; });\n}\n/**\n * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays\n *\n * @example\n * import { unzip } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var unzip = function (as) {\n    var fa = [];\n    var fb = [];\n    for (var i = 0; i < as.length; i++) {\n        fa[i] = as[i][0];\n        fb[i] = as[i][1];\n    }\n    return [fa, fb];\n};\n/**\n * Prepend an element to every member of an array\n *\n * @example\n * import { prependAll } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var prependAll = function (middle) {\n    var f = RNEA.prependAll(middle);\n    return function (as) { return (isNonEmpty(as) ? f(as) : as); };\n};\n/**\n * Places an element in between members of an array\n *\n * @example\n * import { intersperse } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.9.0\n */\nexport var intersperse = function (middle) {\n    var f = RNEA.intersperse(middle);\n    return function (as) { return (isNonEmpty(as) ? f(as) : as); };\n};\n/**\n * Rotate a `ReadonlyArray` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var rotate = function (n) {\n    var f = RNEA.rotate(n);\n    return function (as) { return (isNonEmpty(as) ? f(as) : as); };\n};\nexport function elem(E) {\n    return function (a, as) {\n        if (as === undefined) {\n            var elemE_1 = elem(E);\n            return function (as) { return elemE_1(a, as); };\n        }\n        var predicate = function (element) { return E.equals(element, a); };\n        var i = 0;\n        for (; i < as.length; i++) {\n            if (predicate(as[i])) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\n/**\n * Remove duplicates from an array, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/ReadonlyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var uniq = function (E) {\n    var f = RNEA.uniq(E);\n    return function (as) { return (isNonEmpty(as) ? f(as) : as); };\n};\n/**\n * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import { sortBy } from 'fp-ts/ReadonlyArray'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age: number\n * }\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = sortBy([byName, byAge])\n *\n * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var sortBy = function (ords) {\n    var f = RNEA.sortBy(ords);\n    return function (as) { return (isNonEmpty(as) ? f(as) : as); };\n};\n/**\n * A useful recursion pattern for processing a `ReadonlyArray` to produce a new `ReadonlyArray`, often used for \"chopping\" up the input\n * `ReadonlyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `ReadonlyArray` and produce a\n * value and the tail of the `ReadonlyArray`.\n *\n * @example\n * import { Eq } from 'fp-ts/Eq'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * const group = <A>(S: Eq<A>): ((as: ReadonlyArray<A>) => ReadonlyArray<ReadonlyArray<A>>) => {\n *   return RA.chop(as => {\n *     const { init, rest } = pipe(as, RA.spanLeft((a: A) => S.equals(a, as[0])))\n *     return [init, rest]\n *   })\n * }\n * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var chop = function (f) {\n    var g = RNEA.chop(f);\n    return function (as) { return (isNonEmpty(as) ? g(as) : empty); };\n};\n/**\n * Splits a `ReadonlyArray` into two pieces, the first piece has max `n` elements.\n *\n * @example\n * import { splitAt } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var splitAt = function (n) { return function (as) {\n    return n >= 1 && isNonEmpty(as) ? RNEA.splitAt(n)(as) : isEmpty(as) ? [as, empty] : [empty, as];\n}; };\n/**\n * Splits a `ReadonlyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `ReadonlyArray`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that:\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `as`.\n *\n * @example\n * import { chunksOf } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var chunksOf = function (n) {\n    var f = RNEA.chunksOf(n);\n    return function (as) { return (isNonEmpty(as) ? f(as) : empty); };\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var fromOptionK = function (f) { return function () {\n    var a = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        a[_i] = arguments[_i];\n    }\n    return fromOption(f.apply(void 0, a));\n}; };\nexport function comprehension(input, f, g) {\n    if (g === void 0) { g = function () { return true; }; }\n    var go = function (scope, input) {\n        return isNonEmpty(input)\n            ? pipe(RNEA.head(input), chain(function (x) { return go(pipe(scope, append(x)), RNEA.tail(input)); }))\n            : g.apply(void 0, scope) ? [f.apply(void 0, scope)]\n                : empty;\n    };\n    return go(empty, input);\n}\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var concatW = function (second) { return function (first) {\n    return isEmpty(first) ? second : isEmpty(second) ? first : first.concat(second);\n}; };\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var concat = concatW;\nexport function union(E) {\n    var unionE = RNEA.union(E);\n    return function (first, second) {\n        if (second === undefined) {\n            var unionE_1 = union(E);\n            return function (second) { return unionE_1(second, first); };\n        }\n        return isNonEmpty(first) && isNonEmpty(second) ? unionE(second)(first) : isNonEmpty(first) ? first : second;\n    };\n}\nexport function intersection(E) {\n    var elemE = elem(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var intersectionE_1 = intersection(E);\n            return function (ys) { return intersectionE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return elemE(a, ys); });\n    };\n}\nexport function difference(E) {\n    var elemE = elem(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var differenceE_1 = difference(E);\n            return function (ys) { return differenceE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return !elemE(a, ys); });\n    };\n}\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _mapWithIndex = function (fa, f) { return pipe(fa, mapWithIndex(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _chain = function (ma, f) { return pipe(ma, chain(f)); };\nvar _filter = function (fa, predicate) {\n    return pipe(fa, filter(predicate));\n};\nvar _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\nvar _partition = function (fa, predicate) {\n    return pipe(fa, partition(predicate));\n};\nvar _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\nvar _partitionWithIndex = function (fa, predicateWithIndex) { return pipe(fa, partitionWithIndex(predicateWithIndex)); };\nvar _partitionMapWithIndex = function (fa, f) { return pipe(fa, partitionMapWithIndex(f)); };\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\nvar _reduceWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceWithIndex(b, f));\n};\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = foldMapWithIndex(M);\n    return function (fa, f) { return pipe(fa, foldMapWithIndexM(f)); };\n};\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceRightWithIndex(b, f));\n};\nvar _filterMapWithIndex = function (fa, f) { return pipe(fa, filterMapWithIndex(f)); };\nvar _filterWithIndex = function (fa, predicateWithIndex) { return pipe(fa, filterWithIndex(predicateWithIndex)); };\nvar _extend = function (fa, f) { return pipe(fa, extend(f)); };\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (ta, f) { return pipe(ta, traverseWithIndexF(f)); };\n};\n/** @internal */\nexport var _chainRecDepthFirst = function (a, f) { return pipe(a, chainRecDepthFirst(f)); };\n/** @internal */\nexport var _chainRecBreadthFirst = function (a, f) { return pipe(a, chainRecBreadthFirst(f)); };\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * @category Pointed\n * @since 2.5.0\n */\nexport var of = RNEA.of;\n/**\n * @category Zero\n * @since 2.7.0\n */\nexport var zero = function () { return empty; };\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nexport var altW = function (that) { return function (fa) {\n    return fa.concat(that());\n}; };\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.5.0\n */\nexport var alt = altW;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.5.0\n */\nexport var ap = function (fa) {\n    return chain(function (f) { return pipe(fa, map(f)); });\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.5.0\n */\nexport var chain = function (f) { return function (ma) {\n    return pipe(ma, chainWithIndex(function (_, a) { return f(a); }));\n}; };\n/**\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var flatten = \n/*#__PURE__*/\nchain(identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.5.0\n */\nexport var map = function (f) { return function (fa) {\n    return fa.map(function (a) { return f(a); });\n}; };\n/**\n * @category FunctorWithIndex\n * @since 2.5.0\n */\nexport var mapWithIndex = function (f) { return function (fa) { return fa.map(function (a, i) { return f(i, a); }); }; };\n/**\n * @category Compactable\n * @since 2.5.0\n */\nexport var separate = function (fa) {\n    var left = [];\n    var right = [];\n    for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n        var e = fa_1[_i];\n        if (e._tag === 'Left') {\n            left.push(e.left);\n        }\n        else {\n            right.push(e.right);\n        }\n    }\n    return separated(left, right);\n};\n/**\n * @category Filterable\n * @since 2.5.0\n */\nexport var filter = function (predicate) { return function (as) { return as.filter(predicate); }; };\n/**\n * @category FilterableWithIndex\n * @since 2.5.0\n */\nexport var filterMapWithIndex = function (f) { return function (fa) {\n    var out = [];\n    for (var i = 0; i < fa.length; i++) {\n        var optionB = f(i, fa[i]);\n        if (_.isSome(optionB)) {\n            out.push(optionB.value);\n        }\n    }\n    return out;\n}; };\n/**\n * @category Filterable\n * @since 2.5.0\n */\nexport var filterMap = function (f) {\n    return filterMapWithIndex(function (_, a) { return f(a); });\n};\n/**\n * @category Compactable\n * @since 2.5.0\n */\nexport var compact = \n/*#__PURE__*/\nfilterMap(identity);\n/**\n * @category Filterable\n * @since 2.5.0\n */\nexport var partition = function (predicate) {\n    return partitionWithIndex(function (_, a) { return predicate(a); });\n};\n/**\n * @category FilterableWithIndex\n * @since 2.5.0\n */\nexport var partitionWithIndex = function (predicateWithIndex) { return function (as) {\n    var left = [];\n    var right = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (predicateWithIndex(i, a)) {\n            right.push(a);\n        }\n        else {\n            left.push(a);\n        }\n    }\n    return separated(left, right);\n}; };\n/**\n * @category Filterable\n * @since 2.5.0\n */\nexport var partitionMap = function (f) {\n    return partitionMapWithIndex(function (_, a) { return f(a); });\n};\n/**\n * @category FilterableWithIndex\n * @since 2.5.0\n */\nexport var partitionMapWithIndex = function (f) { return function (fa) {\n    var left = [];\n    var right = [];\n    for (var i = 0; i < fa.length; i++) {\n        var e = f(i, fa[i]);\n        if (e._tag === 'Left') {\n            left.push(e.left);\n        }\n        else {\n            right.push(e.right);\n        }\n    }\n    return separated(left, right);\n}; };\n/**\n * @category FilterableWithIndex\n * @since 2.5.0\n */\nexport var filterWithIndex = function (predicateWithIndex) { return function (as) {\n    return as.filter(function (a, i) { return predicateWithIndex(i, a); });\n}; };\n/**\n * @category Extend\n * @since 2.5.0\n */\nexport var extend = function (f) { return function (wa) { return wa.map(function (_, i) { return f(wa.slice(i)); }); }; };\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var duplicate = \n/*#__PURE__*/\nextend(identity);\n/**\n * @category FoldableWithIndex\n * @since 2.5.0\n */\nexport var foldMapWithIndex = function (M) { return function (f) { return function (fa) {\n    return fa.reduce(function (b, a, i) { return M.concat(b, f(i, a)); }, M.empty);\n}; }; };\n/**\n * @category Foldable\n * @since 2.5.0\n */\nexport var reduce = function (b, f) {\n    return reduceWithIndex(b, function (_, b, a) { return f(b, a); });\n};\n/**\n * @category Foldable\n * @since 2.5.0\n */\nexport var foldMap = function (M) {\n    var foldMapWithIndexM = foldMapWithIndex(M);\n    return function (f) { return foldMapWithIndexM(function (_, a) { return f(a); }); };\n};\n/**\n * @category FoldableWithIndex\n * @since 2.5.0\n */\nexport var reduceWithIndex = function (b, f) { return function (fa) {\n    var len = fa.length;\n    var out = b;\n    for (var i = 0; i < len; i++) {\n        out = f(i, out, fa[i]);\n    }\n    return out;\n}; };\n/**\n * @category Foldable\n * @since 2.5.0\n */\nexport var reduceRight = function (b, f) {\n    return reduceRightWithIndex(b, function (_, a, b) { return f(a, b); });\n};\n/**\n * @category FoldableWithIndex\n * @since 2.5.0\n */\nexport var reduceRightWithIndex = function (b, f) { return function (fa) { return fa.reduceRight(function (b, a, i) { return f(i, a, b); }, b); }; };\n/**\n * @category Traversable\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\n/**\n * @category Traversable\n * @since 2.6.3\n */\nexport var sequence = function (F) { return function (ta) {\n    return _reduce(ta, F.of(zero()), function (fas, fa) {\n        return F.ap(F.map(fas, function (as) { return function (a) { return pipe(as, append(a)); }; }), fa);\n    });\n}; };\n/**\n * @category TraversableWithIndex\n * @since 2.6.3\n */\nexport var traverseWithIndex = function (F) { return function (f) {\n    return reduceWithIndex(F.of(zero()), function (i, fbs, a) {\n        return F.ap(F.map(fbs, function (bs) { return function (b) { return pipe(bs, append(b)); }; }), f(i, a));\n    });\n}; };\n/**\n * @category Witherable\n * @since 2.6.5\n */\nexport var wither = function (F) {\n    var _witherF = _wither(F);\n    return function (f) { return function (fa) { return _witherF(fa, f); }; };\n};\n/**\n * @category Witherable\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n    var _wiltF = _wilt(F);\n    return function (f) { return function (fa) { return _wiltF(fa, f); }; };\n};\n/**\n * @category Unfoldable\n * @since 2.6.6\n */\nexport var unfold = function (b, f) {\n    var out = [];\n    var bb = b;\n    while (true) {\n        var mt = f(bb);\n        if (_.isSome(mt)) {\n            var _a = mt.value, a = _a[0], b_1 = _a[1];\n            out.push(a);\n            bb = b_1;\n        }\n        else {\n            break;\n        }\n    }\n    return out;\n};\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.5.0\n */\nexport var URI = 'ReadonlyArray';\n/**\n * @category instances\n * @since 2.5.0\n */\nexport var getShow = function (S) { return ({\n    show: function (as) { return \"[\" + as.map(S.show).join(', ') + \"]\"; }\n}); };\n/**\n * @category instances\n * @since 2.5.0\n */\nexport var getSemigroup = function () { return ({\n    concat: function (first, second) { return (isEmpty(first) ? second : isEmpty(second) ? first : first.concat(second)); }\n}); };\n/**\n * Returns a `Monoid` for `ReadonlyArray<A>`.\n *\n * @example\n * import { getMonoid } from 'fp-ts/ReadonlyArray'\n *\n * const M = getMonoid<number>()\n * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])\n *\n * @category instances\n * @since 2.5.0\n */\nexport var getMonoid = function () { return ({\n    concat: getSemigroup().concat,\n    empty: empty\n}); };\n/**\n * Derives an `Eq` over the `ReadonlyArray` of a given element type from the `Eq` of that type. The derived `Eq` defines two\n * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of\n * different lengths, the result is non equality.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { getEq } from 'fp-ts/ReadonlyArray'\n *\n * const E = getEq(S.Eq)\n * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)\n * assert.strictEqual(E.equals(['a'], []), false)\n *\n * @category instances\n * @since 2.5.0\n */\nexport var getEq = function (E) {\n    return fromEquals(function (xs, ys) { return xs.length === ys.length && xs.every(function (x, i) { return E.equals(x, ys[i]); }); });\n};\n/**\n * Derives an `Ord` over the `ReadonlyArray` of a given element type from the `Ord` of that type. The ordering between two such\n * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in\n * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have\n * the same length, the result is equality.\n *\n * @example\n * import { getOrd } from 'fp-ts/ReadonlyArray'\n * import * as S from 'fp-ts/string'\n *\n * const O = getOrd(S.Ord)\n * assert.strictEqual(O.compare(['b'], ['a']), 1)\n * assert.strictEqual(O.compare(['a'], ['a']), 0)\n * assert.strictEqual(O.compare(['a'], ['b']), -1)\n *\n *\n * @category instances\n * @since 2.5.0\n */\nexport var getOrd = function (O) {\n    return fromCompare(function (a, b) {\n        var aLen = a.length;\n        var bLen = b.length;\n        var len = Math.min(aLen, bLen);\n        for (var i = 0; i < len; i++) {\n            var ordering = O.compare(a[i], b[i]);\n            if (ordering !== 0) {\n                return ordering;\n            }\n        }\n        return N.Ord.compare(aLen, bLen);\n    });\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E) {\n    var unionE = union(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (E) { return ({\n    concat: getUnionSemigroup(E).concat,\n    empty: empty\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (E) {\n    var intersectionE = intersection(E);\n    return {\n        concat: function (first, second) { return intersectionE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function (E) {\n    var differenceE = difference(E);\n    return {\n        concat: function (first, second) { return differenceE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var apFirst = \n/*#__PURE__*/\napFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var apSecond = \n/*#__PURE__*/\napSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var chainFirst = \n/*#__PURE__*/\nchainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Unfoldable = {\n    URI: URI,\n    unfold: unfold\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Zero = {\n    URI: URI,\n    zero: zero\n};\n/**\n * @category constructors\n * @since 2.11.0\n */\nexport var guard = \n/*#__PURE__*/\nguard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alternative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    alt: _alt,\n    zero: zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FilterableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverse: _traverse,\n    sequence: sequence,\n    traverseWithIndex: _traverseWithIndex\n};\n/**\n * @category ChainRec\n * @since 2.11.0\n */\nexport var chainRecDepthFirst = function (f) { return function (a) {\n    var todo = __spreadArray([], f(a));\n    var out = [];\n    while (todo.length > 0) {\n        var e = todo.shift();\n        if (_.isLeft(e)) {\n            todo.unshift.apply(todo, f(e.left));\n        }\n        else {\n            out.push(e.right);\n        }\n    }\n    return out;\n}; };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var ChainRecDepthFirst = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain,\n    chainRec: _chainRecDepthFirst\n};\n/**\n * @category ChainRec\n * @since 2.11.0\n */\nexport var chainRecBreadthFirst = function (f) { return function (a) {\n    var initial = f(a);\n    var todo = [];\n    var out = [];\n    function go(e) {\n        if (_.isLeft(e)) {\n            f(e.left).forEach(function (v) { return todo.push(v); });\n        }\n        else {\n            out.push(e.right);\n        }\n    }\n    for (var _i = 0, initial_1 = initial; _i < initial_1.length; _i++) {\n        var e = initial_1[_i];\n        go(e);\n    }\n    while (todo.length > 0) {\n        go(todo.shift());\n    }\n    return out;\n}; };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var ChainRecBreadthFirst = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain,\n    chainRec: _chainRecBreadthFirst\n};\nvar _wither = witherDefault(Traversable, Compactable);\nvar _wilt = wiltDefault(Traversable, Compactable);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Witherable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * Filter values inside a context.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as T from 'fp-ts/Task'\n *\n * const filterE = RA.filterE(T.ApplicativePar)\n * async function test() {\n *   assert.deepStrictEqual(\n *     await pipe(\n *       [-1, 2, 3],\n *       filterE((n) => T.of(n > 0))\n *     )(),\n *     [2, 3]\n *   )\n * }\n * test()\n *\n * @since 2.11.0\n */\nexport var filterE = \n/*#__PURE__*/\nfilterE_(Witherable);\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var fromEitherK = \n/*#__PURE__*/\nfromEitherK_(FromEither);\n// -------------------------------------------------------------------------------------\n// unsafe\n// -------------------------------------------------------------------------------------\n/**\n * @category unsafe\n * @since 2.5.0\n */\nexport var unsafeInsertAt = RNEA.unsafeInsertAt;\n/**\n * @category unsafe\n * @since 2.5.0\n */\nexport var unsafeUpdateAt = function (i, a, as) {\n    return isNonEmpty(as) ? RNEA.unsafeUpdateAt(i, a, as) : as;\n};\n/**\n * @category unsafe\n * @since 2.5.0\n */\nexport var unsafeDeleteAt = function (i, as) {\n    var xs = as.slice();\n    xs.splice(i, 1);\n    return xs;\n};\n// -------------------------------------------------------------------------------------\n// interop\n// -------------------------------------------------------------------------------------\n/**\n * @category interop\n * @since 2.5.0\n */\nexport var toArray = function (as) { return as.slice(); };\n/**\n * @category interop\n * @since 2.5.0\n */\nexport var fromArray = function (as) { return (isEmpty(as) ? empty : as.slice()); };\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * An empty array\n *\n * @since 2.5.0\n */\nexport var empty = RNEA.empty;\n/**\n * Check if a predicate holds true for every array member.\n *\n * @example\n * import { every } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], every(isPositive)), true)\n * assert.deepStrictEqual(pipe([1, 2, -3], every(isPositive)), false)\n *\n * @since 2.9.0\n */\nexport var every = function (predicate) { return function (as) { return as.every(predicate); }; };\n/**\n * Check if a predicate holds true for any array member.\n *\n * @example\n * import { some } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(pipe([-1, -2, 3], some(isPositive)), true)\n * assert.deepStrictEqual(pipe([-1, -2, -3], some(isPositive)), false)\n *\n * @since 2.9.0\n */\nexport var some = function (predicate) { return function (as) {\n    return as.some(predicate);\n}; };\n/**\n * Alias of [`some`](#some)\n *\n * @since 2.11.0\n */\nexport var exists = some;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var Do = \n/*#__PURE__*/\nof(_.emptyRecord);\n/**\n * @since 2.8.0\n */\nexport var bindTo = \n/*#__PURE__*/\nbindTo_(Functor);\n/**\n * @since 2.8.0\n */\nexport var bind = \n/*#__PURE__*/\nbind_(Chain);\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apS = \n/*#__PURE__*/\napS_(Apply);\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n// tslint:disable: deprecation\n/**\n * Use `ReadonlyNonEmptyArray` module instead.\n *\n * @category constructors\n * @since 2.5.0\n * @deprecated\n */\nexport var range = RNEA.range;\n/**\n * Use [`prepend`](#prepend) instead.\n *\n * @category constructors\n * @since 2.5.0\n * @deprecated\n */\nexport var cons = RNEA.cons;\n/**\n * Use [`append`](#append) instead.\n *\n * @category constructors\n * @since 2.5.0\n * @deprecated\n */\nexport var snoc = RNEA.snoc;\n/**\n * Use [`prependAll`](#prependall) instead.\n *\n * @category combinators\n * @since 2.9.0\n * @deprecated\n */\nexport var prependToAll = prependAll;\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.5.0\n * @deprecated\n */\nexport var readonlyArray = {\n    URI: URI,\n    compact: compact,\n    separate: separate,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    mapWithIndex: _mapWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    alt: _alt,\n    zero: zero,\n    unfold: unfold,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    extend: _extend,\n    wither: _wither,\n    wilt: _wilt\n};\n","import { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { fromEitherK as fromEitherK_ } from './FromEither';\nimport { identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport * as NEA from './NonEmptyArray';\nimport * as RA from './ReadonlyArray';\nimport { separated } from './Separated';\nimport { filterE as filterE_, wiltDefault, witherDefault } from './Witherable';\nimport { guard as guard_ } from './Zero';\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Test whether an array is empty\n *\n * @example\n * import { isEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isEmpty([]), true)\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isEmpty = function (as) { return as.length === 0; };\n/**\n * Test whether an array is non empty narrowing down the type to `NonEmptyArray<A>`\n *\n * @category refinements\n * @since 2.0.0\n */\nexport var isNonEmpty = NEA.isNonEmpty;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Prepend an element to the front of a `Array`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { prepend } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])\n *\n * @category constructors\n * @since 2.10.0\n */\nexport var prepend = NEA.prepend;\n/**\n * Less strict version of [`prepend`](#prepend).\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var prependW = NEA.prependW;\n/**\n * Append an element to the end of a `Array`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { append } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])\n *\n * @category constructors\n * @since 2.10.0\n */\nexport var append = NEA.append;\n/**\n * Less strict version of [`append`](#append).\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var appendW = NEA.appendW;\n/**\n * Return a `Array` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { makeBy } from 'fp-ts/Array'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var makeBy = function (n, f) { return (n <= 0 ? [] : NEA.makeBy(f)(n)); };\n/**\n * Create a `Array` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { replicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var replicate = function (n, a) { return makeBy(n, function () { return a; }); };\nexport function fromPredicate(predicate) {\n    return function (a) { return (predicate(a) ? [a] : []); };\n}\n// -------------------------------------------------------------------------------------\n// natural transformations\n// -------------------------------------------------------------------------------------\n/**\n * @category natural transformations\n * @since 2.11.0\n */\nexport var fromOption = function (ma) { return (_.isNone(ma) ? [] : [ma.value]); };\n/**\n * @category natural transformations\n * @since 2.11.0\n */\nexport var fromEither = function (e) { return (_.isLeft(e) ? [] : [e.right]); };\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Less strict version of [`match`](#match).\n *\n * @category destructors\n * @since 2.11.0\n */\nexport var matchW = function (onEmpty, onNonEmpty) { return function (as) {\n    return isNonEmpty(as) ? onNonEmpty(as) : onEmpty();\n}; };\n/**\n * Less strict version of [`match`](#match).\n *\n * @category destructors\n * @since 2.11.0\n */\nexport var match = matchW;\n/**\n * Less strict version of [`matchLeft`](#matchleft).\n *\n * @category destructors\n * @since 2.11.0\n */\nexport var matchLeftW = function (onEmpty, onNonEmpty) { return function (as) { return (isNonEmpty(as) ? onNonEmpty(NEA.head(as), NEA.tail(as)) : onEmpty()); }; };\n/**\n * Break an `Array` into its first element and remaining elements.\n *\n * @example\n * import { matchLeft } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))\n * assert.strictEqual(len([1, 2, 3]), 3)\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var matchLeft = matchLeftW;\n/**\n * Alias of [`matchLeft`](#matchleft).\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var foldLeft = matchLeft;\n/**\n * Less strict version of [`matchRight`](#matchright).\n *\n * @category destructors\n * @since 2.11.0\n */\nexport var matchRightW = function (onEmpty, onNonEmpty) { return function (as) { return (isNonEmpty(as) ? onNonEmpty(NEA.init(as), NEA.last(as)) : onEmpty()); }; };\n/**\n * Break an `Array` into its initial elements and the last element.\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var matchRight = matchRightW;\n/**\n * Alias of [`matchRight`](#matchright).\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var foldRight = matchRight;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.7.0\n */\nexport var chainWithIndex = function (f) { return function (as) {\n    var out = [];\n    for (var i = 0; i < as.length; i++) {\n        out.push.apply(out, f(i, as[i]));\n    }\n    return out;\n}; };\n/**\n * Same as `reduce` but it carries over the intermediate steps\n *\n * @example\n * import { scanLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var scanLeft = function (b, f) { return function (as) {\n    var len = as.length;\n    var out = new Array(len + 1);\n    out[0] = b;\n    for (var i = 0; i < len; i++) {\n        out[i + 1] = f(out[i], as[i]);\n    }\n    return out;\n}; };\n/**\n * Fold an array from the right, keeping all intermediate results instead of only the final result\n *\n * @example\n * import { scanRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var scanRight = function (b, f) { return function (as) {\n    var len = as.length;\n    var out = new Array(len + 1);\n    out[len] = b;\n    for (var i = len - 1; i >= 0; i--) {\n        out[i] = f(as[i], out[i + 1]);\n    }\n    return out;\n}; };\n/**\n * Calculate the number of elements in a `Array`.\n *\n * @since 2.10.0\n */\nexport var size = function (as) { return as.length; };\n/**\n * Test whether an array contains a particular index\n *\n * @since 2.0.0\n */\nexport var isOutOfBound = NEA.isOutOfBound;\n// TODO: remove non-curried overloading in v3\n/**\n * This function provides a safe way to read a value at a particular index from an array\n *\n * @example\n * import { lookup } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(1)), some(2))\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(3)), none)\n *\n * @since 2.0.0\n */\nexport var lookup = RA.lookup;\n/**\n * Get the first element in an array, or `None` if the array is empty\n *\n * @example\n * import { head } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(head([1, 2, 3]), some(1))\n * assert.deepStrictEqual(head([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var head = RA.head;\n/**\n * Get the last element in an array, or `None` if the array is empty\n *\n * @example\n * import { last } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(last([1, 2, 3]), some(3))\n * assert.deepStrictEqual(last([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var last = RA.last;\n/**\n * Get all but the first element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { tail } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(tail([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var tail = function (as) { return (isNonEmpty(as) ? _.some(NEA.tail(as)) : _.none); };\n/**\n * Get all but the last element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { init } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))\n * assert.deepStrictEqual(init([]), none)\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var init = function (as) { return (isNonEmpty(as) ? _.some(NEA.init(as)) : _.none); };\n/**\n * Keep only a max number of elements from the start of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { takeLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeLeft(2)([1, 2, 3]), [1, 2])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var takeLeft = function (n) { return function (as) { return (isOutOfBound(n, as) ? copy(as) : as.slice(0, n)); }; };\n/**\n * Keep only a max number of elements from the end of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { takeRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeRight(2)([1, 2, 3, 4, 5]), [4, 5])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var takeRight = function (n) { return function (as) {\n    return isOutOfBound(n, as) ? copy(as) : n === 0 ? [] : as.slice(-n);\n}; };\nexport function takeLeftWhile(predicate) {\n    return function (as) {\n        var out = [];\n        for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n            var a = as_1[_i];\n            if (!predicate(a)) {\n                break;\n            }\n            out.push(a);\n        }\n        return out;\n    };\n}\nvar spanLeftIndex = function (as, predicate) {\n    var l = as.length;\n    var i = 0;\n    for (; i < l; i++) {\n        if (!predicate(as[i])) {\n            break;\n        }\n    }\n    return i;\n};\nexport function spanLeft(predicate) {\n    return function (as) {\n        var _a = splitAt(spanLeftIndex(as, predicate))(as), init = _a[0], rest = _a[1];\n        return { init: init, rest: rest };\n    };\n}\n/**\n * Drop a max number of elements from the start of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { dropLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropLeft(2)([1, 2, 3]), [3])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var dropLeft = function (n) { return function (as) {\n    return n <= 0 || isEmpty(as) ? copy(as) : n >= as.length ? [] : as.slice(n, as.length);\n}; };\n/**\n * Drop a max number of elements from the end of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { dropRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropRight(2)([1, 2, 3, 4, 5]), [1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var dropRight = function (n) { return function (as) {\n    return n <= 0 || isEmpty(as) ? copy(as) : n >= as.length ? [] : as.slice(0, as.length - n);\n}; };\nexport function dropLeftWhile(predicate) {\n    return function (as) { return as.slice(spanLeftIndex(as, predicate)); };\n}\n/**\n * Find the first index for which a predicate holds\n *\n * @example\n * import { findIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)\n *\n * @since 2.0.0\n */\nexport var findIndex = RA.findIndex;\nexport function findFirst(predicate) {\n    return RA.findFirst(predicate);\n}\n/**\n * Find the first element returned by an option based selector function\n *\n * @example\n * import { findFirstMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age?: number\n * }\n *\n * const persons: Array<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the first person that has an age\n * assert.deepStrictEqual(findFirstMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Mary'))\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var findFirstMap = RA.findFirstMap;\nexport function findLast(predicate) {\n    return RA.findLast(predicate);\n}\n/**\n * Find the last element returned by an option based selector function\n *\n * @example\n * import { findLastMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age?: number\n * }\n *\n * const persons: Array<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the last person that has an age\n * assert.deepStrictEqual(findLastMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Joey'))\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var findLastMap = RA.findLastMap;\n/**\n * Returns the index of the last element of the list which matches the predicate\n *\n * @example\n * import { findLastIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface X {\n *   readonly a: number\n *   readonly b: number\n * }\n * const xs: Array<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)\n *\n *\n * @since 2.0.0\n */\nexport var findLastIndex = RA.findLastIndex;\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var copy = function (as) { return as.slice(); };\n/**\n * Insert an element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { insertAt } from 'fp-ts/Array'\n * import { some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))\n *\n * @since 2.0.0\n */\nexport var insertAt = function (i, a) { return function (as) {\n    return i < 0 || i > as.length ? _.none : _.some(unsafeInsertAt(i, a, as));\n}; };\n/**\n * Change the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { updateAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))\n * assert.deepStrictEqual(updateAt(1, 1)([]), none)\n *\n * @since 2.0.0\n */\nexport var updateAt = function (i, a) { return modifyAt(i, function () { return a; }); };\n/**\n * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { deleteAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(deleteAt(1)([]), none)\n *\n * @since 2.0.0\n */\nexport var deleteAt = function (i) { return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeDeleteAt(i, as));\n}; };\n/**\n * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out\n * of bounds\n *\n * @example\n * import { modifyAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * const double = (x: number): number => x * 2\n * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))\n * assert.deepStrictEqual(modifyAt(1, double)([]), none)\n *\n * @since 2.0.0\n */\nexport var modifyAt = function (i, f) { return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n}; };\n/**\n * Reverse an array, creating a new array\n *\n * @example\n * import { reverse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var reverse = function (as) { return (isEmpty(as) ? [] : as.slice().reverse()); };\n/**\n * Extracts from an array of `Either` all the `Right` elements. All the `Right` elements are extracted in order\n *\n * @example\n * import { rights } from 'fp-ts/Array'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var rights = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Right') {\n            r.push(a.right);\n        }\n    }\n    return r;\n};\n/**\n * Extracts from an array of `Either` all the `Left` elements. All the `Left` elements are extracted in order\n *\n * @example\n * import { lefts } from 'fp-ts/Array'\n * import { left, right } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var lefts = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Left') {\n            r.push(a.left);\n        }\n    }\n    return r;\n};\n/**\n * Sort the elements of an array in increasing order, creating a new array\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var sort = function (O) { return function (as) {\n    return as.length <= 1 ? copy(as) : as.slice().sort(O.compare);\n}; };\n/**\n * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one\n * input array is short, excess elements of the longer array are discarded.\n *\n * @example\n * import { zipWith } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var zipWith = function (fa, fb, f) {\n    var fc = [];\n    var len = Math.min(fa.length, fb.length);\n    for (var i = 0; i < len; i++) {\n        fc[i] = f(fa[i], fb[i]);\n    }\n    return fc;\n};\nexport function zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return zipWith(as, bs, function (a, b) { return [a, b]; });\n}\n/**\n * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays\n *\n * @example\n * import { unzip } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\nexport var unzip = function (as) {\n    var fa = [];\n    var fb = [];\n    for (var i = 0; i < as.length; i++) {\n        fa[i] = as[i][0];\n        fb[i] = as[i][1];\n    }\n    return [fa, fb];\n};\n/**\n * Prepend an element to every member of an array\n *\n * @example\n * import { prependAll } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var prependAll = function (middle) {\n    var f = NEA.prependAll(middle);\n    return function (as) { return (isNonEmpty(as) ? f(as) : []); };\n};\n/**\n * Places an element in between members of an array\n *\n * @example\n * import { intersperse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.9.0\n */\nexport var intersperse = function (middle) {\n    var f = NEA.intersperse(middle);\n    return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };\n};\n/**\n * Rotate a `Array` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var rotate = function (n) {\n    var f = NEA.rotate(n);\n    return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };\n};\n// TODO: remove non-curried overloading in v3\n/**\n * Test if a value is a member of an array. Takes a `Eq<A>` as a single\n * argument which returns the function to use to search for a value of type `A` in\n * an array of type `Array<A>`.\n *\n * @example\n * import { elem } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(2)), true)\n * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(0)), false)\n *\n * @since 2.0.0\n */\nexport var elem = RA.elem;\n/**\n * Remove duplicates from an array, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var uniq = function (E) {\n    var f = NEA.uniq(E);\n    return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };\n};\n/**\n * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import { sortBy } from 'fp-ts/Array'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age: number\n * }\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = sortBy([byName, byAge])\n *\n * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var sortBy = function (ords) {\n    var f = NEA.sortBy(ords);\n    return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };\n};\n/**\n * A useful recursion pattern for processing an array to produce a new array, often used for \"chopping\" up the input\n * array. Typically chop is called with some function that will consume an initial prefix of the array and produce a\n * value and the rest of the array.\n *\n * @example\n * import { Eq } from 'fp-ts/Eq'\n * import * as A from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * const group = <A>(S: Eq<A>): ((as: Array<A>) => Array<Array<A>>) => {\n *   return A.chop(as => {\n *     const { init, rest } = pipe(as, A.spanLeft((a: A) => S.equals(a, as[0])))\n *     return [init, rest]\n *   })\n * }\n * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chop = function (f) {\n    var g = NEA.chop(f);\n    return function (as) { return (isNonEmpty(as) ? g(as) : []); };\n};\n/**\n * Splits an `Array` into two pieces, the first piece has max `n` elements.\n *\n * @example\n * import { splitAt } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var splitAt = function (n) { return function (as) {\n    return n >= 1 && isNonEmpty(as) ? NEA.splitAt(n)(as) : isEmpty(as) ? [copy(as), []] : [[], copy(as)];\n}; };\n/**\n * Splits an array into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the array. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `xs`.\n *\n * @example\n * import { chunksOf } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chunksOf = function (n) {\n    var f = NEA.chunksOf(n);\n    return function (as) { return (isNonEmpty(as) ? f(as) : []); };\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var fromOptionK = function (f) { return function () {\n    var a = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        a[_i] = arguments[_i];\n    }\n    return fromOption(f.apply(void 0, a));\n}; };\nexport function comprehension(input, f, g) {\n    if (g === void 0) { g = function () { return true; }; }\n    var go = function (scope, input) {\n        return isNonEmpty(input)\n            ? pipe(NEA.head(input), chain(function (x) { return go(pipe(scope, append(x)), NEA.tail(input)); }))\n            : g.apply(void 0, scope) ? [f.apply(void 0, scope)]\n                : [];\n    };\n    return go([], input);\n}\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var concatW = function (second) { return function (first) {\n    return isEmpty(first) ? copy(second) : isEmpty(second) ? copy(first) : first.concat(second);\n}; };\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var concat = concatW;\nexport function union(E) {\n    var unionE = NEA.union(E);\n    return function (first, second) {\n        if (second === undefined) {\n            var unionE_1 = union(E);\n            return function (second) { return unionE_1(second, first); };\n        }\n        return isNonEmpty(first) && isNonEmpty(second)\n            ? unionE(second)(first)\n            : isNonEmpty(first)\n                ? copy(first)\n                : copy(second);\n    };\n}\nexport function intersection(E) {\n    var elemE = elem(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var intersectionE_1 = intersection(E);\n            return function (ys) { return intersectionE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return elemE(a, ys); });\n    };\n}\nexport function difference(E) {\n    var elemE = elem(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var differenceE_1 = difference(E);\n            return function (ys) { return differenceE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return !elemE(a, ys); });\n    };\n}\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _mapWithIndex = function (fa, f) { return pipe(fa, mapWithIndex(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\nvar _chain = function (ma, f) { return pipe(ma, chain(f)); };\n/* istanbul ignore next */\nvar _filter = function (fa, predicate) { return pipe(fa, filter(predicate)); };\n/* istanbul ignore next */\nvar _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\n/* istanbul ignore next */\nvar _partition = function (fa, predicate) {\n    return pipe(fa, partition(predicate));\n};\n/* istanbul ignore next */\nvar _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\n/* istanbul ignore next */\nvar _partitionWithIndex = function (fa, predicateWithIndex) { return pipe(fa, partitionWithIndex(predicateWithIndex)); };\n/* istanbul ignore next */\nvar _partitionMapWithIndex = function (fa, f) { return pipe(fa, partitionMapWithIndex(f)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\n/* istanbul ignore next */\nvar _reduceWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = foldMapWithIndex(M);\n    return function (fa, f) { return pipe(fa, foldMapWithIndexM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceRightWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _filterMapWithIndex = function (fa, f) { return pipe(fa, filterMapWithIndex(f)); };\n/* istanbul ignore next */\nvar _filterWithIndex = function (fa, predicateWithIndex) { return pipe(fa, filterWithIndex(predicateWithIndex)); };\n/* istanbul ignore next */\nvar _extend = function (fa, f) { return pipe(fa, extend(f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (ta, f) { return pipe(ta, traverseWithIndexF(f)); };\n};\nvar _chainRecDepthFirst = RA._chainRecDepthFirst;\nvar _chainRecBreadthFirst = RA._chainRecBreadthFirst;\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * @category Pointed\n * @since 2.0.0\n */\nexport var of = NEA.of;\n/**\n * @category Zero\n * @since 2.7.0\n */\nexport var zero = function () { return []; };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) { return fa.map(function (a) { return f(a); }); }; };\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nexport var ap = function (fa) { return chain(function (f) { return pipe(fa, map(f)); }); };\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nexport var chain = function (f) { return function (ma) {\n    return pipe(ma, chainWithIndex(function (_, a) { return f(a); }));\n}; };\n/**\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var flatten = \n/*#__PURE__*/\nchain(identity);\n/**\n * @category FunctorWithIndex\n * @since 2.0.0\n */\nexport var mapWithIndex = function (f) { return function (fa) {\n    return fa.map(function (a, i) { return f(i, a); });\n}; };\n/**\n * @category FilterableWithIndex\n * @since 2.0.0\n */\nexport var filterMapWithIndex = function (f) { return function (fa) {\n    var out = [];\n    for (var i = 0; i < fa.length; i++) {\n        var optionB = f(i, fa[i]);\n        if (_.isSome(optionB)) {\n            out.push(optionB.value);\n        }\n    }\n    return out;\n}; };\n/**\n * @category Filterable\n * @since 2.0.0\n */\nexport var filterMap = function (f) {\n    return filterMapWithIndex(function (_, a) { return f(a); });\n};\n/**\n * @category Compactable\n * @since 2.0.0\n */\nexport var compact = \n/*#__PURE__*/\nfilterMap(identity);\n/**\n * @category Compactable\n * @since 2.0.0\n */\nexport var separate = function (fa) {\n    var left = [];\n    var right = [];\n    for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n        var e = fa_1[_i];\n        if (e._tag === 'Left') {\n            left.push(e.left);\n        }\n        else {\n            right.push(e.right);\n        }\n    }\n    return separated(left, right);\n};\n/**\n * @category Filterable\n * @since 2.0.0\n */\nexport var filter = function (predicate) { return function (as) { return as.filter(predicate); }; };\n/**\n * @category Filterable\n * @since 2.0.0\n */\nexport var partition = function (predicate) {\n    return partitionWithIndex(function (_, a) { return predicate(a); });\n};\n/**\n * @category FilterableWithIndex\n * @since 2.0.0\n */\nexport var partitionWithIndex = function (predicateWithIndex) { return function (as) {\n    var left = [];\n    var right = [];\n    for (var i = 0; i < as.length; i++) {\n        var b = as[i];\n        if (predicateWithIndex(i, b)) {\n            right.push(b);\n        }\n        else {\n            left.push(b);\n        }\n    }\n    return separated(left, right);\n}; };\n/**\n * @category Filterable\n * @since 2.0.0\n */\nexport var partitionMap = function (f) { return partitionMapWithIndex(function (_, a) { return f(a); }); };\n/**\n * @category FilterableWithIndex\n * @since 2.0.0\n */\nexport var partitionMapWithIndex = function (f) { return function (fa) {\n    var left = [];\n    var right = [];\n    for (var i = 0; i < fa.length; i++) {\n        var e = f(i, fa[i]);\n        if (e._tag === 'Left') {\n            left.push(e.left);\n        }\n        else {\n            right.push(e.right);\n        }\n    }\n    return separated(left, right);\n}; };\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nexport var altW = function (that) { return function (fa) { return fa.concat(that()); }; };\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * @category FilterableWithIndex\n * @since 2.0.0\n */\nexport var filterWithIndex = function (predicateWithIndex) { return function (as) {\n    return as.filter(function (b, i) { return predicateWithIndex(i, b); });\n}; };\n/**\n * @category Extend\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) {\n    return wa.map(function (_, i) { return f(wa.slice(i)); });\n}; };\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var duplicate = \n/*#__PURE__*/\nextend(identity);\n/**\n * @category Foldable\n * @since 2.0.0\n */\nexport var foldMap = RA.foldMap;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\nexport var foldMapWithIndex = RA.foldMapWithIndex;\n/**\n * @category Foldable\n * @since 2.0.0\n */\nexport var reduce = RA.reduce;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\nexport var reduceWithIndex = RA.reduceWithIndex;\n/**\n * @category Foldable\n * @since 2.0.0\n */\nexport var reduceRight = RA.reduceRight;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\nexport var reduceRightWithIndex = RA.reduceRightWithIndex;\n/**\n * @category Traversable\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\n/**\n * @category Traversable\n * @since 2.6.3\n */\nexport var sequence = function (F) { return function (ta) {\n    return _reduce(ta, F.of(zero()), function (fas, fa) {\n        return F.ap(F.map(fas, function (as) { return function (a) { return pipe(as, append(a)); }; }), fa);\n    });\n}; };\n/**\n * @category TraversableWithIndex\n * @since 2.6.3\n */\nexport var traverseWithIndex = function (F) { return function (f) {\n    return reduceWithIndex(F.of(zero()), function (i, fbs, a) {\n        return F.ap(F.map(fbs, function (bs) { return function (b) { return pipe(bs, append(b)); }; }), f(i, a));\n    });\n}; };\n/**\n * @category Witherable\n * @since 2.6.5\n */\nexport var wither = function (F) {\n    var _witherF = _wither(F);\n    return function (f) { return function (fa) { return _witherF(fa, f); }; };\n};\n/**\n * @category Witherable\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n    var _wiltF = _wilt(F);\n    return function (f) { return function (fa) { return _wiltF(fa, f); }; };\n};\n/**\n * Creates an `Array` from the results of `f(b)`, where `b` is an initial value.\n * `unfold` stops when `f` returns `Option.none`.\n * @example\n * import { unfold } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   unfold(5, (n) => (n > 0 ? some([n, n - 1]) : none)),\n *   [5, 4, 3, 2, 1]\n * )\n *\n * @category Unfoldable\n * @since 2.6.6\n */\nexport var unfold = function (b, f) {\n    var out = [];\n    var bb = b;\n    while (true) {\n        var mt = f(bb);\n        if (_.isSome(mt)) {\n            var _a = mt.value, a = _a[0], b_1 = _a[1];\n            out.push(a);\n            bb = b_1;\n        }\n        else {\n            break;\n        }\n    }\n    return out;\n};\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var URI = 'Array';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = RA.getShow;\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getSemigroup = function () { return ({\n    concat: function (first, second) { return first.concat(second); }\n}); };\n/**\n * Returns a `Monoid` for `Array<A>`\n *\n * @example\n * import { getMonoid } from 'fp-ts/Array'\n *\n * const M = getMonoid<number>()\n * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getMonoid = function () { return ({\n    concat: getSemigroup().concat,\n    empty: []\n}); };\n/**\n * Derives an `Eq` over the `Array` of a given element type from the `Eq` of that type. The derived `Eq` defines two\n * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of\n * different lengths, the result is non equality.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { getEq } from 'fp-ts/Array'\n *\n * const E = getEq(S.Eq)\n * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)\n * assert.strictEqual(E.equals(['a'], []), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RA.getEq;\n/**\n * Derives an `Ord` over the `Array` of a given element type from the `Ord` of that type. The ordering between two such\n * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in\n * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have\n * the same length, the result is equality.\n *\n * @example\n * import { getOrd } from 'fp-ts/Array'\n * import * as S from 'fp-ts/string'\n *\n * const O = getOrd(S.Ord)\n * assert.strictEqual(O.compare(['b'], ['a']), 1)\n * assert.strictEqual(O.compare(['a'], ['a']), 0)\n * assert.strictEqual(O.compare(['a'], ['b']), -1)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getOrd = RA.getOrd;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E) {\n    var unionE = union(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (E) { return ({\n    concat: getUnionSemigroup(E).concat,\n    empty: []\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (E) {\n    var intersectionE = intersection(E);\n    return {\n        concat: function (first, second) { return intersectionE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function (E) {\n    var differenceE = difference(E);\n    return {\n        concat: function (first, second) { return differenceE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var apFirst = \n/*#__PURE__*/\napFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var apSecond = \n/*#__PURE__*/\napSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chainFirst = \n/*#__PURE__*/\nchainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Unfoldable = {\n    URI: URI,\n    unfold: unfold\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var Zero = {\n    URI: URI,\n    zero: zero\n};\n/**\n * @category constructors\n * @since 2.11.0\n */\nexport var guard = \n/*#__PURE__*/\nguard_(Zero, Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alternative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    alt: _alt,\n    zero: zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FilterableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverse: _traverse,\n    sequence: sequence,\n    traverseWithIndex: _traverseWithIndex\n};\nvar _wither = witherDefault(Traversable, Compactable);\nvar _wilt = wiltDefault(Traversable, Compactable);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Witherable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * @category ChainRec\n * @since 2.11.0\n */\nexport var chainRecDepthFirst = RA.chainRecDepthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var ChainRecDepthFirst = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain,\n    chainRec: _chainRecDepthFirst\n};\n/**\n * @category ChainRec\n * @since 2.11.0\n */\nexport var chainRecBreadthFirst = RA.chainRecBreadthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var ChainRecBreadthFirst = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain,\n    chainRec: _chainRecBreadthFirst\n};\n/**\n * Filter values inside a context.\n *\n * @since 2.11.0\n */\nexport var filterE = \n/*#__PURE__*/\nfilterE_(Witherable);\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: fromEither\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var fromEitherK = \n/*#__PURE__*/\nfromEitherK_(FromEither);\n// -------------------------------------------------------------------------------------\n// unsafe\n// -------------------------------------------------------------------------------------\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexport var unsafeInsertAt = NEA.unsafeInsertAt;\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexport var unsafeUpdateAt = function (i, a, as) {\n    return isNonEmpty(as) ? NEA.unsafeUpdateAt(i, a, as) : [];\n};\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexport var unsafeDeleteAt = function (i, as) {\n    var xs = as.slice();\n    xs.splice(i, 1);\n    return xs;\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var every = RA.every;\n/**\n * @since 2.9.0\n */\nexport var some = function (predicate) { return function (as) { return as.some(predicate); }; };\n/**\n * Alias of [`some`](#some)\n *\n * @since 2.11.0\n */\nexport var exists = some;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var Do = \n/*#__PURE__*/\nof(_.emptyRecord);\n/**\n * @since 2.8.0\n */\nexport var bindTo = \n/*#__PURE__*/\nbindTo_(Functor);\n/**\n * @since 2.8.0\n */\nexport var bind = \n/*#__PURE__*/\nbind_(Chain);\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apS = \n/*#__PURE__*/\napS_(Apply);\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n// tslint:disable: deprecation\n/**\n * Use `NonEmptyArray` module instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexport var range = NEA.range;\n/**\n * Use a new `[]` instead.\n *\n * @since 2.0.0\n * @deprecated\n */\nexport var empty = [];\n/**\n * Use `prepend` instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexport var cons = NEA.cons;\n/**\n * Use `append` instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexport var snoc = NEA.snoc;\n/**\n * Use `prependAll` instead\n *\n * @category combinators\n * @since 2.9.0\n * @deprecated\n */\nexport var prependToAll = prependAll;\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var array = {\n    URI: URI,\n    compact: compact,\n    separate: separate,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    mapWithIndex: _mapWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    alt: _alt,\n    zero: zero,\n    unfold: unfold,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    extend: _extend,\n    wither: _wither,\n    wilt: _wilt\n};\n","var __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { getMonoid } from './Ord';\nimport * as RNEA from './ReadonlyNonEmptyArray';\n// -------------------------------------------------------------------------------------\n// internal\n// -------------------------------------------------------------------------------------\n/**\n * @internal\n */\nexport var isNonEmpty = function (as) { return as.length > 0; };\n/**\n * @internal\n */\nexport var isOutOfBound = function (i, as) { return i < 0 || i >= as.length; };\n/**\n * @internal\n */\nexport var prependW = function (head) { return function (tail) { return __spreadArray([head], tail); }; };\n/**\n * @internal\n */\nexport var prepend = prependW;\n/**\n * @internal\n */\nexport var appendW = function (end) { return function (init) { return __spreadArray(__spreadArray([], init), [end]); }; };\n/**\n * @internal\n */\nexport var append = appendW;\n/**\n * @internal\n */\nexport var unsafeInsertAt = function (i, a, as) {\n    if (isNonEmpty(as)) {\n        var xs = fromReadonlyNonEmptyArray(as);\n        xs.splice(i, 0, a);\n        return xs;\n    }\n    return [a];\n};\n/**\n * @internal\n */\nexport var unsafeUpdateAt = function (i, a, as) {\n    var xs = fromReadonlyNonEmptyArray(as);\n    xs[i] = a;\n    return xs;\n};\n/**\n * Remove duplicates from a `NonEmptyArray`, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/NonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var uniq = function (E) { return function (as) {\n    if (as.length === 1) {\n        return copy(as);\n    }\n    var out = [head(as)];\n    var rest = tail(as);\n    var _loop_1 = function (a) {\n        if (out.every(function (o) { return !E.equals(o, a); })) {\n            out.push(a);\n        }\n    };\n    for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {\n        var a = rest_1[_i];\n        _loop_1(a);\n    }\n    return out;\n}; };\n/**\n * Sort the elements of a `NonEmptyArray` in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import * as NEA from 'fp-ts/NonEmptyArray'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n *\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n *\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = NEA.sortBy([byName, byAge])\n *\n * const persons: NEA.NonEmptyArray<Person> = [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 },\n *   { name: 'b', age: 2 }\n * ]\n *\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var sortBy = function (ords) {\n    if (isNonEmpty(ords)) {\n        var M = getMonoid();\n        return sort(ords.reduce(M.concat, M.empty));\n    }\n    return copy;\n};\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var union = function (E) {\n    var uniqE = uniq(E);\n    return function (second) { return function (first) { return uniqE(pipe(first, concat(second))); }; };\n};\n/**\n * Rotate a `NonEmptyArray` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n * assert.deepStrictEqual(rotate(-2)([1, 2, 3, 4, 5]), [3, 4, 5, 1, 2])\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var rotate = function (n) { return function (as) {\n    var len = as.length;\n    var m = Math.round(n) % len;\n    if (isOutOfBound(Math.abs(m), as) || m === 0) {\n        return copy(as);\n    }\n    if (m < 0) {\n        var _a = splitAt(-m)(as), f = _a[0], s = _a[1];\n        return pipe(s, concat(f));\n    }\n    else {\n        return rotate(m - len)(as);\n    }\n}; };\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.10.0\n */\nexport var fromReadonlyNonEmptyArray = _.fromReadonlyNonEmptyArray;\n/**\n * Builds a `NonEmptyArray` from an `Array` returning `none` if `as` is an empty array\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var fromArray = function (as) { return (isNonEmpty(as) ? _.some(as) : _.none); };\n/**\n * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { makeBy } from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(pipe(5, makeBy(double)), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var makeBy = function (f) { return function (n) {\n    var j = Math.max(0, Math.floor(n));\n    var out = [f(0)];\n    for (var i = 1; i < j; i++) {\n        out.push(f(i));\n    }\n    return out;\n}; };\n/**\n * Create a `NonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { replicate } from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(3, replicate('a')), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var replicate = function (a) { return makeBy(function () { return a; }); };\n/**\n * Create a `NonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])\n *\n * @category constructors\n * @since 2.11.0\n */\nexport var range = function (start, end) {\n    return start <= end ? makeBy(function (i) { return start + i; })(end - start + 1) : [start];\n};\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Return the tuple of the `head` and the `tail`.\n *\n * @example\n * import { unprepend } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(unprepend([1, 2, 3]), [1, [2, 3]])\n *\n * @category destructors\n * @since 2.9.0\n */\nexport var unprepend = function (as) { return [head(as), tail(as)]; };\n/**\n * Return the tuple of the `init` and the `last`.\n *\n * @example\n * import { unappend } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(unappend([1, 2, 3, 4]), [[1, 2, 3], 4])\n *\n * @category destructors\n * @since 2.9.0\n */\nexport var unappend = function (as) { return [init(as), last(as)]; };\nexport function concatW(second) {\n    return function (first) { return first.concat(second); };\n}\nexport function concat(x, y) {\n    return y ? x.concat(y) : function (y) { return y.concat(x); };\n}\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var reverse = function (as) { return __spreadArray([last(as)], as.slice(0, -1).reverse()); };\nexport function group(E) {\n    return function (as) {\n        var len = as.length;\n        if (len === 0) {\n            return [];\n        }\n        var out = [];\n        var head = as[0];\n        var nea = [head];\n        for (var i = 1; i < len; i++) {\n            var a = as[i];\n            if (E.equals(a, head)) {\n                nea.push(a);\n            }\n            else {\n                out.push(nea);\n                head = a;\n                nea = [head];\n            }\n        }\n        out.push(nea);\n        return out;\n    };\n}\n/**\n * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { groupBy } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['a', 'b', 'ab']), {\n *   '1': ['a', 'b'],\n *   '2': ['ab']\n * })\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var groupBy = function (f) { return function (as) {\n    var out = {};\n    for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n        var a = as_1[_i];\n        var k = f(a);\n        if (out.hasOwnProperty(k)) {\n            out[k].push(a);\n        }\n        else {\n            out[k] = [a];\n        }\n    }\n    return out;\n}; };\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var sort = function (O) { return function (as) {\n    return as.slice().sort(O.compare);\n}; };\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var insertAt = function (i, a) { return function (as) {\n    return i < 0 || i > as.length ? _.none : _.some(unsafeInsertAt(i, a, as));\n}; };\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var updateAt = function (i, a) {\n    return modifyAt(i, function () { return a; });\n};\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var modifyAt = function (i, f) { return function (as) {\n    return isOutOfBound(i, as) ? _.none : _.some(unsafeUpdateAt(i, f(as[i]), as));\n}; };\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var copy = fromReadonlyNonEmptyArray;\n/**\n * @category Pointed\n * @since 2.0.0\n */\nexport var of = function (a) { return [a]; };\n/**\n * @category combinators\n * @since 2.5.1\n */\nexport var zipWith = function (as, bs, f) {\n    var cs = [f(as[0], bs[0])];\n    var len = Math.min(as.length, bs.length);\n    for (var i = 1; i < len; i++) {\n        cs[i] = f(as[i], bs[i]);\n    }\n    return cs;\n};\nexport function zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return zipWith(as, bs, function (a, b) { return [a, b]; });\n}\n/**\n * @category combinators\n * @since 2.5.1\n */\nexport var unzip = function (abs) {\n    var fa = [abs[0][0]];\n    var fb = [abs[0][1]];\n    for (var i = 1; i < abs.length; i++) {\n        fa[i] = abs[i][0];\n        fb[i] = abs[i][1];\n    }\n    return [fa, fb];\n};\n/**\n * Prepend an element to every member of an array\n *\n * @example\n * import { prependAll } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var prependAll = function (middle) { return function (as) {\n    var out = [middle, as[0]];\n    for (var i = 1; i < as.length; i++) {\n        out.push(middle, as[i]);\n    }\n    return out;\n}; };\n/**\n * Places an element in between members of an array\n *\n * @example\n * import { intersperse } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @category combinators\n * @since 2.9.0\n */\nexport var intersperse = function (middle) { return function (as) {\n    var rest = tail(as);\n    return isNonEmpty(rest) ? pipe(rest, prependAll(middle), prepend(head(as))) : copy(as);\n}; };\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var foldMapWithIndex = RNEA.foldMapWithIndex;\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport var foldMap = RNEA.foldMap;\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var chainWithIndex = function (f) { return function (as) {\n    var out = fromReadonlyNonEmptyArray(f(0, head(as)));\n    for (var i = 1; i < as.length; i++) {\n        out.push.apply(out, f(i, as[i]));\n    }\n    return out;\n}; };\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var chop = function (f) { return function (as) {\n    var _a = f(as), b = _a[0], rest = _a[1];\n    var out = [b];\n    var next = rest;\n    while (isNonEmpty(next)) {\n        var _b = f(next), b_1 = _b[0], rest_2 = _b[1];\n        out.push(b_1);\n        next = rest_2;\n    }\n    return out;\n}; };\n/**\n * Splits a `NonEmptyArray` into two pieces, the first piece has max `n` elements.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var splitAt = function (n) { return function (as) {\n    var m = Math.max(1, n);\n    return m >= as.length ? [copy(as), []] : [pipe(as.slice(1, m), prepend(head(as))), as.slice(m)];\n}; };\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var chunksOf = function (n) { return chop(splitAt(n)); };\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _mapWithIndex = function (fa, f) { return pipe(fa, mapWithIndex(f)); };\n/* istanbul ignore next */\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar _chain = function (ma, f) { return pipe(ma, chain(f)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = foldMap(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/* istanbul ignore next */\nvar _reduceWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = foldMapWithIndex(M);\n    return function (fa, f) { return pipe(fa, foldMapWithIndexM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return pipe(fa, reduceRightWithIndex(b, f));\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (ta, f) { return pipe(ta, traverseWithIndexF(f)); };\n};\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nexport var altW = function (that) { return function (as) {\n    return pipe(as, concatW(that()));\n}; };\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.6.2\n */\nexport var alt = altW;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nexport var ap = function (as) {\n    return chain(function (f) { return pipe(as, map(f)); });\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nexport var chain = function (f) {\n    return chainWithIndex(function (_, a) { return f(a); });\n};\n/**\n * @category Extend\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (as) {\n    var next = tail(as);\n    var out = [f(as)];\n    while (isNonEmpty(next)) {\n        out.push(f(next));\n        next = tail(next);\n    }\n    return out;\n}; };\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var duplicate = \n/*#__PURE__*/\nextend(identity);\n/**\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var flatten = \n/*#__PURE__*/\nchain(identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nexport var map = function (f) { return mapWithIndex(function (_, a) { return f(a); }); };\n/**\n * @category FunctorWithIndex\n * @since 2.0.0\n */\nexport var mapWithIndex = function (f) { return function (as) {\n    var out = [f(0, head(as))];\n    for (var i = 1; i < as.length; i++) {\n        out.push(f(i, as[i]));\n    }\n    return out;\n}; };\n/**\n * @category Foldable\n * @since 2.0.0\n */\nexport var reduce = RNEA.reduce;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\nexport var reduceWithIndex = RNEA.reduceWithIndex;\n/**\n * @category Foldable\n * @since 2.0.0\n */\nexport var reduceRight = RNEA.reduceRight;\n/**\n * @category FoldableWithIndex\n * @since 2.0.0\n */\nexport var reduceRightWithIndex = RNEA.reduceRightWithIndex;\n/**\n * @since 2.6.3\n */\nexport var traverse = function (F) {\n    var traverseWithIndexF = traverseWithIndex(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\n/**\n * @since 2.6.3\n */\nexport var sequence = function (F) { return traverseWithIndex(F)(function (_, a) { return a; }); };\n/**\n * @since 2.6.3\n */\nexport var traverseWithIndex = function (F) { return function (f) { return function (as) {\n    var out = F.map(f(0, head(as)), of);\n    for (var i = 1; i < as.length; i++) {\n        out = F.ap(F.map(out, function (bs) { return function (b) { return pipe(bs, append(b)); }; }), f(i, as[i]));\n    }\n    return out;\n}; }; };\n/**\n * @since 2.7.0\n */\nexport var extract = RNEA.head;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var URI = 'NonEmptyArray';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getShow = RNEA.getShow;\n/**\n * Builds a `Semigroup` instance for `NonEmptyArray`\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getSemigroup = function () { return ({\n    concat: concat\n}); };\n/**\n * @example\n * import { getEq } from 'fp-ts/NonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * const E = getEq(N.Eq)\n * assert.strictEqual(E.equals([1, 2], [1, 2]), true)\n * assert.strictEqual(E.equals([1, 2], [1, 3]), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = RNEA.getEq;\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (E) {\n    var unionE = union(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var apFirst = \n/*#__PURE__*/\napFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var apSecond = \n/*#__PURE__*/\napSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.5.0\n */\nexport var chainFirst = \n/*#__PURE__*/\nchainFirst_(Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Comonad = {\n    URI: URI,\n    map: _map,\n    extend: _extend,\n    extract: extract\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var Do = \n/*#__PURE__*/\nof(_.emptyRecord);\n/**\n * @since 2.8.0\n */\nexport var bindTo = \n/*#__PURE__*/\nbindTo_(Functor);\n/**\n * @since 2.8.0\n */\nexport var bind = \n/*#__PURE__*/\nbind_(Chain);\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apS = \n/*#__PURE__*/\napS_(Apply);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.0.0\n */\nexport var head = RNEA.head;\n/**\n * @since 2.0.0\n */\nexport var tail = function (as) { return as.slice(1); };\n/**\n * @since 2.0.0\n */\nexport var last = RNEA.last;\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { init } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])\n * assert.deepStrictEqual(init([1]), [])\n *\n * @since 2.2.0\n */\nexport var init = function (as) { return as.slice(0, -1); };\n/**\n * @since 2.0.0\n */\nexport var min = RNEA.min;\n/**\n * @since 2.0.0\n */\nexport var max = RNEA.max;\n/**\n * @since 2.10.0\n */\nexport var concatAll = function (S) { return function (as) { return as.reduce(S.concat); }; };\n/**\n * Break an `Array` into its first element and remaining elements.\n *\n * @category destructors\n * @since 2.11.0\n */\nexport var matchLeft = function (f) { return function (as) { return f(head(as), tail(as)); }; };\n/**\n * Break an `Array` into its initial elements and the last element.\n *\n * @category destructors\n * @since 2.11.0\n */\nexport var matchRight = function (f) { return function (as) {\n    return f(init(as), last(as));\n}; };\n/**\n * Apply a function to the head, creating a new `NonEmptyArray`.\n *\n * @since 2.11.0\n */\nexport var modifyHead = function (f) { return function (as) { return __spreadArray([\n    f(head(as))\n], tail(as)); }; };\n/**\n * Change the head, creating a new `NonEmptyArray`.\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var updateHead = function (a) { return modifyHead(function () { return a; }); };\n/**\n * Apply a function to the last element, creating a new `NonEmptyArray`.\n *\n * @since 2.11.0\n */\nexport var modifyLast = function (f) { return function (as) {\n    return pipe(init(as), append(f(last(as))));\n}; };\n/**\n * Change the last element, creating a new `NonEmptyArray`.\n *\n * @category combinators\n * @since 2.11.0\n */\nexport var updateLast = function (a) { return modifyLast(function () { return a; }); };\nexport function groupSort(O) {\n    var sortO = sort(O);\n    var groupO = group(O);\n    return function (as) { return (isNonEmpty(as) ? groupO(sortO(as)) : []); };\n}\nexport function filter(predicate) {\n    return filterWithIndex(function (_, a) { return predicate(a); });\n}\n/**\n * Use [`filterWithIndex`](./Array.ts.html#filterwithindex) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexport var filterWithIndex = function (predicate) { return function (as) { return fromArray(as.filter(function (a, i) { return predicate(i, a); })); }; };\n/**\n * Use [`unprepend`](#unprepend) instead.\n *\n * @category destructors\n * @since 2.9.0\n * @deprecated\n */\nexport var uncons = unprepend;\n/**\n * Use [`unappend`](#unappend) instead.\n *\n * @category destructors\n * @since 2.9.0\n * @deprecated\n */\nexport var unsnoc = unappend;\nexport function cons(head, tail) {\n    return tail === undefined ? prepend(head) : pipe(tail, prepend(head));\n}\n/**\n * Use [`append`](./Array.ts.html#append) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexport var snoc = function (init, end) { return pipe(init, append(end)); };\n/**\n * Use [`prependAll`](#prependall) instead.\n *\n * @category combinators\n * @since 2.9.0\n * @deprecated\n */\nexport var prependToAll = prependAll;\n/**\n * Use [`concatAll`](#concatall) instead.\n *\n * @since 2.5.0\n * @deprecated\n */\nexport var fold = RNEA.concatAll;\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var nonEmptyArray = {\n    URI: URI,\n    of: of,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    ap: _ap,\n    chain: _chain,\n    extend: _extend,\n    extract: extract,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    alt: _alt\n};\n","import { identity, pipe, unsafeCoerce } from './function';\nimport { flap as flap_ } from './Functor';\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport var make = unsafeCoerce;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getShow(S) {\n    return {\n        show: function (c) { return \"make(\" + S.show(c) + \")\"; }\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var getEq = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getOrd = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getBounded = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getSemigroup = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getMonoid = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getSemiring = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getRing = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getHeytingAlgebra = identity;\n/**\n * @category instances\n * @since 2.6.0\n */\nexport var getBooleanAlgebra = identity;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getApply(S) {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: function (fab, fa) { return make(S.concat(fab, fa)); }\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getApplicative(M) {\n    var A = getApply(M);\n    return {\n        URI: URI,\n        _E: undefined,\n        map: A.map,\n        ap: A.ap,\n        of: function () { return make(M.empty); }\n    };\n}\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _contramap = function (fa, f) { return pipe(fa, contramap(f)); };\n/* istanbul ignore next */\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\n/* istanbul ignore next */\nvar _bimap = function (fa, f, g) { return pipe(fa, bimap(f, g)); };\n/* istanbul ignore next */\nvar _mapLeft = function (fa, f) { return pipe(fa, mapLeft(f)); };\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * @category Contravariant\n * @since 2.0.0\n */\nexport var contramap = function () { return unsafeCoerce; };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nexport var map = function () { return unsafeCoerce; };\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.6.2\n */\nexport var bimap = function (f) { return function (fa) {\n    return make(f(fa));\n}; };\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.6.2\n */\nexport var mapLeft = function (f) { return function (fa) { return make(f(fa)); }; };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var URI = 'Const';\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Contravariant = {\n    URI: URI,\n    contramap: _contramap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var const_ = {\n    URI: URI,\n    map: _map,\n    contramap: _contramap,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n","import { getMonoid as getFM } from './function';\nimport { getMonoid as getEM } from './Endomorphism';\nimport * as _ from './internal';\nimport * as Se from './Semigroup';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Get a monoid where `concat` will return the minimum, based on the provided bounded order.\n *\n * The `empty` value is the `top` value.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as M from 'fp-ts/Monoid'\n *\n * const M1 = M.min(N.Bounded)\n *\n * assert.deepStrictEqual(M1.concat(1, 2), 1)\n *\n * @category constructors\n * @since 2.10.0\n */\nexport var min = function (B) { return ({\n    concat: Se.min(B).concat,\n    empty: B.top\n}); };\n/**\n * Get a monoid where `concat` will return the maximum, based on the provided bounded order.\n *\n * The `empty` value is the `bottom` value.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as M from 'fp-ts/Monoid'\n *\n * const M1 = M.max(N.Bounded)\n *\n * assert.deepStrictEqual(M1.concat(1, 2), 2)\n *\n * @category constructors\n * @since 2.10.0\n */\nexport var max = function (B) { return ({\n    concat: Se.max(B).concat,\n    empty: B.bottom\n}); };\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * The dual of a `Monoid`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import { reverse } from 'fp-ts/Monoid'\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(reverse(S.Monoid).concat('a', 'b'), 'ba')\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var reverse = function (M) { return ({\n    concat: Se.reverse(M).concat,\n    empty: M.empty\n}); };\n/**\n * Given a struct of monoids returns a monoid for the struct.\n *\n * @example\n * import { struct } from 'fp-ts/Monoid'\n * import * as N from 'fp-ts/number'\n *\n * interface Point {\n *   readonly x: number\n *   readonly y: number\n * }\n *\n * const M = struct<Point>({\n *   x: N.MonoidSum,\n *   y: N.MonoidSum\n * })\n *\n * assert.deepStrictEqual(M.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var struct = function (monoids) {\n    var empty = {};\n    for (var k in monoids) {\n        if (_.has.call(monoids, k)) {\n            empty[k] = monoids[k].empty;\n        }\n    }\n    return {\n        concat: Se.struct(monoids).concat,\n        empty: empty\n    };\n};\n/**\n * Given a tuple of monoids returns a monoid for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Monoid'\n * import * as B from 'fp-ts/boolean'\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/string'\n *\n * const M1 = tuple(S.Monoid, N.MonoidSum)\n * assert.deepStrictEqual(M1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const M2 = tuple(S.Monoid, N.MonoidSum, B.MonoidAll)\n * assert.deepStrictEqual(M2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var tuple = function () {\n    var monoids = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        monoids[_i] = arguments[_i];\n    }\n    return ({\n        concat: Se.tuple.apply(Se, monoids).concat,\n        empty: monoids.map(function (m) { return m.empty; })\n    });\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n * If `as` is empty, return the monoid `empty` value.\n *\n * @example\n * import { concatAll } from 'fp-ts/Monoid'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(concatAll(N.MonoidSum)([1, 2, 3]), 6)\n * assert.deepStrictEqual(concatAll(N.MonoidSum)([]), 0)\n *\n * @since 2.10.0\n */\nexport var concatAll = function (M) { return Se.concatAll(M)(M.empty); };\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n// tslint:disable: deprecation\n/**\n * Use [`Monoid`](./void.ts.html#monoid) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var monoidVoid = {\n    concat: Se.semigroupVoid.concat,\n    empty: undefined\n};\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexport var getTupleMonoid = tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexport var getStructMonoid = struct;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexport var getDualMonoid = reverse;\n/**\n * Use [`max`](#max) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexport var getJoinMonoid = max;\n/**\n * Use [`min`](#min) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexport var getMeetMonoid = min;\n/**\n * Use [`concatAll`](#concatall) instead.\n *\n * @since 2.0.0\n * @deprecated\n */\nexport var fold = concatAll;\n/**\n * Use [`MonoidAll`](./boolean.ts.html#monoidall) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var monoidAll = {\n    concat: Se.semigroupAll.concat,\n    empty: true\n};\n/**\n * Use [`MonoidAny`](./boolean.ts.html#monoidany) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var monoidAny = {\n    concat: Se.semigroupAny.concat,\n    empty: false\n};\n/**\n * Use [`getMonoid`](./function.ts.html#getmonoid) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getFunctionMonoid = getFM;\n/**\n * Use [`getEndomorphismMonoid`](./function.ts.html#getendomorphismmonoid) instead.\n *\n * **Note**. The execution order in [`getEndomorphismMonoid`](./function.ts.html#getendomorphismmonoid) is reversed.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getEndomorphismMonoid = function () { return reverse(getEM()); };\n/**\n * Use [`Monoid`](./string.ts.html#monoid) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var monoidString = {\n    concat: Se.semigroupString.concat,\n    empty: ''\n};\n/**\n * Use [`MonoidSum`](./number.ts.html#monoidsum) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var monoidSum = {\n    concat: Se.semigroupSum.concat,\n    empty: 0\n};\n/**\n * Use [`MonoidProduct`](./number.ts.html#monoidproduct) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var monoidProduct = {\n    concat: Se.semigroupProduct.concat,\n    empty: 1\n};\n","import { fromEquals } from './Eq';\nimport { flow, identity, pipe, SK } from './function';\nimport { flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { separated } from './Separated';\nimport * as S from './string';\nimport { wiltDefault, witherDefault } from './Witherable';\n// -------------------------------------------------------------------------------------\n// interop\n// -------------------------------------------------------------------------------------\n/**\n * @category interop\n * @since 2.5.0\n */\nexport var fromRecord = function (r) { return Object.assign({}, r); };\n/**\n * @category interop\n * @since 2.5.0\n */\nexport var toRecord = function (r) { return Object.assign({}, r); };\n/**\n * Calculate the number of key/value pairs in a `ReadonlyRecord`,\n *\n * @since 2.5.0\n */\nexport var size = function (r) { return Object.keys(r).length; };\n/**\n * Test whether a `ReadonlyRecord` is empty.\n *\n * @since 2.5.0\n */\nexport var isEmpty = function (r) {\n    for (var k in r) {\n        if (_.has.call(r, k)) {\n            return false;\n        }\n    }\n    return true;\n};\nvar keys_ = function (O) { return function (r) {\n    return Object.keys(r).sort(O.compare);\n}; };\n/**\n * @since 2.5.0\n */\nexport var keys = \n/*#__PURE__*/\nkeys_(S.Ord);\nexport function collect(O) {\n    if (typeof O === 'function') {\n        return collect(S.Ord)(O);\n    }\n    var keysO = keys_(O);\n    return function (f) { return function (r) {\n        var out = [];\n        for (var _i = 0, _a = keysO(r); _i < _a.length; _i++) {\n            var key = _a[_i];\n            out.push(f(key, r[key]));\n        }\n        return out;\n    }; };\n}\n/**\n * Get a sorted `ReadonlyArray` of the key/value pairs contained in a `ReadonlyRecord`.\n *\n * @since 2.5.0\n */\nexport var toReadonlyArray = \n/*#__PURE__*/\ncollect(S.Ord)(function (k, a) { return [k, a]; });\nexport function toUnfoldable(U) {\n    return function (r) {\n        var sas = toReadonlyArray(r);\n        var len = sas.length;\n        return U.unfold(0, function (b) { return (b < len ? _.some([sas[b], b + 1]) : _.none); });\n    };\n}\n/**\n * Insert or replace a key/value pair in a `ReadonlyRecord`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var upsertAt = function (k, a) { return function (r) {\n    if (_.has.call(r, k) && r[k] === a) {\n        return r;\n    }\n    var out = Object.assign({}, r);\n    out[k] = a;\n    return out;\n}; };\n/**\n * Test whether or not a key exists in a `ReadonlyRecord`.\n *\n * Note. This function is not pipeable because is a `Refinement`.\n *\n * @since 2.10.0\n */\nexport var has = function (k, r) { return _.has.call(r, k); };\nexport function deleteAt(k) {\n    return function (r) {\n        if (!_.has.call(r, k)) {\n            return r;\n        }\n        var out = Object.assign({}, r);\n        delete out[k];\n        return out;\n    };\n}\n/**\n * @since 2.5.0\n */\nexport var updateAt = function (k, a) { return function (r) {\n    if (!has(k, r)) {\n        return _.none;\n    }\n    if (r[k] === a) {\n        return _.some(r);\n    }\n    var out = Object.assign({}, r);\n    out[k] = a;\n    return _.some(out);\n}; };\n/**\n * @since 2.5.0\n */\nexport var modifyAt = function (k, f) { return function (r) {\n    if (!has(k, r)) {\n        return _.none;\n    }\n    var next = f(r[k]);\n    if (next === r[k]) {\n        return _.some(r);\n    }\n    var out = Object.assign({}, r);\n    out[k] = next;\n    return _.some(out);\n}; };\nexport function pop(k) {\n    var deleteAtk = deleteAt(k);\n    return function (r) {\n        var oa = lookup(k, r);\n        return _.isNone(oa) ? _.none : _.some([oa.value, deleteAtk(r)]);\n    };\n}\nexport function isSubrecord(E) {\n    return function (me, that) {\n        if (that === undefined) {\n            var isSubrecordE_1 = isSubrecord(E);\n            return function (that) { return isSubrecordE_1(that, me); };\n        }\n        for (var k in me) {\n            if (!_.has.call(that, k) || !E.equals(me[k], that[k])) {\n                return false;\n            }\n        }\n        return true;\n    };\n}\nexport function lookup(k, r) {\n    if (r === undefined) {\n        return function (r) { return lookup(k, r); };\n    }\n    return _.has.call(r, k) ? _.some(r[k]) : _.none;\n}\n/**\n * @since 2.5.0\n */\nexport var empty = {};\nexport function mapWithIndex(f) {\n    return function (r) {\n        var out = {};\n        for (var k in r) {\n            if (_.has.call(r, k)) {\n                out[k] = f(k, r[k]);\n            }\n        }\n        return out;\n    };\n}\nexport function map(f) {\n    return mapWithIndex(function (_, a) { return f(a); });\n}\nexport function reduceWithIndex() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 2) {\n        return reduceWithIndex(S.Ord).apply(void 0, args);\n    }\n    var keysO = keys_(args[0]);\n    return function (b, f) { return function (fa) {\n        var out = b;\n        var ks = keysO(fa);\n        var len = ks.length;\n        for (var i = 0; i < len; i++) {\n            var k = ks[i];\n            out = f(k, out, fa[k]);\n        }\n        return out;\n    }; };\n}\nexport function foldMapWithIndex(O) {\n    if ('compare' in O) {\n        var keysO_1 = keys_(O);\n        return function (M) { return function (f) { return function (fa) {\n            var out = M.empty;\n            var ks = keysO_1(fa);\n            var len = ks.length;\n            for (var i = 0; i < len; i++) {\n                var k = ks[i];\n                out = M.concat(out, f(k, fa[k]));\n            }\n            return out;\n        }; }; };\n    }\n    return foldMapWithIndex(S.Ord)(O);\n}\nexport function reduceRightWithIndex() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 2) {\n        return reduceRightWithIndex(S.Ord).apply(void 0, args);\n    }\n    var keysO = keys_(args[0]);\n    return function (b, f) { return function (fa) {\n        var out = b;\n        var ks = keysO(fa);\n        var len = ks.length;\n        for (var i = len - 1; i >= 0; i--) {\n            var k = ks[i];\n            out = f(k, fa[k], out);\n        }\n        return out;\n    }; };\n}\n/**\n * Create a `ReadonlyRecord` with one key/value pair.\n *\n * @category constructors\n * @since 2.5.0\n */\nexport var singleton = function (k, a) {\n    var _a;\n    return (_a = {}, _a[k] = a, _a);\n};\nexport function traverseWithIndex(F) {\n    var traverseWithIndexOF = _traverseWithIndex(S.Ord)(F);\n    return function (f) { return function (ta) { return traverseWithIndexOF(ta, f); }; };\n}\nexport function traverse(F) {\n    var traverseOF = _traverse(S.Ord)(F);\n    return function (f) { return function (ta) { return traverseOF(ta, f); }; };\n}\nexport function sequence(F) {\n    return _sequence(S.Ord)(F);\n}\n/**\n * @category Witherable\n * @since 2.6.5\n */\nexport var wither = function (F) {\n    var traverseF = traverse(F);\n    return function (f) { return function (fa) { return F.map(pipe(fa, traverseF(f)), compact); }; };\n};\n/**\n * @category Witherable\n * @since 2.6.5\n */\nexport var wilt = function (F) {\n    var traverseF = traverse(F);\n    return function (f) { return function (fa) { return F.map(pipe(fa, traverseF(f)), separate); }; };\n};\nexport function partitionMapWithIndex(f) {\n    return function (r) {\n        var left = {};\n        var right = {};\n        for (var k in r) {\n            if (_.has.call(r, k)) {\n                var e = f(k, r[k]);\n                switch (e._tag) {\n                    case 'Left':\n                        left[k] = e.left;\n                        break;\n                    case 'Right':\n                        right[k] = e.right;\n                        break;\n                }\n            }\n        }\n        return separated(left, right);\n    };\n}\nexport function partitionWithIndex(predicateWithIndex) {\n    return function (r) {\n        var left = {};\n        var right = {};\n        for (var k in r) {\n            if (_.has.call(r, k)) {\n                var a = r[k];\n                if (predicateWithIndex(k, a)) {\n                    right[k] = a;\n                }\n                else {\n                    left[k] = a;\n                }\n            }\n        }\n        return separated(left, right);\n    };\n}\nexport function filterMapWithIndex(f) {\n    return function (r) {\n        var out = {};\n        for (var k in r) {\n            if (_.has.call(r, k)) {\n                var ob = f(k, r[k]);\n                if (_.isSome(ob)) {\n                    out[k] = ob.value;\n                }\n            }\n        }\n        return out;\n    };\n}\nexport function filterWithIndex(predicateWithIndex) {\n    return function (fa) {\n        var out = {};\n        var changed = false;\n        for (var key in fa) {\n            if (_.has.call(fa, key)) {\n                var a = fa[key];\n                if (predicateWithIndex(key, a)) {\n                    out[key] = a;\n                }\n                else {\n                    changed = true;\n                }\n            }\n        }\n        return changed ? out : fa;\n    };\n}\nexport function fromFoldable(M, F) {\n    var fromFoldableMapM = fromFoldableMap(M, F);\n    return function (fka) { return fromFoldableMapM(fka, identity); };\n}\nexport function fromFoldableMap(M, F) {\n    return function (ta, f) {\n        return F.reduce(ta, {}, function (r, a) {\n            var _a = f(a), k = _a[0], b = _a[1];\n            r[k] = _.has.call(r, k) ? M.concat(r[k], b) : b;\n            return r;\n        });\n    };\n}\n/**\n * @since 2.5.0\n */\nexport function every(predicate) {\n    return function (r) {\n        for (var k in r) {\n            if (!predicate(r[k])) {\n                return false;\n            }\n        }\n        return true;\n    };\n}\n/**\n * @since 2.5.0\n */\nexport function some(predicate) {\n    return function (r) {\n        for (var k in r) {\n            if (predicate(r[k])) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\nexport function elem(E) {\n    return function (a, fa) {\n        if (fa === undefined) {\n            var elemE_1 = elem(E);\n            return function (fa) { return elemE_1(a, fa); };\n        }\n        for (var k in fa) {\n            if (E.equals(fa[k], a)) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var union = function (M) { return function (second) { return function (first) {\n    if (isEmpty(first)) {\n        return second;\n    }\n    if (isEmpty(second)) {\n        return first;\n    }\n    var out = {};\n    for (var k in first) {\n        if (has(k, second)) {\n            out[k] = M.concat(first[k], second[k]);\n        }\n        else {\n            out[k] = first[k];\n        }\n    }\n    for (var k in second) {\n        if (!has(k, out)) {\n            out[k] = second[k];\n        }\n    }\n    return out;\n}; }; };\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var intersection = function (M) { return function (second) { return function (first) {\n    if (isEmpty(first) || isEmpty(second)) {\n        return empty;\n    }\n    var out = {};\n    for (var k in first) {\n        if (has(k, second)) {\n            out[k] = M.concat(first[k], second[k]);\n        }\n    }\n    return out;\n}; }; };\n/**\n * @category combinators\n * @since 2.11.0\n */\nexport var difference = function (second) { return function (first) {\n    if (isEmpty(first)) {\n        return second;\n    }\n    if (isEmpty(second)) {\n        return first;\n    }\n    var out = {};\n    for (var k in first) {\n        if (!has(k, second)) {\n            out[k] = first[k];\n        }\n    }\n    for (var k in second) {\n        if (!has(k, first)) {\n            out[k] = second[k];\n        }\n    }\n    return out;\n}; };\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var _map = function (fa, f) { return pipe(fa, map(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _mapWithIndex = function (fa, f) { return pipe(fa, mapWithIndex(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _reduce = function (O) {\n    var reduceO = reduce(O);\n    return function (fa, b, f) { return pipe(fa, reduceO(b, f)); };\n};\n/** @internal */\nexport var _foldMap = function (O) { return function (M) {\n    var foldMapM = foldMap(O)(M);\n    return function (fa, f) { return pipe(fa, foldMapM(f)); };\n}; };\n/** @internal */\n/* istanbul ignore next */\nexport var _reduceRight = function (O) {\n    var reduceRightO = reduceRight(O);\n    return function (fa, b, f) { return pipe(fa, reduceRightO(b, f)); };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filter = function (fa, predicate) {\n    return pipe(fa, filter(predicate));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filterMap = function (fa, f) { return pipe(fa, filterMap(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _partition = function (fa, predicate) { return pipe(fa, partition(predicate)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _partitionMap = function (fa, f) { return pipe(fa, partitionMap(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _reduceWithIndex = function (O) {\n    var reduceWithIndexO = reduceWithIndex(O);\n    return function (fa, b, f) { return pipe(fa, reduceWithIndexO(b, f)); };\n};\n/** @internal */\nexport var _foldMapWithIndex = function (O) {\n    var foldMapWithIndexO = foldMapWithIndex(O);\n    return function (M) {\n        var foldMapWithIndexM = foldMapWithIndexO(M);\n        return function (fa, f) { return pipe(fa, foldMapWithIndexM(f)); };\n    };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _reduceRightWithIndex = function (O) {\n    var reduceRightWithIndexO = reduceRightWithIndex(O);\n    return function (fa, b, f) { return pipe(fa, reduceRightWithIndexO(b, f)); };\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _partitionMapWithIndex = function (fa, f) { return pipe(fa, partitionMapWithIndex(f)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _partitionWithIndex = function (fa, predicateWithIndex) { return pipe(fa, partitionWithIndex(predicateWithIndex)); };\n/** @internal */\n/* istanbul ignore next */\nexport var _filterMapWithIndex = function (fa, f) {\n    return pipe(fa, filterMapWithIndex(f));\n};\n/** @internal */\n/* istanbul ignore next */\nexport var _filterWithIndex = function (fa, predicateWithIndex) {\n    return pipe(fa, filterWithIndex(predicateWithIndex));\n};\n/** @internal */\nexport var _traverse = function (O) {\n    var traverseWithIndexO = _traverseWithIndex(O);\n    return function (F) {\n        var traverseWithIndexOF = traverseWithIndexO(F);\n        return function (ta, f) { return traverseWithIndexOF(ta, flow(SK, f)); };\n    };\n};\n/** @internal */\nexport var _sequence = function (O) {\n    var traverseO = _traverse(O);\n    return function (F) {\n        var traverseOF = traverseO(F);\n        return function (ta) { return traverseOF(ta, identity); };\n    };\n};\nvar _traverseWithIndex = function (O) { return function (F) {\n    var keysO = keys_(O);\n    return function (ta, f) {\n        var ks = keysO(ta);\n        if (ks.length === 0) {\n            return F.of(empty);\n        }\n        var fr = F.of({});\n        var _loop_1 = function (key) {\n            fr = F.ap(F.map(fr, function (r) { return function (b) {\n                r[key] = b;\n                return r;\n            }; }), f(key, ta[key]));\n        };\n        for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {\n            var key = ks_1[_i];\n            _loop_1(key);\n        }\n        return fr;\n    };\n}; };\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * @category Filterable\n * @since 2.5.0\n */\nexport var filter = function (predicate) {\n    return filterWithIndex(function (_, a) { return predicate(a); });\n};\n/**\n * @category Filterable\n * @since 2.5.0\n */\nexport var filterMap = function (f) { return filterMapWithIndex(function (_, a) { return f(a); }); };\n/**\n * @category Filterable\n * @since 2.5.0\n */\nexport var partition = function (predicate) {\n    return partitionWithIndex(function (_, a) { return predicate(a); });\n};\n/**\n * @category Filterable\n * @since 2.5.0\n */\nexport var partitionMap = function (f) {\n    return partitionMapWithIndex(function (_, a) { return f(a); });\n};\nexport function reduce() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 1) {\n        var reduceWithIndexO_1 = reduceWithIndex(args[0]);\n        return function (b, f) { return reduceWithIndexO_1(b, function (_, b, a) { return f(b, a); }); };\n    }\n    return reduce(S.Ord).apply(void 0, args);\n}\nexport function foldMap(O) {\n    if ('compare' in O) {\n        var foldMapWithIndexO_1 = foldMapWithIndex(O);\n        return function (M) {\n            var foldMapWithIndexM = foldMapWithIndexO_1(M);\n            return function (f) { return foldMapWithIndexM(function (_, a) { return f(a); }); };\n        };\n    }\n    return foldMap(S.Ord)(O);\n}\nexport function reduceRight() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 1) {\n        var reduceRightWithIndexO_1 = reduceRightWithIndex(args[0]);\n        return function (b, f) { return reduceRightWithIndexO_1(b, function (_, b, a) { return f(b, a); }); };\n    }\n    return reduceRight(S.Ord).apply(void 0, args);\n}\n/**\n * @category Compactable\n * @since 2.5.0\n */\nexport var compact = function (r) {\n    var out = {};\n    for (var k in r) {\n        if (_.has.call(r, k)) {\n            var oa = r[k];\n            if (_.isSome(oa)) {\n                out[k] = oa.value;\n            }\n        }\n    }\n    return out;\n};\n/**\n * @category Compactable\n * @since 2.5.0\n */\nexport var separate = function (r) {\n    var left = {};\n    var right = {};\n    for (var k in r) {\n        if (_.has.call(r, k)) {\n            var e = r[k];\n            if (_.isLeft(e)) {\n                left[k] = e.left;\n            }\n            else {\n                right[k] = e.right;\n            }\n        }\n    }\n    return separated(left, right);\n};\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.5.0\n */\nexport var URI = 'ReadonlyRecord';\nexport function getShow(O) {\n    if ('compare' in O) {\n        return function (S) { return ({\n            show: function (r) {\n                var elements = collect(O)(function (k, a) { return JSON.stringify(k) + \": \" + S.show(a); })(r).join(', ');\n                return elements === '' ? '{}' : \"{ \" + elements + \" }\";\n            }\n        }); };\n    }\n    return getShow(S.Ord)(O);\n}\nexport function getEq(E) {\n    var isSubrecordE = isSubrecord(E);\n    return fromEquals(function (x, y) { return isSubrecordE(x)(y) && isSubrecordE(y)(x); });\n}\nexport function getMonoid(S) {\n    return {\n        concat: function (first, second) {\n            if (isEmpty(first)) {\n                return second;\n            }\n            if (isEmpty(second)) {\n                return first;\n            }\n            var r = Object.assign({}, first);\n            for (var k in second) {\n                if (_.has.call(second, k)) {\n                    r[k] = _.has.call(first, k) ? S.concat(first[k], second[k]) : second[k];\n                }\n            }\n            return r;\n        },\n        empty: empty\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FunctorWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getFoldable = function (O) { return ({\n    URI: URI,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O)\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getFoldableWithIndex = function (O) { return ({\n    URI: URI,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    reduceWithIndex: _reduceWithIndex(O),\n    foldMapWithIndex: _foldMapWithIndex(O),\n    reduceRightWithIndex: _reduceRightWithIndex(O)\n}); };\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Compactable = {\n    URI: URI,\n    compact: compact,\n    separate: separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Filterable = {\n    URI: URI,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var FilterableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getTraversable = function (O) { return ({\n    URI: URI,\n    map: _map,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    traverse: _traverse(O),\n    sequence: _sequence(O)\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getTraversableWithIndex = function (O) { return ({\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce(O),\n    foldMap: _foldMap(O),\n    reduceRight: _reduceRight(O),\n    reduceWithIndex: _reduceWithIndex(O),\n    foldMapWithIndex: _foldMapWithIndex(O),\n    reduceRightWithIndex: _reduceRightWithIndex(O),\n    traverse: _traverse(O),\n    sequence: _sequence(O),\n    traverseWithIndex: _traverseWithIndex(O)\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getWitherable = function (O) {\n    var T = getTraversable(O);\n    return {\n        URI: URI,\n        map: _map,\n        reduce: _reduce(O),\n        foldMap: _foldMap(O),\n        reduceRight: _reduceRight(O),\n        traverse: T.traverse,\n        sequence: T.sequence,\n        compact: compact,\n        separate: separate,\n        filter: _filter,\n        filterMap: _filterMap,\n        partition: _partition,\n        partitionMap: _partitionMap,\n        wither: witherDefault(T, Compactable),\n        wilt: wiltDefault(T, Compactable)\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionSemigroup = function (S) {\n    var unionS = union(S);\n    return {\n        concat: function (first, second) { return unionS(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getUnionMonoid = function (S) { return ({\n    concat: getUnionSemigroup(S).concat,\n    empty: empty\n}); };\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getIntersectionSemigroup = function (S) {\n    var intersectionS = intersection(S);\n    return {\n        concat: function (first, second) { return intersectionS(second)(first); }\n    };\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexport var getDifferenceMagma = function () { return ({\n    concat: function (first, second) { return difference(second)(first); }\n}); };\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n// tslint:disable: deprecation\n/**\n * Use `getFoldable` instead.\n *\n * @category instances\n * @since 2.7.0\n * @deprecated\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce(S.Ord),\n    foldMap: _foldMap(S.Ord),\n    reduceRight: _reduceRight(S.Ord)\n};\n/**\n * Use `getFoldableWithIndex` instead.\n *\n * @category instances\n * @since 2.7.0\n * @deprecated\n */\nexport var FoldableWithIndex = {\n    URI: URI,\n    reduce: _reduce(S.Ord),\n    foldMap: _foldMap(S.Ord),\n    reduceRight: _reduceRight(S.Ord),\n    reduceWithIndex: _reduceWithIndex(S.Ord),\n    foldMapWithIndex: _foldMapWithIndex(S.Ord),\n    reduceRightWithIndex: _reduceRightWithIndex(S.Ord)\n};\n/**\n * Use `getTraversable` instead.\n *\n * @category instances\n * @since 2.7.0\n * @deprecated\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce(S.Ord),\n    foldMap: _foldMap(S.Ord),\n    reduceRight: _reduceRight(S.Ord),\n    traverse: _traverse(S.Ord),\n    sequence: sequence\n};\n/**\n * Use `getTraversableWithIndex` instead.\n *\n * @category instances\n * @since 2.7.0\n * @deprecated\n */\nexport var TraversableWithIndex = {\n    URI: URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce(S.Ord),\n    foldMap: _foldMap(S.Ord),\n    reduceRight: _reduceRight(S.Ord),\n    reduceWithIndex: _reduceWithIndex(S.Ord),\n    foldMapWithIndex: _foldMapWithIndex(S.Ord),\n    reduceRightWithIndex: _reduceRightWithIndex(S.Ord),\n    traverse: _traverse(S.Ord),\n    sequence: sequence,\n    traverseWithIndex: _traverseWithIndex(S.Ord)\n};\nvar _wither = witherDefault(Traversable, Compactable);\nvar _wilt = wiltDefault(Traversable, Compactable);\n/**\n * Use `getWitherable` instead.\n *\n * @category instances\n * @since 2.7.0\n * @deprecated\n */\nexport var Witherable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce(S.Ord),\n    foldMap: _foldMap(S.Ord),\n    reduceRight: _reduceRight(S.Ord),\n    traverse: _traverse(S.Ord),\n    sequence: sequence,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * Use [`upsertAt`](#upsertat) instead.\n *\n * @category combinators\n * @since 2.5.0\n * @deprecated\n */\nexport var insertAt = upsertAt;\nexport function hasOwnProperty(k, r) {\n    return _.has.call(r === undefined ? this : r, k);\n}\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.5.0\n * @deprecated\n */\nexport var readonlyRecord = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce(S.Ord),\n    foldMap: _foldMap(S.Ord),\n    reduceRight: _reduceRight(S.Ord),\n    traverse: _traverse(S.Ord),\n    sequence: sequence,\n    compact: compact,\n    separate: separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    mapWithIndex: _mapWithIndex,\n    reduceWithIndex: _reduceWithIndex(S.Ord),\n    foldMapWithIndex: _foldMapWithIndex(S.Ord),\n    reduceRightWithIndex: _reduceRightWithIndex(S.Ord),\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    traverseWithIndex: _traverseWithIndex(S.Ord),\n    wither: _wither,\n    wilt: _wilt\n};\n","var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport * as RA from 'fp-ts/es6/ReadonlyArray';\nimport * as RR from 'fp-ts/es6/ReadonlyRecord';\nimport { constant, flow, identity } from 'fp-ts/es6/function';\nimport * as O from 'fp-ts/es6/Option';\nimport * as E from 'fp-ts/es6/Either';\nimport { pipe } from 'fp-ts/es6/pipeable';\n// -------------------------------------------------------------------------------------\n// Iso\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var iso = function (get, reverseGet) { return ({\n    get: get,\n    reverseGet: reverseGet\n}); };\n/** @internal */\nexport var isoAsLens = function (sa) { return lens(sa.get, flow(sa.reverseGet, constant)); };\n/** @internal */\nexport var isoAsPrism = function (sa) { return prism(flow(sa.get, O.some), sa.reverseGet); };\n/** @internal */\nexport var isoAsOptional = function (sa) {\n    return optional(flow(sa.get, O.some), flow(sa.reverseGet, constant));\n};\n/** @internal */\nexport var isoAsTraversal = function (sa) {\n    return traversal(function (F) { return function (f) { return function (s) {\n        return F.map(f(sa.get(s)), function (a) { return sa.reverseGet(a); });\n    }; }; });\n};\n// -------------------------------------------------------------------------------------\n// Lens\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var lens = function (get, set) { return ({ get: get, set: set }); };\n/** @internal */\nexport var lensAsOptional = function (sa) { return optional(flow(sa.get, O.some), sa.set); };\n/** @internal */\nexport var lensAsTraversal = function (sa) {\n    return traversal(function (F) { return function (f) { return function (s) { return F.map(f(sa.get(s)), function (a) { return sa.set(a)(s); }); }; }; });\n};\n/** @internal */\nexport var lensComposeLens = function (ab) { return function (sa) {\n    return lens(function (s) { return ab.get(sa.get(s)); }, function (b) { return function (s) { return sa.set(ab.set(b)(sa.get(s)))(s); }; });\n}; };\n/** @internal */\nexport var prismComposePrism = function (ab) { return function (sa) {\n    return prism(flow(sa.getOption, O.chain(ab.getOption)), flow(ab.reverseGet, sa.reverseGet));\n}; };\n/** @internal */\nexport var lensComposePrism = function (ab) { return function (sa) {\n    return optionalComposeOptional(prismAsOptional(ab))(lensAsOptional(sa));\n}; };\n/** @internal */\nexport var lensId = function () { return lens(identity, constant); };\n/** @internal */\nexport var lensProp = function (prop) { return function (sa) {\n    return lens(function (s) { return sa.get(s)[prop]; }, function (ap) { return function (s) {\n        var _a;\n        var oa = sa.get(s);\n        if (ap === oa[prop]) {\n            return s;\n        }\n        return sa.set(Object.assign({}, oa, (_a = {}, _a[prop] = ap, _a)))(s);\n    }; });\n}; };\n/** @internal */\nexport var lensProps = function () {\n    var props = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        props[_i] = arguments[_i];\n    }\n    return function (sa) {\n        return lens(function (s) {\n            var a = sa.get(s);\n            var r = {};\n            for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {\n                var k = props_1[_i];\n                r[k] = a[k];\n            }\n            return r;\n        }, function (a) { return function (s) {\n            var oa = sa.get(s);\n            for (var _i = 0, props_2 = props; _i < props_2.length; _i++) {\n                var k = props_2[_i];\n                if (a[k] !== oa[k]) {\n                    return sa.set(Object.assign({}, oa, a))(s);\n                }\n            }\n            return s;\n        }; });\n    };\n};\n/** @internal */\nexport var lensComponent = function (prop) { return function (sa) {\n    return lens(function (s) { return sa.get(s)[prop]; }, function (ap) { return function (s) {\n        var oa = sa.get(s);\n        if (ap === oa[prop]) {\n            return s;\n        }\n        var copy = oa.slice();\n        copy[prop] = ap;\n        return sa.set(copy)(s);\n    }; });\n}; };\n/** @internal */\nexport var lensAtKey = function (key) { return function (sa) {\n    return pipe(sa, lensComposeLens(atReadonlyRecord().at(key)));\n}; };\n// -------------------------------------------------------------------------------------\n// Prism\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var prism = function (getOption, reverseGet) { return ({ getOption: getOption, reverseGet: reverseGet }); };\n/** @internal */\nexport var prismAsOptional = function (sa) { return optional(sa.getOption, function (a) { return prismSet(a)(sa); }); };\n/** @internal */\nexport var prismAsTraversal = function (sa) {\n    return traversal(function (F) { return function (f) { return function (s) {\n        return pipe(sa.getOption(s), O.fold(function () { return F.of(s); }, function (a) { return F.map(f(a), function (a) { return prismSet(a)(sa)(s); }); }));\n    }; }; });\n};\n/** @internal */\nexport var prismModifyOption = function (f) { return function (sa) { return function (s) {\n    return pipe(sa.getOption(s), O.map(function (o) {\n        var n = f(o);\n        return n === o ? s : sa.reverseGet(n);\n    }));\n}; }; };\n/** @internal */\nexport var prismModify = function (f) { return function (sa) {\n    var g = prismModifyOption(f)(sa);\n    return function (s) {\n        return pipe(g(s), O.getOrElse(function () { return s; }));\n    };\n}; };\n/** @internal */\nexport var prismSet = function (a) { return prismModify(function () { return a; }); };\n/** @internal */\nexport var prismComposeLens = function (ab) { return function (sa) {\n    return optionalComposeOptional(lensAsOptional(ab))(prismAsOptional(sa));\n}; };\n/** @internal */\nexport var prismFromNullable = function () { return prism(O.fromNullable, identity); };\n/** @internal */\nexport var prismFromPredicate = function (predicate) {\n    return prism(O.fromPredicate(predicate), identity);\n};\n/** @internal */\nexport var prismSome = function () { return prism(identity, O.some); };\n/** @internal */\nexport var prismRight = function () { return prism(O.fromEither, E.right); };\n/** @internal */\nexport var prismLeft = function () {\n    return prism(function (s) { return (E.isLeft(s) ? O.some(s.left) : O.none); }, // TODO: replace with E.getLeft in v3\n    E.left);\n};\n// -------------------------------------------------------------------------------------\n// Optional\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var optional = function (getOption, set) { return ({\n    getOption: getOption,\n    set: set\n}); };\n/** @internal */\nexport var optionalAsTraversal = function (sa) {\n    return traversal(function (F) { return function (f) { return function (s) {\n        return pipe(sa.getOption(s), O.fold(function () { return F.of(s); }, function (a) { return F.map(f(a), function (a) { return sa.set(a)(s); }); }));\n    }; }; });\n};\n/** @internal */\nexport var optionalModifyOption = function (f) { return function (optional) { return function (s) {\n    return pipe(optional.getOption(s), O.map(function (a) {\n        var n = f(a);\n        return n === a ? s : optional.set(n)(s);\n    }));\n}; }; };\n/** @internal */\nexport var optionalModify = function (f) { return function (optional) {\n    var g = optionalModifyOption(f)(optional);\n    return function (s) {\n        return pipe(g(s), O.getOrElse(function () { return s; }));\n    };\n}; };\n/** @internal */\nexport var optionalComposeOptional = function (ab) { return function (sa) {\n    return optional(flow(sa.getOption, O.chain(ab.getOption)), function (b) { return optionalModify(ab.set(b))(sa); });\n}; };\n/** @internal */\nexport var optionalIndex = function (i) { return function (sa) {\n    return pipe(sa, optionalComposeOptional(indexReadonlyArray().index(i)));\n}; };\n/** @internal */\nexport var optionalIndexNonEmpty = function (i) { return function (sa) { return pipe(sa, optionalComposeOptional(indexReadonlyNonEmptyArray().index(i))); }; };\n/** @internal */\nexport var optionalKey = function (key) { return function (sa) {\n    return pipe(sa, optionalComposeOptional(indexReadonlyRecord().index(key)));\n}; };\n/** @internal */\nexport var optionalFindFirst = function (predicate) {\n    return optional(RA.findFirst(predicate), function (a) { return function (s) {\n        return pipe(RA.findIndex(predicate)(s), O.fold(function () { return s; }, function (i) { return RA.unsafeUpdateAt(i, a, s); }));\n    }; });\n};\nvar unsafeUpdateAt = function (i, a, as) {\n    if (as[i] === a) {\n        return as;\n    }\n    else {\n        var xs = __spreadArrays([as[0]], as.slice(1));\n        xs[i] = a;\n        return xs;\n    }\n};\n/** @internal */\nexport var optionalFindFirstNonEmpty = function (predicate) {\n    return optional(RA.findFirst(predicate), function (a) { return function (as) {\n        return pipe(RA.findIndex(predicate)(as), O.fold(function () { return as; }, function (i) { return unsafeUpdateAt(i, a, as); }));\n    }; });\n};\n// -------------------------------------------------------------------------------------\n// Traversal\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var traversal = function (modifyF) { return ({\n    modifyF: modifyF\n}); };\n/** @internal */\nexport function traversalComposeTraversal(ab) {\n    return function (sa) { return traversal(function (F) { return function (f) { return sa.modifyF(F)(ab.modifyF(F)(f)); }; }); };\n}\n/** @internal */\nexport var ApplicativeIdentity = {\n    URI: 'Identity',\n    map: function (fa, f) { return f(fa); },\n    of: identity,\n    ap: \n    /* istanbul ignore next */\n    function (fab, fa) { return fab(fa); }\n};\nvar isIdentity = function (F) { return F.URI === 'Identity'; };\nexport function fromTraversable(T) {\n    return function () {\n        return traversal(function (F) {\n            // if `F` is `Identity` then `traverseF = map`\n            var traverseF = isIdentity(F)\n                ? T.map\n                : T.traverse(F);\n            return function (f) { return function (s) { return traverseF(s, f); }; };\n        });\n    };\n}\n/** @internal */\nexport function traversalTraverse(T) {\n    return traversalComposeTraversal(fromTraversable(T)());\n}\n// -------------------------------------------------------------------------------------\n// Ix\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var index = function (index) { return ({ index: index }); };\n/** @internal */\nexport var indexReadonlyArray = function () {\n    return index(function (i) {\n        return optional(function (as) { return RA.lookup(i, as); }, function (a) { return function (as) {\n            return pipe(RA.lookup(i, as), O.fold(function () { return as; }, function () { return RA.unsafeUpdateAt(i, a, as); }));\n        }; });\n    });\n};\n/** @internal */\nexport var indexReadonlyNonEmptyArray = function () {\n    return index(function (i) {\n        return optional(function (as) { return RA.lookup(i, as); }, function (a) { return function (as) {\n            return pipe(RA.lookup(i, as), O.fold(function () { return as; }, function () { return unsafeUpdateAt(i, a, as); }));\n        }; });\n    });\n};\n/** @internal */\nexport var indexReadonlyRecord = function () {\n    return index(function (k) {\n        return optional(function (r) { return RR.lookup(k, r); }, function (a) { return function (r) {\n            if (r[k] === a || O.isNone(RR.lookup(k, r))) {\n                return r;\n            }\n            return RR.insertAt(k, a)(r);\n        }; });\n    });\n};\n// -------------------------------------------------------------------------------------\n// At\n// -------------------------------------------------------------------------------------\n/** @internal */\nexport var at = function (at) { return ({ at: at }); };\n/** @internal */\nexport function atReadonlyRecord() {\n    return at(function (key) {\n        return lens(function (r) { return RR.lookup(key, r); }, O.fold(function () { return RR.deleteAt(key); }, function (a) { return RR.insertAt(key, a); }));\n    });\n}\n","import { flow, identity } from 'fp-ts/es6/function';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.3.8\n */\nexport var iso = _.iso;\n/**\n * @category constructors\n * @since 2.3.0\n */\nexport var id = function () { return iso(identity, identity); };\n// -------------------------------------------------------------------------------------\n// converters\n// -------------------------------------------------------------------------------------\n/**\n * View an `Iso` as a `Lens`.\n *\n * @category converters\n * @since 2.3.0\n */\nexport var asLens = _.isoAsLens;\n/**\n * View an `Iso` as a `Prism`.\n *\n * @category converters\n * @since 2.3.0\n */\nexport var asPrism = _.isoAsPrism;\n/**\n * View an `Iso` as a `Optional`.\n *\n * @category converters\n * @since 2.3.0\n */\nexport var asOptional = _.isoAsOptional;\n/**\n * View an `Iso` as a `Traversal`.\n *\n * @category converters\n * @since 2.3.0\n */\nexport var asTraversal = _.isoAsTraversal;\n// -------------------------------------------------------------------------------------\n// compositions\n// -------------------------------------------------------------------------------------\n/**\n * Compose an `Iso` with an `Iso`.\n *\n * @category compositions\n * @since 2.3.0\n */\nexport var compose = function (ab) { return function (sa) {\n    return iso(flow(sa.get, ab.get), flow(ab.reverseGet, sa.reverseGet));\n}; };\n/**\n * Alias of `compose`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeIso = compose;\n/**\n * Compose an `Iso` with a `Lens`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeLens = function (ab) {\n    return flow(asLens, _.lensComposeLens(ab));\n};\n/**\n * Compose an `Iso` with a `Prism`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composePrism = function (ab) {\n    return flow(asPrism, _.prismComposePrism(ab));\n};\n/**\n * Compose an `Iso` with a `Optional`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeOptional = function (ab) {\n    return flow(asOptional, _.optionalComposeOptional(ab));\n};\n/**\n * Compose an `Iso` with a `Traversal`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeTraversal = function (ab) {\n    return flow(asTraversal, _.traversalComposeTraversal(ab));\n};\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.3.0\n */\nexport var reverse = function (sa) { return iso(sa.reverseGet, sa.get); };\n/**\n * @category combinators\n * @since 2.3.0\n */\nexport var modify = function (f) { return function (sa) { return function (s) { return sa.reverseGet(f(sa.get(s))); }; }; };\nexport function modifyF(F) {\n    return function (f) { return function (sa) { return function (s) { return pipe(sa.get(s), f, function (fa) { return F.map(fa, sa.reverseGet); }); }; }; };\n}\n/**\n * Return a `Prism` from a `Iso` focused on a nullable value.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var fromNullable = function (sa) {\n    return composePrism(_.prismFromNullable())(sa);\n};\nexport function filter(predicate) {\n    return composePrism(_.prismFromPredicate(predicate));\n}\n/**\n * Return a `Lens` from a `Iso` and a prop.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var prop = function (prop) {\n    return flow(asLens, _.lensProp(prop));\n};\n/**\n * Return a `Lens` from a `Iso` and a list of props.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var props = function () {\n    var props = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        props[_i] = arguments[_i];\n    }\n    return flow(asLens, _.lensProps.apply(_, props));\n};\n/**\n * Return a `Lens` from a `Iso` focused on a component of a tuple.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var component = function (prop) { return flow(asLens, _.lensComponent(prop)); };\n/**\n * Return a `Optional` from a `Iso` focused on an index of a `ReadonlyArray`.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var index = function (i) {\n    return flow(asOptional, _.optionalIndex(i));\n};\n/**\n * Return a `Optional` from a `Iso` focused on an index of a `ReadonlyNonEmptyArray`.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var indexNonEmpty = function (i) {\n    return flow(asOptional, _.optionalIndexNonEmpty(i));\n};\n/**\n * Return a `Optional` from a `Iso` focused on a key of a `ReadonlyRecord`.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var key = function (key) {\n    return flow(asOptional, _.optionalKey(key));\n};\n/**\n * Return a `Lens` from a `Iso` focused on a required key of a `ReadonlyRecord`.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var atKey = function (key) {\n    return flow(asLens, _.lensAtKey(key));\n};\n/**\n * Return a `Prism` from a `Iso` focused on the `Some` of a `Option` type.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var some = \n/*#__PURE__*/\ncomposePrism(_.prismSome());\n/**\n * Return a `Prism` from a `Iso` focused on the `Right` of a `Either` type.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var right = \n/*#__PURE__*/\ncomposePrism(_.prismRight());\n/**\n * Return a `Prism` from a `Iso` focused on the `Left` of a `Either` type.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var left = \n/*#__PURE__*/\ncomposePrism(_.prismLeft());\n/**\n * Return a `Traversal` from a `Iso` focused on a `Traversable`.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport function traverse(T) {\n    return flow(asTraversal, _.traversalTraverse(T));\n}\nexport function findFirst(predicate) {\n    return composeOptional(_.optionalFindFirst(predicate));\n}\nexport function findFirstNonEmpty(predicate) {\n    return composeOptional(_.optionalFindFirstNonEmpty(predicate));\n}\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * @category Invariant\n * @since 2.3.0\n */\nexport var imap = function (f, g) { return function (ea) {\n    return imap_(ea, f, g);\n}; };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\nvar imap_ = function (ea, ab, ba) { return iso(flow(ea.get, ab), flow(ba, ea.reverseGet)); };\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var URI = 'monocle-ts/Iso';\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var Invariant = {\n    URI: URI,\n    imap: imap_\n};\n/**\n * @category instances\n * @since 2.3.8\n */\nexport var Semigroupoid = {\n    URI: URI,\n    compose: function (ab, ea) { return compose(ab)(ea); }\n};\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var Category = {\n    URI: URI,\n    compose: Semigroupoid.compose,\n    id: id\n};\n","import { flow } from 'fp-ts/es6/function';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.3.8\n */\nexport var lens = _.lens;\n/**\n * @category constructors\n * @since 2.3.0\n */\nexport var id = _.lensId;\n// -------------------------------------------------------------------------------------\n// converters\n// -------------------------------------------------------------------------------------\n/**\n * View a `Lens` as a `Optional`.\n *\n * @category converters\n * @since 2.3.0\n */\nexport var asOptional = _.lensAsOptional;\n/**\n * View a `Lens` as a `Traversal`.\n *\n * @category converters\n * @since 2.3.0\n */\nexport var asTraversal = _.lensAsTraversal;\n// -------------------------------------------------------------------------------------\n// compositions\n// -------------------------------------------------------------------------------------\n/**\n * Compose a `Lens` with a `Lens`.\n *\n * @category compositions\n * @since 2.3.0\n */\nexport var compose = _.lensComposeLens;\n/**\n * Alias of `compose`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeLens = compose;\n/**\n * Compose a `Lens` with a `Iso`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeIso = \n/*#__PURE__*/\nflow(_.isoAsLens, compose);\n/**\n * Compose a `Lens` with a `Prism`.\n *\n * @category compositions\n * @since 2.3.0\n */\nexport var composePrism = _.lensComposePrism;\n/**\n * Compose a `Lens` with an `Optional`.\n *\n * @category compositions\n * @since 2.3.0\n */\nexport var composeOptional = function (ab) {\n    return flow(asOptional, _.optionalComposeOptional(ab));\n};\n/**\n * Compose a `Lens` with an `Traversal`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeTraversal = function (ab) {\n    return flow(asTraversal, _.traversalComposeTraversal(ab));\n};\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.3.0\n */\nexport var modify = function (f) { return function (sa) { return function (s) {\n    var o = sa.get(s);\n    var n = f(o);\n    return o === n ? s : sa.set(n)(s);\n}; }; };\nexport function modifyF(F) {\n    return function (f) { return function (sa) { return function (s) { return pipe(sa.get(s), f, function (fa) { return F.map(fa, function (a) { return sa.set(a)(s); }); }); }; }; };\n}\n/**\n * Return a `Optional` from a `Lens` focused on a nullable value.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var fromNullable = function (sa) {\n    return composePrism(_.prismFromNullable())(sa);\n};\nexport function filter(predicate) {\n    return composePrism(_.prismFromPredicate(predicate));\n}\n/**\n * Return a `Lens` from a `Lens` and a prop.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var prop = _.lensProp;\n/**\n * Return a `Lens` from a `Lens` and a list of props.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var props = _.lensProps;\n/**\n * Return a `Lens` from a `Lens` focused on a component of a tuple.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var component = _.lensComponent;\n/**\n * Return a `Optional` from a `Lens` focused on an index of a `ReadonlyArray`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var index = function (i) {\n    return flow(asOptional, _.optionalIndex(i));\n};\n/**\n * Return a `Optional` from a `Lens` focused on an index of a `ReadonlyNonEmptyArray`.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var indexNonEmpty = function (i) {\n    return flow(asOptional, _.optionalIndexNonEmpty(i));\n};\n/**\n * Return a `Optional` from a `Lens` focused on a key of a `ReadonlyRecord`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var key = function (key) {\n    return flow(asOptional, _.optionalKey(key));\n};\n/**\n * Return a `Lens` from a `Lens` focused on a required key of a `ReadonlyRecord`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var atKey = _.lensAtKey;\n/**\n * Return a `Optional` from a `Lens` focused on the `Some` of a `Option` type.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var some = \n/*#__PURE__*/\ncomposePrism(_.prismSome());\n/**\n * Return a `Optional` from a `Lens` focused on the `Right` of a `Either` type.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var right = \n/*#__PURE__*/\ncomposePrism(_.prismRight());\n/**\n * Return a `Optional` from a `Lens` focused on the `Left` of a `Either` type.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var left = \n/*#__PURE__*/\ncomposePrism(_.prismLeft());\n/**\n * Return a `Traversal` from a `Lens` focused on a `Traversable`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport function traverse(T) {\n    return flow(asTraversal, _.traversalTraverse(T));\n}\nexport function findFirst(predicate) {\n    return composeOptional(_.optionalFindFirst(predicate));\n}\nexport function findFirstNonEmpty(predicate) {\n    return composeOptional(_.optionalFindFirstNonEmpty(predicate));\n}\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * @category Invariant\n * @since 2.3.0\n */\nexport var imap = function (f, g) { return function (ea) {\n    return imap_(ea, f, g);\n}; };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\nvar imap_ = function (ea, ab, ba) { return lens(flow(ea.get, ab), flow(ba, ea.set)); };\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var URI = 'monocle-ts/Lens';\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var Invariant = {\n    URI: URI,\n    imap: imap_\n};\n/**\n * @category instances\n * @since 2.3.8\n */\nexport var Semigroupoid = {\n    URI: URI,\n    compose: function (ab, ea) { return compose(ab)(ea); }\n};\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var Category = {\n    URI: URI,\n    compose: Semigroupoid.compose,\n    id: id\n};\n","import { constant, flow } from 'fp-ts/es6/function';\nimport * as O from 'fp-ts/es6/Option';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.3.8\n */\nexport var optional = _.optional;\n/**\n * @category constructors\n * @since 2.3.0\n */\nexport var id = function () { return optional(O.some, constant); };\n// -------------------------------------------------------------------------------------\n// converters\n// -------------------------------------------------------------------------------------\n/**\n * View a `Optional` as a `Traversal`.\n *\n * @category converters\n * @since 2.3.0\n */\nexport var asTraversal = _.optionalAsTraversal;\n// -------------------------------------------------------------------------------------\n// compositions\n// -------------------------------------------------------------------------------------\n/**\n * Compose a `Optional` with a `Optional`.\n *\n * @category compositions\n * @since 2.3.0\n */\nexport var compose = _.optionalComposeOptional;\n/**\n * Alias of `compose`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeOptional = compose;\n/**\n * Compose a `Optional` with a `Iso`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeIso = \n/*#__PURE__*/\nflow(_.isoAsOptional, compose);\n/**\n * Compose a `Optional` with a `Lens`.\n *\n * @category compositions\n * @since 2.3.7\n */\nexport var composeLens = \n/*#__PURE__*/\nflow(_.lensAsOptional, _.optionalComposeOptional);\n/**\n * Compose a `Optional` with a `Prism`.\n *\n * @category compositions\n * @since 2.3.7\n */\nexport var composePrism = \n/*#__PURE__*/\nflow(_.prismAsOptional, _.optionalComposeOptional);\n/**\n * Compose a `Optional` with an `Traversal`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeTraversal = function (ab) {\n    return flow(asTraversal, _.traversalComposeTraversal(ab));\n};\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.3.0\n */\nexport var modifyOption = _.optionalModifyOption;\n/**\n * @category combinators\n * @since 2.3.7\n */\nexport var setOption = function (a) { return modifyOption(function () { return a; }); };\n/**\n * @category combinators\n * @since 2.3.0\n */\nexport var modify = _.optionalModify;\nexport function modifyF(F) {\n    return function (f) { return function (sa) { return function (s) {\n        return pipe(sa.getOption(s), O.fold(function () { return F.of(s); }, function (a) { return F.map(f(a), function (a) { return sa.set(a)(s); }); }));\n    }; }; };\n}\n/**\n * Return an `Optional` from a `Optional` focused on a nullable value.\n *\n * @category combinators\n * @since 2.3.3\n */\nexport var fromNullable = \n/*#__PURE__*/\ncompose(_.prismAsOptional(_.prismFromNullable()));\nexport function filter(predicate) {\n    return compose(_.prismAsOptional(_.prismFromPredicate(predicate)));\n}\n/**\n * Return a `Optional` from a `Optional` and a prop.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var prop = function (prop) {\n    return compose(pipe(_.lensId(), _.lensProp(prop), _.lensAsOptional));\n};\n/**\n * Return a `Optional` from a `Optional` and a list of props.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var props = function () {\n    var props = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        props[_i] = arguments[_i];\n    }\n    return compose(pipe(_.lensId(), _.lensProps.apply(_, props), _.lensAsOptional));\n};\n/**\n * Return a `Optional` from a `Optional` focused on a component of a tuple.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var component = function (prop) {\n    return compose(pipe(_.lensId(), _.lensComponent(prop), _.lensAsOptional));\n};\n/**\n * Return a `Optional` from a `Optional` focused on an index of a `ReadonlyArray`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var index = _.optionalIndex;\n/**\n * Return a `Optional` from a `Optional` focused on an index of a `ReadonlyNonEmptyArray`.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var indexNonEmpty = _.optionalIndexNonEmpty;\n/**\n * Return a `Optional` from a `Optional` focused on a key of a `ReadonlyRecord`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var key = _.optionalKey;\n/**\n * Return a `Optional` from a `Optional` focused on a required key of a `ReadonlyRecord`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var atKey = function (key) { return function (sa) {\n    return pipe(sa, compose(_.lensAsOptional(_.atReadonlyRecord().at(key))));\n}; };\n/**\n * Return a `Optional` from a `Optional` focused on the `Some` of a `Option` type.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var some = \n/*#__PURE__*/\ncompose(_.prismAsOptional(_.prismSome()));\n/**\n * Return a `Optional` from a `Optional` focused on the `Right` of a `Either` type.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var right = \n/*#__PURE__*/\ncompose(_.prismAsOptional(_.prismRight()));\n/**\n * Return a `Optional` from a `Optional` focused on the `Left` of a `Either` type.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var left = \n/*#__PURE__*/\ncompose(_.prismAsOptional(_.prismLeft()));\n/**\n * Return a `Traversal` from a `Optional` focused on a `Traversable`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport function traverse(T) {\n    return flow(asTraversal, _.traversalTraverse(T));\n}\nexport function findFirst(predicate) {\n    return compose(_.optionalFindFirst(predicate));\n}\nexport function findFirstNonEmpty(predicate) {\n    return compose(_.optionalFindFirstNonEmpty(predicate));\n}\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * @category Invariant\n * @since 2.3.0\n */\nexport var imap = function (f, g) { return function (ea) { return imap_(ea, f, g); }; };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\nvar imap_ = function (ea, ab, ba) { return optional(flow(ea.getOption, O.map(ab)), flow(ba, ea.set)); };\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var URI = 'monocle-ts/Optional';\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var Invariant = {\n    URI: URI,\n    imap: imap_\n};\n/**\n * @category instances\n * @since 2.3.8\n */\nexport var Semigroupoid = {\n    URI: URI,\n    compose: function (ab, ea) { return compose(ab)(ea); }\n};\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var Category = {\n    URI: URI,\n    compose: Semigroupoid.compose,\n    id: id\n};\n","import { flow, identity } from 'fp-ts/es6/function';\nimport * as O from 'fp-ts/es6/Option';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.3.8\n */\nexport var prism = _.prism;\n/**\n * @category constructors\n * @since 2.3.0\n */\nexport var id = function () { return prism(O.some, identity); };\n/**\n * @category constructors\n * @since 2.3.0\n */\nexport var fromPredicate = _.prismFromPredicate;\n// -------------------------------------------------------------------------------------\n// converters\n// -------------------------------------------------------------------------------------\n/**\n * View a `Prism` as a `Optional`.\n *\n * @category converters\n * @since 2.3.0\n */\nexport var asOptional = _.prismAsOptional;\n/**\n * View a `Prism` as a `Traversal`.\n *\n * @category converters\n * @since 2.3.0\n */\nexport var asTraversal = _.prismAsTraversal;\n// -------------------------------------------------------------------------------------\n// compositions\n// -------------------------------------------------------------------------------------\n/**\n * Compose a `Prism` with a `Prism`.\n *\n * @category compositions\n * @since 2.3.0\n */\nexport var compose = _.prismComposePrism;\n/**\n * Alias of `compose`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composePrism = compose;\n/**\n * Compose a `Prism` with a `Iso`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeIso = \n/*#__PURE__*/\nflow(_.isoAsPrism, compose);\n/**\n * Compose a `Prism` with a `Lens`.\n *\n * @category compositions\n * @since 2.3.0\n */\nexport var composeLens = _.prismComposeLens;\n/**\n * Compose a `Prism` with an `Optional`.\n *\n * @category compositions\n * @since 2.3.0\n */\nexport var composeOptional = function (ab) {\n    return flow(asOptional, _.optionalComposeOptional(ab));\n};\n/**\n * Compose a `Prism` with an `Traversal`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeTraversal = function (ab) {\n    return flow(asTraversal, _.traversalComposeTraversal(ab));\n};\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.3.0\n */\nexport var set = _.prismSet;\n/**\n * @category combinators\n * @since 2.3.0\n */\nexport var modifyOption = _.prismModifyOption;\n/**\n * @category combinators\n * @since 2.3.0\n */\nexport var modify = _.prismModify;\nexport function modifyF(F) {\n    return function (f) { return function (sa) { return function (s) {\n        return pipe(sa.getOption(s), O.fold(function () { return F.of(s); }, function (a) { return F.map(f(a), sa.reverseGet); }));\n    }; }; };\n}\n/**\n * Return a `Prism` from a `Prism` focused on a nullable value.\n *\n * @category combinators\n * @since 2.3.3\n */\nexport var fromNullable = \n/*#__PURE__*/\ncompose(_.prismFromNullable());\nexport function filter(predicate) {\n    return compose(_.prismFromPredicate(predicate));\n}\n/**\n * Return a `Optional` from a `Prism` and a prop.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var prop = function (prop) {\n    return composeLens(pipe(_.lensId(), _.lensProp(prop)));\n}; // TODO: simplify?\n/**\n * Return a `Optional` from a `Prism` and a list of props.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var props = function () {\n    var props = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        props[_i] = arguments[_i];\n    }\n    return composeLens(pipe(_.lensId(), _.lensProps.apply(_, props)));\n};\n/**\n * Return a `Optional` from a `Prism` focused on a component of a tuple.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var component = function (prop) { return composeLens(pipe(_.lensId(), _.lensComponent(prop))); };\n/**\n * Return a `Optional` from a `Prism` focused on an index of a `ReadonlyArray`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var index = function (i) {\n    return flow(asOptional, _.optionalIndex(i));\n};\n/**\n * Return a `Optional` from a `Prism` focused on an index of a `ReadonlyNonEmptyArray`.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var indexNonEmpty = function (i) {\n    return flow(asOptional, _.optionalIndexNonEmpty(i));\n};\n/**\n * Return a `Optional` from a `Prism` focused on a key of a `ReadonlyRecord`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var key = function (key) {\n    return flow(asOptional, _.optionalKey(key));\n};\n/**\n * Return a `Optional` from a `Prism` focused on a required key of a `ReadonlyRecord`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var atKey = function (key) { return function (sa) {\n    return _.prismComposeLens(_.atReadonlyRecord().at(key))(sa);\n}; };\n/**\n * Return a `Prism` from a `Prism` focused on the `Some` of a `Option` type.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var some = \n/*#__PURE__*/\ncompose(_.prismSome());\n/**\n * Return a `Prism` from a `Prism` focused on the `Right` of a `Either` type.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var right = \n/*#__PURE__*/\ncompose(_.prismRight());\n/**\n * Return a `Prism` from a `Prism` focused on the `Left` of a `Either` type.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var left = \n/*#__PURE__*/\ncompose(_.prismLeft());\n/**\n * Return a `Traversal` from a `Prism` focused on a `Traversable`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport function traverse(T) {\n    return flow(asTraversal, _.traversalTraverse(T));\n}\nexport function findFirst(predicate) {\n    return composeOptional(_.optionalFindFirst(predicate));\n}\nexport function findFirstNonEmpty(predicate) {\n    return composeOptional(_.optionalFindFirstNonEmpty(predicate));\n}\n// -------------------------------------------------------------------------------------\n// pipeables\n// -------------------------------------------------------------------------------------\n/**\n * @category Invariant\n * @since 2.3.0\n */\nexport var imap = function (f, g) { return function (ea) {\n    return imap_(ea, f, g);\n}; };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\nvar imap_ = function (ea, ab, ba) { return prism(flow(ea.getOption, O.map(ab)), flow(ba, ea.reverseGet)); };\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var URI = 'monocle-ts/Prism';\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var Invariant = {\n    URI: URI,\n    imap: imap_\n};\n/**\n * @category instances\n * @since 2.3.8\n */\nexport var Semigroupoid = {\n    URI: URI,\n    compose: function (ab, ea) { return compose(ab)(ea); }\n};\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var Category = {\n    URI: URI,\n    compose: Semigroupoid.compose,\n    id: id\n};\n","import * as C from 'fp-ts/es6/Const';\nimport { flow, identity } from 'fp-ts/es6/function';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport * as RA from 'fp-ts/es6/ReadonlyArray';\nimport * as _ from './internal';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.3.8\n */\nexport var traversal = _.traversal;\n/**\n * @category constructors\n * @since 2.3.0\n */\nexport var id = function () { return traversal(function (_) { return function (f) { return f; }; }); };\n/**\n * Create a `Traversal` from a `Traversable`.\n *\n * @category constructor\n * @since 2.3.0\n */\nexport var fromTraversable = _.fromTraversable;\n// -------------------------------------------------------------------------------------\n// compositions\n// -------------------------------------------------------------------------------------\n/**\n * Compose a `Traversal` with a `Traversal`.\n *\n * @category compositions\n * @since 2.3.0\n */\nexport var compose = _.traversalComposeTraversal;\n/**\n * Alias of `compose`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeTraversal = compose;\n/**\n * Compose a `Traversal` with a `Iso`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeIso = \n/*#__PURE__*/\nflow(_.isoAsTraversal, compose);\n/**\n * Compose a `Traversal` with a `Lens`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeLens = \n/*#__PURE__*/\nflow(_.lensAsTraversal, _.traversalComposeTraversal);\n/**\n * Compose a `Traversal` with a `Prism`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composePrism = \n/*#__PURE__*/\nflow(_.prismAsTraversal, _.traversalComposeTraversal);\n/**\n * Compose a `Traversal` with a `Optional`.\n *\n * @category compositions\n * @since 2.3.8\n */\nexport var composeOptional = \n/*#__PURE__*/\nflow(_.optionalAsTraversal, _.traversalComposeTraversal);\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.3.0\n */\nexport var modify = function (f) { return function (sa) {\n    return sa.modifyF(_.ApplicativeIdentity)(f);\n}; };\n/**\n * @category combinators\n * @since 2.3.0\n */\nexport var set = function (a) { return modify(function () { return a; }); };\n/**\n * Return a `Traversal` from a `Traversal` focused on a nullable value.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var fromNullable = function (sa) {\n    return composePrism(_.prismFromNullable())(sa);\n};\nexport function filter(predicate) {\n    return compose(_.prismAsTraversal(_.prismFromPredicate(predicate)));\n}\n/**\n * Return a `Traversal` from a `Traversal` and a prop.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var prop = function (prop) {\n    return compose(pipe(_.lensId(), _.lensProp(prop), _.lensAsTraversal));\n};\n/**\n * Return a `Traversal` from a `Traversal` and a list of props.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var props = function () {\n    var props = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        props[_i] = arguments[_i];\n    }\n    return compose(pipe(_.lensId(), _.lensProps.apply(_, props), _.lensAsTraversal));\n};\n/**\n * Return a `Traversal` from a `Traversal` focused on a component of a tuple.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var component = function (prop) {\n    return compose(pipe(_.lensId(), _.lensComponent(prop), _.lensAsTraversal));\n};\n/**\n * Return a `Traversal` from a `Traversal` focused on an index of a `ReadonlyArray`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var index = function (i) { return function (sa) {\n    return pipe(sa, compose(_.optionalAsTraversal(_.indexReadonlyArray().index(i))));\n}; };\n/**\n * Alias of `index`.\n *\n * @category combinators\n * @since 2.3.8\n */\nexport var indexNonEmpty = index;\n/**\n * Return a `Traversal` from a `Traversal` focused on a key of a `ReadonlyRecord`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var key = function (key) { return function (sa) {\n    return pipe(sa, compose(_.optionalAsTraversal(_.indexReadonlyRecord().index(key))));\n}; };\n/**\n * Return a `Traversal` from a `Traversal` focused on a required key of a `ReadonlyRecord`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var atKey = function (key) { return function (sa) {\n    return pipe(sa, compose(_.lensAsTraversal(_.atReadonlyRecord().at(key))));\n}; };\n/**\n * Return a `Traversal` from a `Traversal` focused on the `Some` of a `Option` type.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var some = \n/*#__PURE__*/\ncompose(_.prismAsTraversal(_.prismSome()));\n/**\n * Return a `Traversal` from a `Traversal` focused on the `Right` of a `Either` type.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var right = \n/*#__PURE__*/\ncompose(_.prismAsTraversal(_.prismRight()));\n/**\n * Return a `Traversal` from a `Traversal` focused on the `Left` of a `Either` type.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var left = \n/*#__PURE__*/\ncompose(_.prismAsTraversal(_.prismLeft()));\n/**\n * Return a `Traversal` from a `Traversal` focused on a `Traversable`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var traverse = _.traversalTraverse;\nexport function findFirst(predicate) {\n    return composeOptional(_.optionalFindFirst(predicate));\n}\nexport function findFirstNonEmpty(predicate) {\n    return findFirst(predicate);\n}\n/**\n * Map each target to a `Monoid` and combine the results.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var foldMap = function (M) { return function (f) { return function (sa) {\n    return sa.modifyF(C.getApplicative(M))(function (a) { return C.make(f(a)); });\n}; }; };\n/**\n * Map each target to a `Monoid` and combine the results.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var fold = function (M) { return foldMap(M)(identity); };\n/**\n * Get all the targets of a `Traversal`.\n *\n * @category combinators\n * @since 2.3.0\n */\nexport var getAll = function (s) { return function (sa) {\n    return foldMap(RA.getMonoid())(RA.of)(sa)(s);\n}; };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var URI = 'monocle-ts/Traversal';\n/**\n * @category instances\n * @since 2.3.8\n */\nexport var Semigroupoid = {\n    URI: URI,\n    compose: function (ab, ea) { return compose(ab)(ea); }\n};\n/**\n * @category instances\n * @since 2.3.0\n */\nexport var Category = {\n    URI: URI,\n    compose: Semigroupoid.compose,\n    id: id\n};\n","/**\n * @since 1.0.0\n */\nimport * as A from 'fp-ts/es6/Array';\nimport { getApplicative, make } from 'fp-ts/es6/Const';\nimport { constant, identity } from 'fp-ts/es6/function';\nimport { monoidAll, monoidAny } from 'fp-ts/es6/Monoid';\nimport { fromNullable, fromPredicate, getFirstMonoid, isNone, option, some } from 'fp-ts/es6/Option';\nimport { pipe } from 'fp-ts/es6/pipeable';\nimport * as at from './At';\nimport * as iso from './Iso';\nimport * as index from './Ix';\nimport * as lens from './Lens';\nimport * as optional from './Optional';\nimport * as prism from './Prism';\nimport * as traversal from './Traversal';\nexport { \n/**\n * @since 2.3.0\n */\nat, \n/**\n * @since 2.3.0\n */\niso, \n/**\n * @since 2.3.0\n */\nindex, \n/**\n * @since 2.3.0\n */\nlens, \n/**\n * @since 2.3.0\n */\nprism, \n/**\n * @since 2.3.0\n */\noptional, \n/**\n * @since 2.3.0\n */\ntraversal };\n//\n// compat\n//\nvar fromIso = function (iso) { return new Iso(iso.get, iso.reverseGet); };\nvar fromLens = function (lens) { return new Lens(lens.get, lens.set); };\nvar fromPrism = function (prism) { return new Prism(prism.getOption, prism.reverseGet); };\nvar fromOptional = function (optional) {\n    return new Optional(optional.getOption, optional.set);\n};\nvar fromTraversal = function (traversal) { return new Traversal(traversal.modifyF); };\nvar fromAt = function (at) { return new At(function (i) { return fromLens(at.at(i)); }); };\nvar fromIndex = function (ix) { return new Index(function (i) { return fromOptional(ix.index(i)); }); };\n//\n// old APIs\n//\nvar update = function (o, k, a) {\n    var _a;\n    return a === o[k] ? o : Object.assign({}, o, (_a = {}, _a[k] = a, _a));\n};\n/**\n * Laws:\n * 1. `reverseGet(get(s)) = s`\n * 2. `get(reversetGet(a)) = a`\n *\n * @category constructor\n * @since 1.0.0\n */\nvar Iso = /** @class */ (function () {\n    function Iso(get, reverseGet) {\n        this.get = get;\n        this.reverseGet = reverseGet;\n        /**\n         * @since 1.0.0\n         */\n        this._tag = 'Iso';\n        /**\n         * @since 1.0.0\n         */\n        this.unwrap = this.get;\n        /**\n         * @since 1.0.0\n         */\n        this.to = this.get;\n        /**\n         * @since 1.0.0\n         */\n        this.wrap = this.reverseGet;\n        /**\n         * @since 1.0.0\n         */\n        this.from = this.reverseGet;\n    }\n    /**\n     * reverse the `Iso`: the source becomes the target and the target becomes the source\n     * @since 1.0.0\n     */\n    Iso.prototype.reverse = function () {\n        return fromIso(iso.reverse(this));\n    };\n    /**\n     * @since 1.0.0\n     */\n    Iso.prototype.modify = function (f) {\n        return iso.modify(f)(this);\n    };\n    /**\n     * view an `Iso` as a `Lens`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.asLens = function () {\n        return fromLens(iso.asLens(this));\n    };\n    /**\n     * view an `Iso` as a `Prism`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.asPrism = function () {\n        return fromPrism(iso.asPrism(this));\n    };\n    /**\n     * view an `Iso` as a `Optional`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.asOptional = function () {\n        return fromOptional(iso.asOptional(this));\n    };\n    /**\n     * view an `Iso` as a `Traversal`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.asTraversal = function () {\n        return fromTraversal(iso.asTraversal(this));\n    };\n    /**\n     * view an `Iso` as a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.asFold = function () {\n        var _this = this;\n        return new Fold(function () { return function (f) { return function (s) { return f(_this.get(s)); }; }; });\n    };\n    /**\n     * view an `Iso` as a `Getter`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.asGetter = function () {\n        var _this = this;\n        return new Getter(function (s) { return _this.get(s); });\n    };\n    /**\n     * view an `Iso` as a `Setter`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.asSetter = function () {\n        var _this = this;\n        return new Setter(function (f) { return _this.modify(f); });\n    };\n    /**\n     * compose an `Iso` with an `Iso`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.compose = function (ab) {\n        return fromIso(iso.compose(ab)(this));\n    };\n    /**\n     * Alias of `compose`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.composeIso = function (ab) {\n        return this.compose(ab);\n    };\n    /**\n     * compose an `Iso` with a `Lens `\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.composeLens = function (ab) {\n        return fromLens(pipe(this, iso.asLens, lens.compose(ab)));\n    };\n    /**\n     * compose an `Iso` with a `Prism`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.composePrism = function (ab) {\n        return fromPrism(pipe(this, iso.asPrism, prism.compose(ab)));\n    };\n    /**\n     * compose an `Iso` with an `Optional`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.composeOptional = function (ab) {\n        return fromOptional(pipe(this, iso.asOptional, optional.compose(ab)));\n    };\n    /**\n     * compose an `Iso` with a `Traversal`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.composeTraversal = function (ab) {\n        return fromTraversal(pipe(this, iso.asTraversal, traversal.compose(ab)));\n    };\n    /**\n     * compose an `Iso` with a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.composeFold = function (ab) {\n        return this.asFold().compose(ab);\n    };\n    /**\n     * compose an `Iso` with a `Getter`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.composeGetter = function (ab) {\n        return this.asGetter().compose(ab);\n    };\n    /**\n     * compose an `Iso` with a `Setter`\n     *\n     * @since 1.0.0\n     */\n    Iso.prototype.composeSetter = function (ab) {\n        return this.asSetter().compose(ab);\n    };\n    return Iso;\n}());\nexport { Iso };\n/**\n * Laws:\n * 1. `get(set(a)(s)) = a`\n * 2. `set(get(s))(s) = s`\n * 3. `set(a)(set(a)(s)) = set(a)(s)`\n *\n * @category constructor\n * @since 1.0.0\n */\nvar Lens = /** @class */ (function () {\n    function Lens(get, set) {\n        this.get = get;\n        this.set = set;\n        /**\n         * @since 1.0.0\n         */\n        this._tag = 'Lens';\n    }\n    /**\n     * @example\n     * import { Lens } from 'monocle-ts'\n     *\n     * type Person = {\n     *   name: string\n     *   age: number\n     *   address: {\n     *     city: string\n     *   }\n     * }\n     *\n     * const city = Lens.fromPath<Person>()(['address', 'city'])\n     *\n     * const person: Person = { name: 'Giulio', age: 43, address: { city: 'Milan' } }\n     *\n     * assert.strictEqual(city.get(person), 'Milan')\n     * assert.deepStrictEqual(city.set('London')(person), { name: 'Giulio', age: 43, address: { city: 'London' } })\n     *\n     * @since 1.0.0\n     */\n    Lens.fromPath = function () {\n        var fromProp = Lens.fromProp();\n        return function (path) {\n            var lens = fromProp(path[0]);\n            return path.slice(1).reduce(function (acc, prop) { return acc.compose(fromProp(prop)); }, lens);\n        };\n    };\n    /**\n     * Returns a `Lens` from a type and a prop\n     *\n     * @example\n     * import { Lens } from 'monocle-ts'\n     *\n     * type Person = {\n     *   name: string\n     *   age: number\n     * }\n     *\n     * const age = Lens.fromProp<Person>()('age')\n     *\n     * const person: Person = { name: 'Giulio', age: 43 }\n     *\n     * assert.strictEqual(age.get(person), 43)\n     * assert.deepStrictEqual(age.set(44)(person), { name: 'Giulio', age: 44 })\n     *\n     * @since 1.0.0\n     */\n    Lens.fromProp = function () {\n        return function (prop) { return fromLens(pipe(lens.id(), lens.prop(prop))); };\n    };\n    Lens.fromProps = function () {\n        return function (props) { return fromLens(pipe(lens.id(), lens.props.apply(lens, props))); };\n    };\n    /**\n     * Returns a `Lens` from a nullable (`A | null | undefined`) prop\n     *\n     * @example\n     * import { Lens } from 'monocle-ts'\n     *\n     * interface Outer {\n     *   inner?: Inner\n     * }\n     *\n     * interface Inner {\n     *   value: number\n     *   foo: string\n     * }\n     *\n     * const inner = Lens.fromNullableProp<Outer>()('inner', { value: 0, foo: 'foo' })\n     * const value = Lens.fromProp<Inner>()('value')\n     * const lens = inner.compose(value)\n     *\n     * assert.deepStrictEqual(lens.set(1)({}), { inner: { value: 1, foo: 'foo' } })\n     * assert.strictEqual(lens.get({}), 0)\n     * assert.deepStrictEqual(lens.set(1)({ inner: { value: 1, foo: 'bar' } }), { inner: { value: 1, foo: 'bar' } })\n     * assert.strictEqual(lens.get({ inner: { value: 1, foo: 'bar' } }), 1)\n     *\n     * @since 1.0.0\n     */\n    Lens.fromNullableProp = function () {\n        return function (k, defaultValue) {\n            return new Lens(function (s) {\n                var osk = fromNullable(s[k]);\n                if (isNone(osk)) {\n                    return defaultValue;\n                }\n                else {\n                    return osk.value;\n                }\n            }, function (a) { return function (s) { return update(s, k, a); }; });\n        };\n    };\n    /**\n     * @since 1.0.0\n     */\n    Lens.prototype.modify = function (f) {\n        return lens.modify(f)(this);\n    };\n    /**\n     * view a `Lens` as a Optional\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.asOptional = function () {\n        return fromOptional(lens.asOptional(this));\n    };\n    /**\n     * view a `Lens` as a `Traversal`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.asTraversal = function () {\n        return fromTraversal(lens.asTraversal(this));\n    };\n    /**\n     * view a `Lens` as a `Setter`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.asSetter = function () {\n        var _this = this;\n        return new Setter(function (f) { return _this.modify(f); });\n    };\n    /**\n     * view a `Lens` as a `Getter`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.asGetter = function () {\n        var _this = this;\n        return new Getter(function (s) { return _this.get(s); });\n    };\n    /**\n     * view a `Lens` as a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.asFold = function () {\n        var _this = this;\n        return new Fold(function () { return function (f) { return function (s) { return f(_this.get(s)); }; }; });\n    };\n    /**\n     * compose a `Lens` with a `Lens`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.compose = function (ab) {\n        return fromLens(lens.compose(ab)(this));\n    };\n    /**\n     * Alias of `compose`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.composeLens = function (ab) {\n        return this.compose(ab);\n    };\n    /**\n     * compose a `Lens` with a `Getter`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.composeGetter = function (ab) {\n        return this.asGetter().compose(ab);\n    };\n    /**\n     * compose a `Lens` with a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.composeFold = function (ab) {\n        return this.asFold().compose(ab);\n    };\n    /**\n     * compose a `Lens` with an `Optional`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.composeOptional = function (ab) {\n        return fromOptional(pipe(this, lens.asOptional, optional.compose(ab)));\n    };\n    /**\n     * compose a `Lens` with an `Traversal`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.composeTraversal = function (ab) {\n        return fromTraversal(pipe(this, lens.asTraversal, traversal.compose(ab)));\n    };\n    /**\n     * compose a `Lens` with an `Setter`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.composeSetter = function (ab) {\n        return this.asSetter().compose(ab);\n    };\n    /**\n     * compose a `Lens` with an `Iso`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.composeIso = function (ab) {\n        return fromLens(pipe(this, lens.compose(pipe(ab, iso.asLens))));\n    };\n    /**\n     * compose a `Lens` with a `Prism`\n     *\n     * @since 1.0.0\n     */\n    Lens.prototype.composePrism = function (ab) {\n        return fromOptional(lens.composePrism(ab)(this));\n    };\n    return Lens;\n}());\nexport { Lens };\n/**\n * Laws:\n * 1. `pipe(getOption(s), fold(() => s, reverseGet)) = s`\n * 2. `getOption(reverseGet(a)) = some(a)`\n *\n * @category constructor\n * @since 1.0.0\n */\nvar Prism = /** @class */ (function () {\n    function Prism(getOption, reverseGet) {\n        this.getOption = getOption;\n        this.reverseGet = reverseGet;\n        /**\n         * @since 1.0.0\n         */\n        this._tag = 'Prism';\n    }\n    Prism.fromPredicate = function (predicate) {\n        return fromPrism(prism.fromPredicate(predicate));\n    };\n    /**\n     * @since 1.0.0\n     */\n    Prism.some = function () {\n        return somePrism;\n    };\n    /**\n     * @since 1.0.0\n     */\n    Prism.prototype.modify = function (f) {\n        var _this = this;\n        return function (s) {\n            var os = _this.modifyOption(f)(s);\n            if (isNone(os)) {\n                return s;\n            }\n            else {\n                return os.value;\n            }\n        };\n    };\n    /**\n     * @since 1.0.0\n     */\n    Prism.prototype.modifyOption = function (f) {\n        var _this = this;\n        return function (s) {\n            return option.map(_this.getOption(s), function (v) {\n                var n = f(v);\n                return n === v ? s : _this.reverseGet(n);\n            });\n        };\n    };\n    /**\n     * set the target of a `Prism` with a value\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.set = function (a) {\n        return this.modify(function () { return a; });\n    };\n    /**\n     * view a `Prism` as a `Optional`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.asOptional = function () {\n        return fromOptional(prism.asOptional(this));\n    };\n    /**\n     * view a `Prism` as a `Traversal`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.asTraversal = function () {\n        return fromTraversal(prism.asTraversal(this));\n    };\n    /**\n     * view a `Prism` as a `Setter`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.asSetter = function () {\n        var _this = this;\n        return new Setter(function (f) { return _this.modify(f); });\n    };\n    /**\n     * view a `Prism` as a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.asFold = function () {\n        var _this = this;\n        return new Fold(function (M) { return function (f) { return function (s) {\n            var oa = _this.getOption(s);\n            return isNone(oa) ? M.empty : f(oa.value);\n        }; }; });\n    };\n    /**\n     * compose a `Prism` with a `Prism`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.compose = function (ab) {\n        return fromPrism(prism.compose(ab)(this));\n    };\n    /**\n     * Alias of `compose`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.composePrism = function (ab) {\n        return this.compose(ab);\n    };\n    /**\n     * compose a `Prism` with a `Optional`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.composeOptional = function (ab) {\n        return fromOptional(pipe(this, prism.asOptional, optional.compose(ab)));\n    };\n    /**\n     * compose a `Prism` with a `Traversal`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.composeTraversal = function (ab) {\n        return fromTraversal(pipe(this, prism.asTraversal, traversal.compose(ab)));\n    };\n    /**\n     * compose a `Prism` with a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.composeFold = function (ab) {\n        return this.asFold().compose(ab);\n    };\n    /**\n     * compose a `Prism` with a `Setter`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.composeSetter = function (ab) {\n        return this.asSetter().compose(ab);\n    };\n    /**\n     * compose a `Prism` with a `Iso`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.composeIso = function (ab) {\n        return fromPrism(pipe(this, prism.compose(pipe(ab, iso.asPrism))));\n    };\n    /**\n     * compose a `Prism` with a `Lens`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.composeLens = function (ab) {\n        return fromOptional(prism.composeLens(ab)(this));\n    };\n    /**\n     * compose a `Prism` with a `Getter`\n     *\n     * @since 1.0.0\n     */\n    Prism.prototype.composeGetter = function (ab) {\n        return this.asFold().compose(ab.asFold());\n    };\n    return Prism;\n}());\nexport { Prism };\nvar somePrism = new Prism(identity, some);\n/**\n * Laws:\n * 1. `pipe(getOption(s), fold(() => s, a => set(a)(s))) = s`\n * 2. `getOption(set(a)(s)) = pipe(getOption(s), map(_ => a))`\n * 3. `set(a)(set(a)(s)) = set(a)(s)`\n *\n * @category constructor\n * @since 1.0.0\n */\nvar Optional = /** @class */ (function () {\n    function Optional(getOption, set) {\n        this.getOption = getOption;\n        this.set = set;\n        /**\n         * @since 1.0.0\n         */\n        this._tag = 'Optional';\n    }\n    /**\n     * Returns an `Optional` from a nullable (`A | null | undefined`) prop\n     *\n     * @example\n     * import { Optional } from 'monocle-ts'\n     *\n     * interface Phone {\n     *   number: string\n     * }\n     * interface Employment {\n     *   phone?: Phone\n     * }\n     * interface Info {\n     *   employment?: Employment\n     * }\n     * interface Response {\n     *   info?: Info\n     * }\n     *\n     * const numberFromResponse = Optional.fromPath<Response>()(['info', 'employment', 'phone', 'number'])\n     *\n     * const response1: Response = {\n     *   info: {\n     *     employment: {\n     *       phone: {\n     *         number: '555-1234'\n     *       }\n     *     }\n     *   }\n     * }\n     * const response2: Response = {\n     *   info: {\n     *     employment: {}\n     *   }\n     * }\n     *\n     * numberFromResponse.getOption(response1) // some('555-1234')\n     * numberFromResponse.getOption(response2) // none\n     *\n     * @since 2.1.0\n     */\n    Optional.fromPath = function () {\n        var fromNullableProp = Optional.fromNullableProp();\n        return function (path) {\n            var optional = fromNullableProp(path[0]);\n            return path.slice(1).reduce(function (acc, prop) { return acc.compose(fromNullableProp(prop)); }, optional);\n        };\n    };\n    /**\n     * @example\n     * import { Optional } from 'monocle-ts'\n     *\n     * interface S {\n     *   a: number | undefined | null\n     * }\n     *\n     * const optional = Optional.fromNullableProp<S>()('a')\n     *\n     * const s1: S = { a: undefined }\n     * const s2: S = { a: null }\n     * const s3: S = { a: 1 }\n     *\n     * assert.deepStrictEqual(optional.set(2)(s1), s1)\n     * assert.deepStrictEqual(optional.set(2)(s2), s2)\n     * assert.deepStrictEqual(optional.set(2)(s3), { a: 2 })\n     *\n     * @since 1.0.0\n     */\n    Optional.fromNullableProp = function () {\n        return function (k) {\n            return new Optional(function (s) { return fromNullable(s[k]); }, function (a) { return function (s) { return (s[k] == null ? s : update(s, k, a)); }; });\n        };\n    };\n    /**\n     * Returns an `Optional` from an option (`Option<A>`) prop\n     *\n     * @example\n     * import { Optional } from 'monocle-ts'\n     * import * as O from 'fp-ts/es6/Option'\n     *\n     * interface S {\n     *   a: O.Option<number>\n     * }\n     *\n     * const optional = Optional.fromOptionProp<S>()('a')\n     * const s1: S = { a: O.none }\n     * const s2: S = { a: O.some(1) }\n     * assert.deepStrictEqual(optional.set(2)(s1), s1)\n     * assert.deepStrictEqual(optional.set(2)(s2), { a: O.some(2) })\n     *\n     * @since 1.0.0\n     */\n    Optional.fromOptionProp = function () {\n        var formProp = Lens.fromProp();\n        return function (prop) { return formProp(prop).composePrism(somePrism); };\n    };\n    /**\n     * @since 1.0.0\n     */\n    Optional.prototype.modify = function (f) {\n        return optional.modify(f)(this);\n    };\n    /**\n     * @since 1.0.0\n     */\n    Optional.prototype.modifyOption = function (f) {\n        return optional.modifyOption(f)(this);\n    };\n    /**\n     * view a `Optional` as a `Traversal`\n     *\n     * @since 1.0.0\n     */\n    Optional.prototype.asTraversal = function () {\n        return fromTraversal(optional.asTraversal(this));\n    };\n    /**\n     * view an `Optional` as a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Optional.prototype.asFold = function () {\n        var _this = this;\n        return new Fold(function (M) { return function (f) { return function (s) {\n            var oa = _this.getOption(s);\n            return isNone(oa) ? M.empty : f(oa.value);\n        }; }; });\n    };\n    /**\n     * view an `Optional` as a `Setter`\n     *\n     * @since 1.0.0\n     */\n    Optional.prototype.asSetter = function () {\n        var _this = this;\n        return new Setter(function (f) { return _this.modify(f); });\n    };\n    /**\n     * compose a `Optional` with a `Optional`\n     *\n     * @since 1.0.0\n     */\n    Optional.prototype.compose = function (ab) {\n        return fromOptional(optional.compose(ab)(this));\n    };\n    /**\n     * Alias of `compose`\n     *\n     * @since 1.0.0\n     */\n    Optional.prototype.composeOptional = function (ab) {\n        return this.compose(ab);\n    };\n    /**\n     * compose an `Optional` with a `Traversal`\n     *\n     * @since 1.0.0\n     */\n    Optional.prototype.composeTraversal = function (ab) {\n        return fromTraversal(pipe(this, optional.asTraversal, traversal.compose(ab)));\n    };\n    /**\n     * compose an `Optional` with a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Optional.prototype.composeFold = function (ab) {\n        return this.asFold().compose(ab);\n    };\n    /**\n     * compose an `Optional` with a `Setter`\n     *\n     * @since 1.0.0\n     */\n    Optional.prototype.composeSetter = function (ab) {\n        return this.asSetter().compose(ab);\n    };\n    /**\n     * compose an `Optional` with a `Lens`\n     *\n     * @since 1.0.0\n     */\n    Optional.prototype.composeLens = function (ab) {\n        return fromOptional(pipe(this, optional.compose(pipe(ab, lens.asOptional))));\n    };\n    /**\n     * compose an `Optional` with a `Prism`\n     *\n     * @since 1.0.0\n     */\n    Optional.prototype.composePrism = function (ab) {\n        return fromOptional(pipe(this, optional.compose(pipe(ab, prism.asOptional))));\n    };\n    /**\n     * compose an `Optional` with a `Iso`\n     *\n     * @since 1.0.0\n     */\n    Optional.prototype.composeIso = function (ab) {\n        return fromOptional(pipe(this, optional.compose(pipe(ab, iso.asOptional))));\n    };\n    /**\n     * compose an `Optional` with a `Getter`\n     *\n     * @since 1.0.0\n     */\n    Optional.prototype.composeGetter = function (ab) {\n        return this.asFold().compose(ab.asFold());\n    };\n    return Optional;\n}());\nexport { Optional };\n/**\n * @category constructor\n * @since 1.0.0\n */\nvar Traversal = /** @class */ (function () {\n    function Traversal(\n    // Van Laarhoven representation\n    modifyF) {\n        this.modifyF = modifyF;\n        /**\n         * @since 1.0.0\n         */\n        this._tag = 'Traversal';\n    }\n    /**\n     * @since 1.0.0\n     */\n    Traversal.prototype.modify = function (f) {\n        return traversal.modify(f)(this);\n    };\n    /**\n     * @since 1.0.0\n     */\n    Traversal.prototype.set = function (a) {\n        return traversal.set(a)(this);\n    };\n    Traversal.prototype.filter = function (predicate) {\n        return fromTraversal(traversal.filter(predicate)(this));\n    };\n    /**\n     * view a `Traversal` as a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Traversal.prototype.asFold = function () {\n        var _this = this;\n        return new Fold(function (M) { return function (f) {\n            return _this.modifyF(getApplicative(M))(function (a) { return make(f(a)); });\n        }; });\n    };\n    /**\n     * view a `Traversal` as a `Setter`\n     *\n     * @since 1.0.0\n     */\n    Traversal.prototype.asSetter = function () {\n        var _this = this;\n        return new Setter(function (f) { return _this.modify(f); });\n    };\n    /**\n     * compose a `Traversal` with a `Traversal`\n     *\n     * @since 1.0.0\n     */\n    Traversal.prototype.compose = function (ab) {\n        return fromTraversal(traversal.compose(ab)(this));\n    };\n    /**\n     * Alias of `compose`\n     *\n     * @since 1.0.0\n     */\n    Traversal.prototype.composeTraversal = function (ab) {\n        return this.compose(ab);\n    };\n    /**\n     * compose a `Traversal` with a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Traversal.prototype.composeFold = function (ab) {\n        return this.asFold().compose(ab);\n    };\n    /**\n     * compose a `Traversal` with a `Setter`\n     *\n     * @since 1.0.0\n     */\n    Traversal.prototype.composeSetter = function (ab) {\n        return this.asSetter().compose(ab);\n    };\n    /**\n     * compose a `Traversal` with a `Optional`\n     *\n     * @since 1.0.0\n     */\n    Traversal.prototype.composeOptional = function (ab) {\n        return this.compose(ab.asTraversal());\n    };\n    /**\n     * compose a `Traversal` with a `Lens`\n     *\n     * @since 1.0.0\n     */\n    Traversal.prototype.composeLens = function (ab) {\n        return fromTraversal(pipe(this, traversal.compose(pipe(ab, lens.asTraversal))));\n    };\n    /**\n     * compose a `Traversal` with a `Prism`\n     *\n     * @since 1.0.0\n     */\n    Traversal.prototype.composePrism = function (ab) {\n        return fromTraversal(pipe(this, traversal.compose(pipe(ab, prism.asTraversal))));\n    };\n    /**\n     * compose a `Traversal` with a `Iso`\n     *\n     * @since 1.0.0\n     */\n    Traversal.prototype.composeIso = function (ab) {\n        return fromTraversal(pipe(this, traversal.compose(pipe(ab, iso.asTraversal))));\n    };\n    /**\n     * compose a `Traversal` with a `Getter`\n     *\n     * @since 1.0.0\n     */\n    Traversal.prototype.composeGetter = function (ab) {\n        return this.asFold().compose(ab.asFold());\n    };\n    return Traversal;\n}());\nexport { Traversal };\n/**\n * @category constructor\n * @since 1.2.0\n */\nvar At = /** @class */ (function () {\n    function At(at) {\n        this.at = at;\n        /**\n         * @since 1.0.0\n         */\n        this._tag = 'At';\n    }\n    /**\n     * lift an instance of `At` using an `Iso`\n     *\n     * @since 1.2.0\n     */\n    At.prototype.fromIso = function (iso) {\n        return fromAt(at.fromIso(iso)(this));\n    };\n    return At;\n}());\nexport { At };\n/**\n * @category constructor\n * @since 1.2.0\n */\nvar Index = /** @class */ (function () {\n    function Index(index) {\n        this.index = index;\n        /**\n         * @since 1.0.0\n         */\n        this._tag = 'Index';\n    }\n    /**\n     * @since 1.2.0\n     */\n    Index.fromAt = function (at) {\n        return fromIndex(index.fromAt(at));\n    };\n    /**\n     * lift an instance of `Index` using an `Iso`\n     *\n     * @since 1.2.0\n     */\n    Index.prototype.fromIso = function (iso) {\n        return fromIndex(index.fromIso(iso)(this));\n    };\n    return Index;\n}());\nexport { Index };\n/**\n * @category constructor\n * @since 1.0.0\n */\nvar Getter = /** @class */ (function () {\n    function Getter(get) {\n        this.get = get;\n        /**\n         * @since 1.0.0\n         */\n        this._tag = 'Getter';\n    }\n    /**\n     * view a `Getter` as a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Getter.prototype.asFold = function () {\n        var _this = this;\n        return new Fold(function () { return function (f) { return function (s) { return f(_this.get(s)); }; }; });\n    };\n    /**\n     * compose a `Getter` with a `Getter`\n     *\n     * @since 1.0.0\n     */\n    Getter.prototype.compose = function (ab) {\n        var _this = this;\n        return new Getter(function (s) { return ab.get(_this.get(s)); });\n    };\n    /**\n     * Alias of `compose`\n     *\n     * @since 1.0.0\n     */\n    Getter.prototype.composeGetter = function (ab) {\n        return this.compose(ab);\n    };\n    /**\n     * compose a `Getter` with a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Getter.prototype.composeFold = function (ab) {\n        return this.asFold().compose(ab);\n    };\n    /**\n     * compose a `Getter` with a `Lens`\n     *\n     * @since 1.0.0\n     */\n    Getter.prototype.composeLens = function (ab) {\n        return this.compose(ab.asGetter());\n    };\n    /**\n     * compose a `Getter` with a `Iso`\n     *\n     * @since 1.0.0\n     */\n    Getter.prototype.composeIso = function (ab) {\n        return this.compose(ab.asGetter());\n    };\n    /**\n     * compose a `Getter` with a `Optional`\n     *\n     * @since 1.0.0\n     */\n    Getter.prototype.composeTraversal = function (ab) {\n        return this.asFold().compose(ab.asFold());\n    };\n    /**\n     * compose a `Getter` with a `Optional`\n     *\n     * @since 1.0.0\n     */\n    Getter.prototype.composeOptional = function (ab) {\n        return this.asFold().compose(ab.asFold());\n    };\n    /**\n     * compose a `Getter` with a `Prism`\n     *\n     * @since 1.0.0\n     */\n    Getter.prototype.composePrism = function (ab) {\n        return this.asFold().compose(ab.asFold());\n    };\n    return Getter;\n}());\nexport { Getter };\n/**\n * @category constructor\n * @since 1.0.0\n */\nvar Fold = /** @class */ (function () {\n    function Fold(foldMap) {\n        this.foldMap = foldMap;\n        /**\n         * @since 1.0.0\n         */\n        this._tag = 'Fold';\n        this.getAll = foldMap(A.getMonoid())(A.of);\n        this.exist = foldMap(monoidAny);\n        this.all = foldMap(monoidAll);\n        this.foldMapFirst = foldMap(getFirstMonoid());\n    }\n    /**\n     * compose a `Fold` with a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Fold.prototype.compose = function (ab) {\n        var _this = this;\n        return new Fold(function (M) { return function (f) { return _this.foldMap(M)(ab.foldMap(M)(f)); }; });\n    };\n    /**\n     * Alias of `compose`\n     *\n     * @since 1.0.0\n     */\n    Fold.prototype.composeFold = function (ab) {\n        return this.compose(ab);\n    };\n    /**\n     * compose a `Fold` with a `Getter`\n     *\n     * @since 1.0.0\n     */\n    Fold.prototype.composeGetter = function (ab) {\n        return this.compose(ab.asFold());\n    };\n    /**\n     * compose a `Fold` with a `Traversal`\n     *\n     * @since 1.0.0\n     */\n    Fold.prototype.composeTraversal = function (ab) {\n        return this.compose(ab.asFold());\n    };\n    /**\n     * compose a `Fold` with a `Optional`\n     *\n     * @since 1.0.0\n     */\n    Fold.prototype.composeOptional = function (ab) {\n        return this.compose(ab.asFold());\n    };\n    /**\n     * compose a `Fold` with a `Lens`\n     *\n     * @since 1.0.0\n     */\n    Fold.prototype.composeLens = function (ab) {\n        return this.compose(ab.asFold());\n    };\n    /**\n     * compose a `Fold` with a `Prism`\n     *\n     * @since 1.0.0\n     */\n    Fold.prototype.composePrism = function (ab) {\n        return this.compose(ab.asFold());\n    };\n    /**\n     * compose a `Fold` with a `Iso`\n     *\n     * @since 1.0.0\n     */\n    Fold.prototype.composeIso = function (ab) {\n        return this.compose(ab.asFold());\n    };\n    Fold.prototype.find = function (p) {\n        return this.foldMapFirst(fromPredicate(p));\n    };\n    /**\n     * get the first target of a `Fold`\n     *\n     * @since 1.0.0\n     */\n    Fold.prototype.headOption = function (s) {\n        return this.find(function () { return true; })(s);\n    };\n    return Fold;\n}());\nexport { Fold };\n/**\n * @category constructor\n * @since 1.0.0\n */\nvar Setter = /** @class */ (function () {\n    function Setter(modify) {\n        this.modify = modify;\n        /**\n         * @since 1.0.0\n         */\n        this._tag = 'Setter';\n    }\n    /**\n     * @since 1.0.0\n     */\n    Setter.prototype.set = function (a) {\n        return this.modify(constant(a));\n    };\n    /**\n     * compose a `Setter` with a `Setter`\n     *\n     * @since 1.0.0\n     */\n    Setter.prototype.compose = function (ab) {\n        var _this = this;\n        return new Setter(function (f) { return _this.modify(ab.modify(f)); });\n    };\n    /**\n     * Alias of `compose`\n     *\n     * @since 1.0.0\n     */\n    Setter.prototype.composeSetter = function (ab) {\n        return this.compose(ab);\n    };\n    /**\n     * compose a `Setter` with a `Traversal`\n     *\n     * @since 1.0.0\n     */\n    Setter.prototype.composeTraversal = function (ab) {\n        return this.compose(ab.asSetter());\n    };\n    /**\n     * compose a `Setter` with a `Optional`\n     *\n     * @since 1.0.0\n     */\n    Setter.prototype.composeOptional = function (ab) {\n        return this.compose(ab.asSetter());\n    };\n    /**\n     * compose a `Setter` with a `Lens`\n     *\n     * @since 1.0.0\n     */\n    Setter.prototype.composeLens = function (ab) {\n        return this.compose(ab.asSetter());\n    };\n    /**\n     * compose a `Setter` with a `Prism`\n     *\n     * @since 1.0.0\n     */\n    Setter.prototype.composePrism = function (ab) {\n        return this.compose(ab.asSetter());\n    };\n    /**\n     * compose a `Setter` with a `Iso`\n     *\n     * @since 1.0.0\n     */\n    Setter.prototype.composeIso = function (ab) {\n        return this.compose(ab.asSetter());\n    };\n    return Setter;\n}());\nexport { Setter };\nexport function fromTraversable(T) {\n    var f = traversal.fromTraversable(T);\n    return function () { return fromTraversal(f()); };\n}\nexport function fromFoldable(F) {\n    return function () {\n        return new Fold(function (M) {\n            var foldMapFM = F.foldMap(M);\n            return function (f) { return function (s) { return foldMapFM(s, f); }; };\n        });\n    };\n}\n","\"use strict\";\n/**\n * Symbols used internally within ts-pattern to construct and discriminate\n * Guard, Not, and Select, and AnonymousSelect patterns\n *\n * Symbols have the advantage of not appearing in auto-complete suggestions in\n * user defined patterns, and eliminate the admittedly unlikely risk of property\n * overlap between ts-pattern internals and user defined patterns.\n *\n * These symbols have to be visible to tsc for type inference to work, but\n * users should not import them\n * @module\n * @private\n * @internal\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AnonymousSelect = exports.NamedSelect = exports.Not = exports.Guard = exports.PatternKind = void 0;\n/** @internal This symbol should only be used by ts-pattern's internals. */\nexports.PatternKind = Symbol('@ts-pattern/pattern-kind');\n/** @internal This symbol should only be used by ts-pattern's internals. */\nexports.Guard = Symbol('@ts-pattern/guard');\n/** @internal This symbol should only be used by ts-pattern's internals. */\nexports.Not = Symbol('@ts-pattern/not');\n/** @internal This symbol should only be used by ts-pattern's internals. */\nexports.NamedSelect = Symbol('@ts-pattern/named-select');\n/** @internal This symbol should only be used by ts-pattern's internals. */\nexports.AnonymousSelect = Symbol('@ts-pattern/anonymous-select');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.instanceOf = exports.select = exports.ANONYMOUS_SELECT_KEY = exports.not = exports.when = void 0;\nconst symbols = require(\"./symbols\");\nconst when = (predicate) => ({\n    [symbols.PatternKind]: symbols.Guard,\n    [symbols.Guard]: predicate,\n});\nexports.when = when;\nconst not = (pattern) => ({\n    [symbols.PatternKind]: symbols.Not,\n    [symbols.Not]: pattern,\n});\nexports.not = not;\nexports.ANONYMOUS_SELECT_KEY = '@ts-pattern/__anonymous-select-key';\nfunction select(key) {\n    return key === undefined\n        ? {\n            [symbols.PatternKind]: symbols.AnonymousSelect,\n        }\n        : {\n            [symbols.PatternKind]: symbols.NamedSelect,\n            [symbols.NamedSelect]: key,\n        };\n}\nexports.select = select;\nfunction isInstanceOf(classConstructor) {\n    return (val) => val instanceof classConstructor;\n}\nconst instanceOf = (classConstructor) => exports.when(isInstanceOf(classConstructor));\nexports.instanceOf = instanceOf;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.__ = void 0;\nconst guards_1 = require(\"./guards\");\nfunction isUnknown(x) {\n    return true;\n}\nfunction isNumber(x) {\n    return typeof x === 'number' && !Number.isNaN(x);\n}\nfunction isString(x) {\n    return typeof x === 'string';\n}\nfunction isBoolean(x) {\n    return typeof x === 'boolean';\n}\nfunction isNullish(x) {\n    return x === null || x === undefined;\n}\nconst unknownGuard = guards_1.when(isUnknown);\nconst stringGuard = guards_1.when(isString);\nconst numberGuard = guards_1.when(isNumber);\nconst booleanGuard = guards_1.when(isBoolean);\nconst nullishGuard = guards_1.when(isNullish);\n/**\n * ### Catch All wildcard\n * `__` is wildcard pattern, matching **any value**.\n *\n * `__.string` is wildcard pattern matching any **string**.\n *\n * `__.number` is wildcard pattern matching any **number**.\n *\n * `__.boolean` is wildcard pattern matching any **boolean**.\n *\n * `__.nullish` is wildcard pattern matching **null** or **undefined**.\n * @example\n *  match(value)\n *   .with(__, () => 'will always match')\n *   .with(__.string, () => 'will match on strings only')\n *   .with(__.number, () => 'will match on numbers only')\n *   .with(__.boolean, () => 'will match on booleans only')\n *   .with(__.nullish, () => 'will match on null or undefined only')\n */\nexports.__ = Object.assign(unknownGuard, {\n    string: stringGuard,\n    number: numberGuard,\n    boolean: booleanGuard,\n    nullish: nullishGuard,\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isMatching = exports.match = exports.instanceOf = exports.select = exports.not = exports.when = exports.__ = void 0;\nconst symbols = require(\"./symbols\");\nconst guards_1 = require(\"./guards\");\nObject.defineProperty(exports, \"when\", { enumerable: true, get: function () { return guards_1.when; } });\nObject.defineProperty(exports, \"not\", { enumerable: true, get: function () { return guards_1.not; } });\nObject.defineProperty(exports, \"select\", { enumerable: true, get: function () { return guards_1.select; } });\nObject.defineProperty(exports, \"instanceOf\", { enumerable: true, get: function () { return guards_1.instanceOf; } });\nconst wildcards_1 = require(\"./wildcards\");\nObject.defineProperty(exports, \"__\", { enumerable: true, get: function () { return wildcards_1.__; } });\n/**\n * #### match\n *\n * Entry point to create a pattern matching expression.\n *\n * It returns a `Match` builder, on which you can chain\n * several `.with(pattern, handler)` clauses.\n */\nconst match = (value) => builder(value, []);\nexports.match = match;\n/**\n * ### builder\n * This is the implementation of our pattern matching, using the\n * builder pattern.\n */\nconst builder = (value, cases) => {\n    const run = () => {\n        const entry = cases.find(({ test }) => test(value));\n        if (!entry) {\n            let displayedValue;\n            try {\n                displayedValue = JSON.stringify(value);\n            }\n            catch (e) {\n                displayedValue = value;\n            }\n            throw new Error(`Pattern matching error: no pattern matches value ${displayedValue}`);\n        }\n        return entry.handler(entry.select(value), value);\n    };\n    return {\n        with(...args) {\n            const handler = args[args.length - 1];\n            const patterns = [];\n            const predicates = [];\n            for (let i = 0; i < args.length - 1; i++) {\n                const arg = args[i];\n                if (typeof arg === 'function') {\n                    predicates.push(arg);\n                }\n                else {\n                    patterns.push(arg);\n                }\n            }\n            let selected = {};\n            const doesMatch = (value) => Boolean(patterns.some((pattern) => matchPattern(pattern, value, (key, value) => {\n                selected[key] = value;\n            })) && predicates.every((predicate) => predicate(value)));\n            return builder(value, cases.concat([\n                {\n                    test: doesMatch,\n                    handler,\n                    select: (value) => Object.keys(selected).length\n                        ? selected[guards_1.ANONYMOUS_SELECT_KEY] !== undefined\n                            ? selected[guards_1.ANONYMOUS_SELECT_KEY]\n                            : selected\n                        : value,\n                },\n            ]));\n        },\n        when: (predicate, handler) => builder(value, cases.concat([\n            {\n                test: predicate,\n                handler,\n                select: (value) => value,\n            },\n        ])),\n        otherwise: (handler) => builder(value, cases.concat([\n            {\n                test: () => true,\n                handler,\n                select: (value) => value,\n            },\n        ])).run(),\n        exhaustive: () => run(),\n        run,\n    };\n};\nconst isObject = (value) => Boolean(value && typeof value === 'object');\nconst isGuardPattern = (x) => {\n    const pattern = x;\n    return pattern && pattern[symbols.PatternKind] === symbols.Guard;\n};\nconst isNotPattern = (x) => {\n    const pattern = x;\n    return pattern && pattern[symbols.PatternKind] === symbols.Not;\n};\nconst isNamedSelectPattern = (x) => {\n    const pattern = x;\n    return pattern && pattern[symbols.PatternKind] === symbols.NamedSelect;\n};\nconst isAnonymousSelectPattern = (x) => {\n    const pattern = x;\n    return pattern && pattern[symbols.PatternKind] === symbols.AnonymousSelect;\n};\n// tells us if the value matches a given pattern.\nconst matchPattern = (pattern, value, select) => {\n    if (isObject(pattern)) {\n        if (isGuardPattern(pattern))\n            return Boolean(pattern[symbols.Guard](value));\n        if (isNamedSelectPattern(pattern)) {\n            select(pattern[symbols.NamedSelect], value);\n            return true;\n        }\n        if (isAnonymousSelectPattern(pattern)) {\n            select(guards_1.ANONYMOUS_SELECT_KEY, value);\n            return true;\n        }\n        if (isNotPattern(pattern))\n            return !matchPattern(pattern[symbols.Not], value, select);\n        if (!isObject(value))\n            return false;\n        if (Array.isArray(pattern)) {\n            if (!Array.isArray(value))\n                return false;\n            // List pattern\n            if (pattern.length === 1) {\n                const selected = {};\n                const listSelect = (key, value) => {\n                    selected[key] = (selected[key] || []).concat([value]);\n                };\n                const doesMatch = value.every((v) => matchPattern(pattern[0], v, listSelect));\n                if (doesMatch) {\n                    Object.keys(selected).forEach((key) => select(key, selected[key]));\n                }\n                return doesMatch;\n            }\n            // Tuple pattern\n            return pattern.length === value.length\n                ? pattern.every((subPattern, i) => matchPattern(subPattern, value[i], select))\n                : false;\n        }\n        if (pattern instanceof Map) {\n            if (!(value instanceof Map))\n                return false;\n            return [...pattern.keys()].every((key) => matchPattern(pattern.get(key), value.get(key), select));\n        }\n        if (pattern instanceof Set) {\n            if (!(value instanceof Set))\n                return false;\n            if (pattern.size === 0)\n                return value.size === 0;\n            if (pattern.size === 1) {\n                const [subPattern] = [...pattern.values()];\n                return Object.values(wildcards_1.__).includes(subPattern)\n                    ? matchPattern([subPattern], [...value.values()], select)\n                    : value.has(subPattern);\n            }\n            return [...pattern.values()].every((subPattern) => value.has(subPattern));\n        }\n        return Object.keys(pattern).every((k) => k in value &&\n            matchPattern(\n            // @ts-ignore\n            pattern[k], \n            // @ts-ignore\n            value[k], select));\n    }\n    return value === pattern;\n};\nfunction isMatching(...args) {\n    if (args.length === 1) {\n        const [pattern] = args;\n        return (value) => matchPattern(pattern, value, () => { });\n    }\n    if (args.length === 2) {\n        const [pattern, value] = args;\n        return matchPattern(pattern, value, () => { });\n    }\n    throw new Error(`isMatching wasn't given enough arguments: expected 1 or 2, received ${args.length}.`);\n}\nexports.isMatching = isMatching;\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","identity","a","unsafeCoerce","constant","constVoid","undefined","flow","ab","bc","cd","de","ef","fg","gh","hi","ij","pipe","jk","kl","lm","mn","no","op","pq","qr","rs","st","SK","_","b","__spreadArray","to","from","il","j","isSome","fa","_tag","none","some","value","isLeft","ma","left","e","right","singleton","isNonEmpty","as","has","separated","wiltDefault","T","C","F","traverseF","traverse","wa","f","map","separate","witherDefault","compact","_.left","_.right","chain","_.isLeft","isRight","fold","onLeft","onRight","_.none","_.some","fromPredicate","predicate","getRight","_map","isNone","alt","that","fromEither","_.isSome","onNone","onSome","getOrElseW","getOrElse","fromNullable","option","getFirstMonoid","S","concat","x","y","empty","upsertAt","E","lookupWithKeyE","lookupWithKey","k","lookupWithKeyEk","m","out","found","Map","set","lookupWithKeyE_1","entries","next","done","_a","ka","equals","key","_mapWithIndex","E.right","of","tryCatch","onRejected","then","reason","ApT","ET.right","URI","Promise","resolve","traverseReadonlyArrayWithIndexSeq","g","slice","_.tail","reduce","acc","ebs","eb","push","_.head","E.map","_.singleton","traverseReadonlyNonEmptyArrayWithIndexSeq","_.isNonEmpty","sequenceSeqArray","traverseSeqArray","unsafeUpdateAt","xs","_.fromReadonlyNonEmptyArray","Eq","first","second","Ord","compare","isEmpty","pipeFromFunctionModule","getSemigroup","literal","values","_i","is","u","findIndex","string","number","isNaN","boolean","UnknownArray","Array","isArray","UnknownRecord","refine","refinement","nullable","or","struct","properties","r","type","partial","v","array","item","us","every","record","codomain","tuple","components","c","intersect","union","members","sum","tag","lazy","get","cache","memoize","readonly","Schemable","WithUnknownContainers","WithUnion","WithRefine","me","M","onError","decode","G.literal","G","throwError","onMemberError","mapLeft","_loop_1","index","SE","DE.getSemigroup","_E","ap","fab","E.isLeft","E.left","E.chain","bimap","E.bimap","E.mapLeft","E.isRight","ea","error","actual","message","FS.of","DE.leaf","fromGuard","guard","expected","K.fromRefinement","fromRefinement","K.literal","JSON","stringify","join","G.string","G.boolean","K.union","errors","DE.member","RNEA.isNonEmpty","isOutOfBound","lookup","findFirst","RNEA.unsafeUpdateAt","make","getApplicative","A","monoidAll","monoidAny","keys_","O","keys","sort","_.has","mapWithIndex","reduceWithIndex","args","S.Ord","keysO","ks","len","foldMapWithIndex","keysO_1","reduceRightWithIndex","sequence","_sequence","_reduce","reduceO","_foldMap","foldMapM","foldMap","_reduceRight","reduceRightO","reduceRight","_reduceWithIndex","reduceWithIndexO","_foldMapWithIndex","foldMapWithIndexO","foldMapWithIndexM","_reduceRightWithIndex","reduceRightWithIndexO","_traverse","traverseWithIndexO","_traverseWithIndex","traverseWithIndexOF","ta","traverseO","traverseOF","fr","ks_1","reduceWithIndexO_1","foldMapWithIndexO_1","reduceRightWithIndexO_1","oa","Compactable","Traversable","insertAt","__spreadArrays","jl","isoAsLens","sa","lens","reverseGet","lensAsOptional","optional","O.some","lensComposeLens","prism","getOption","prismAsOptional","prismSet","prismAsTraversal","traversal","O.fold","prismModify","O.map","o","prismModifyOption","O.getOrElse","prismFromNullable","O.fromNullable","prismFromPredicate","O.fromPredicate","prismSome","prismRight","O.fromEither","prismLeft","O.none","optionalModifyOption","optionalModify","optionalComposeOptional","O.chain","modifyF","traversalComposeTraversal","ApplicativeIdentity","traversalTraverse","isIdentity","fromTraversable","indexReadonlyArray","RA.lookup","RA.unsafeUpdateAt","indexReadonlyNonEmptyArray","indexReadonlyRecord","RR.lookup","O.isNone","RR.insertAt","asLens","_.isoAsLens","asPrism","asOptional","asTraversal","_.lens","id","_.lensAsOptional","compose","_.lensComposeLens","composeLens","composeIso","composePrism","composeOptional","_.optionalComposeOptional","modify","prop","props","props_1","props_2","component","copy","atKey","at","_.prismSome","_.prismRight","_.prismLeft","imap_","ba","Invariant","imap","Semigroupoid","Category","_.traversalComposeTraversal","_.prismFromNullable","_.prismFromPredicate","_.optionalIndex","_.optionalIndexNonEmpty","_.optionalKey","_.traversalTraverse","RA.findFirst","RA.findIndex","_.optionalFindFirst","_.optionalFindFirstNonEmpty","modifyOption","_.optionalModifyOption","_.optionalModify","_.prismAsOptional","_.prismAsTraversal","_.ApplicativeIdentity","fromLens","Lens","fromPrism","Prism","fromOptional","Optional","fromTraversal","Traversal","update","fromPath","fromProp","path","lens.id","lens.prop","fromProps","lens.props","fromNullableProp","defaultValue","osk","lens.modify","lens.asOptional","lens.asTraversal","asSetter","_this","Setter","asGetter","Getter","asFold","Fold","lens.compose","composeGetter","composeFold","optional.compose","composeTraversal","traversal.compose","composeSetter","iso.asLens","lens.composePrism","prism.fromPredicate","somePrism","os","prism.asOptional","prism.asTraversal","prism.compose","iso.asPrism","prism.composeLens","fromOptionProp","formProp","optional.modify","optional.modifyOption","optional.asTraversal","iso.asOptional","traversal.modify","traversal.set","filter","traversal.filter","iso.asTraversal","getAll","A.of","exist","all","foldMapFirst","find","headOption","defineProperty","symbols","Symbol","exports","require$$0","PatternKind","Guard","pattern","Not","AnonymousSelect","NamedSelect","classConstructor","when","val","isInstanceOf","wildcards","guards_1","unknownGuard","stringGuard","numberGuard","Number","booleanGuard","nullishGuard","nullish","require$$1","enumerable","not","select","instanceOf","wildcards_1","require$$2","__","builder","cases","run","entry","test","displayedValue","Error","handler","with","patterns","predicates","arg","selected","Boolean","matchPattern","ANONYMOUS_SELECT_KEY","otherwise","exhaustive","isObject","isNamedSelectPattern","isAnonymousSelectPattern","isNotPattern","listSelect","doesMatch","forEach","subPattern","Set","size","includes"],"mappings":"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"}