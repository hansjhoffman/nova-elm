<?xml version="1.0" encoding="UTF-8" ?>
<syntax name="elm">
    <meta>
        <name>Elm</name>
        <type>compiled</type>
        <preferred-file-extension>elm</preferred-file-extension>
        <!-- https://textkool.com/en/ascii-art-generator?hl=default&vl=default&font=Roman -->
    </meta>
    
    <detectors>
        <extension priority="1.0">elm</extension>
    </detectors>
    
    <indentation>
        <increase>
            <expression>(case|of|if|else|let|-&gt;).*</expression>
        </increase>
        <decrease>
            <expression>^\s+(in)\b|\s+</expression>
        </decrease>
    </indentation>
    
    <comments>
        <single>
            <expression>--</expression>
        </single>
        
        <multiline>
            <starts-with>
                <expression>{-</expression>
            </starts-with>
            <ends-with>
                <expression>-}</expression>
            </ends-with>
        </multiline>
    </comments>
    
    <brackets>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
    </brackets>
    
    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
    </surrounding-pairs>
    
    <scopes>
        <include syntax="self" collection="comments" />
        <include syntax="self" collection="definitions" />
        <include syntax="self" collection="keywords" />
        <include syntax="self" collection="values" />
        <include syntax="self" collection="identifiers" />
        <include syntax="self" collection="syntax" />
    </scopes>

    <collections>
        <!-- 
                                                                                              .            
                                                                                            .o8            
             .ooooo.   .ooooo.  ooo. .oo.  .oo.   ooo. .oo.  .oo.    .ooooo.  ooo. .oo.   .o888oo  .oooo.o 
            d88' `"Y8 d88' `88b `888P"Y88bP"Y88b  `888P"Y88bP"Y88b  d88' `88b `888P"Y88b    888   d88(  "8 
            888       888   888  888   888   888   888   888   888  888ooo888  888   888    888   `"Y88b.  
            888   .o8 888   888  888   888   888   888   888   888  888    .o  888   888    888 . o.  )88b 
            `Y8bod8P' `Y8bod8P' o888o o888o o888o o888o o888o o888o `Y8bod8P' o888o o888o   "888" 8""888P' 
        -->
        <collection name="comments">
            <scope name="elm.comment.single" spell-check="true">
                <expression>(--)(.*)$</expression>
                <capture number="1" name="elm.punctuation.definition.begin" />
                <capture number="2" name="elm.comment.content" />
            </scope>
            <scope name="elm.comment.multiline" spell-check="true">
                <symbol type="comment">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>{-</expression>
                    <capture number="0" name="elm.punctuation.definition.begin" />
                </starts-with>
                <ends-with>
                    <expression>-}</expression>
                    <capture number="0" name="elm.punctuation.definition.end" />
                </ends-with>
            </scope>
        </collection>
        
        <!-- 
                  .o8             .o88o.  o8o               o8o      .    o8o                                 
                 "888             888 `"  `"'               `"'    .o8    `"'                                 
             .oooo888   .ooooo.  o888oo  oooo  ooo. .oo.   oooo  .o888oo oooo   .ooooo.  ooo. .oo.    .oooo.o 
            d88' `888  d88' `88b  888    `888  `888P"Y88b  `888    888   `888  d88' `88b `888P"Y88b  d88(  "8 
            888   888  888ooo888  888     888   888   888   888    888    888  888   888  888   888  `"Y88b.  
            888   888  888    .o  888     888   888   888   888    888 .  888  888   888  888   888  o.  )88b 
            `Y8bod88P" `Y8bod8P' o888o   o888o o888o o888o o888o   "888" o888o `Y8bod8P' o888o o888o 8""888P' 
        -->
        <collection name="definitions">
            <scope name="elm.infix">
                <expression>
                    (?x:                   # turn on extended mode, allows arbitrary whitespace
                        ^(infix)           # line must start with keyword
                        \s+                # whitespace
                        [A-Za-z0-9_]+      # one or more alphanumeric
                        \s+                # whitespace
                        ([0-9]+)           # one or more digit
                        \s+                # whitespace
                        \((.+)\)           # '(' + blah + ')'
                        \s+                # whitespace
                        (\=)               # equals
                        \s+                # whitespace
                        ([A-Za-z0-9_]+)    # one or more alphanumeric
                        $                  # EOL
                    )
                </expression>
                <capture number="1" name="elm.keyword" />
                <capture number="2" name="elm.value.number.integer" />
                <capture number="3" name="elm.operator" />
                <capture number="4" name="elm.operator" />
                <capture number="5" name="elm.identifier.function.name" />
            </scope>
            <scope name="elm.import">
                <starts-with>
                    <expression>^(effect|import|module|port\s+module)</expression>
                    <capture number="0" name="elm.keyword" />
                </starts-with>
                <ends-with>
                    <expression>(?=^\S)</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="keywords" />
                    <include syntax="self" collection="syntax" />
                    <include syntax="self" collection="elm.helpers.type" />
                    <scope name="elm.import.function">
                        <expression>\b([a-z][A-Za-z0-9_]*)</expression>
                        <capture number="1" name="elm.identifier.function.name" />
                    </scope>
                </subscopes>
            </scope>
            <scope name="elm.port">
                <symbol type="type">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>^(port)\h+([a-z][A-Za-z0-9_]*)(?=\h+\:\s+)</expression>
                    <capture number="1" name="elm.keyword" />
                    <capture number="2" name="elm.identifier.function.type-annotation" />
                </starts-with>
                <ends-with>
                    <expression>(?=^[A-Za-z0-9_])|(?=\n$)</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="elm.helpers.type" />
                    <include syntax="self" collection="syntax" />
                </subscopes>
            </scope>
            <scope name="elm.type-annotation">
                <starts-with>
                    <expression>^([a-z][A-Za-z0-9_]*)(?=\h+\:\s+)</expression>
                    <capture number="1" name="elm.identifier.function.type-annotation" />
                </starts-with>
                <ends-with>
                    <expression>(?=^\S)</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="elm.helpers.type" />
                    <scope name="elm.value.symbol.unit-type">
                        <!-- unit type -->
                        <expression>(\(\))</expression>
                    </scope>
                    <include syntax="self" collection="syntax" />
                </subscopes>
            </scope>
            <!-- TODO: handle fn collapsing, let blocks, case, if/else collapsing using ElmLS? -->
            <scope name="elm.function">
                <symbol type="function">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>^(?!port|type)([a-z][A-Za-z0-9]*)\b(?!\h+\:)</expression>
                    <capture number="0" name="elm.identifier.function" />
                </starts-with>
                <ends-with>
                    <expression>(?=\=\s+)</expression>
                </ends-with>
                <subscopes>
                    <scope name="elm.function.argument">
                        <expression>\b([a-z][A-Za-z0-9_]*)</expression>
                        <capture number="1" name="elm.identifier.argument" />
                    </scope>
                    <include syntax="self" collection="elm.helpers.type" />
                    <scope name="elm.comma">
                        <expression>,</expression>
                    </scope>
                    <scope name="elm.bracket.parens">
                        <expression>(\(|\))</expression>
                    </scope>
                </subscopes>
            </scope>
        </collection>
        
        <!-- 
            oooo                                                                        .o8           
            `888                                                                       "888           
             888  oooo   .ooooo.  oooo    ooo oooo oooo    ooo  .ooooo.  oooo d8b  .oooo888   .oooo.o 
             888 .8P'   d88' `88b  `88.  .8'   `88. `88.  .8'  d88' `88b `888""8P d88' `888  d88(  "8 
             888888.    888ooo888   `88..8'     `88..]88..8'   888   888  888     888   888  `"Y88b.  
             888 `88b.  888    .o    `888'       `888'`888'    888   888  888     888   888  o.  )88b 
            o888o o888o `Y8bod8P'     .8'         `8'  `8'     `Y8bod8P' d888b    `Y8bod88P" 8""888P' 
                                  .o..P'                                                              
                                  `Y8P'                                                               
        -->
        <collection name="keywords">
            <scope name="elm.keyword">
                <strings>
                    <string>alias</string>
                    <string>as</string>
                    <string>case</string>
                    <string>else</string>
                    <string>exposing</string>
                    <string>if</string>
                    <string>import</string>
                    <string>in</string>
                    <string>let</string>
                    <string>module</string>
                    <string>of</string>
                    <string>port</string>
                    <string>then</string>
                    <string>type</string>
                    <string>where</string>
                </strings>
            </scope>
        </collection>
        
        <!--
                                  oooo                                 
                                  `888                                 
            oooo    ooo  .oooo.    888  oooo  oooo   .ooooo.   .oooo.o 
             `88.  .8'  `P  )88b   888  `888  `888  d88' `88b d88(  "8 
              `88..8'    .oP"888   888   888   888  888ooo888 `"Y88b.  
               `888'    d8(  888   888   888   888  888    .o o.  )88b 
                `8'     `Y888""8o o888o  `V88V"V8P' `Y8bod8P' 8""888P'                                  
        -->
        <collection name="values">
            <scope name="elm.value.boolean">
                <strings>
                    <string>True</string>
                    <string>False</string>
                </strings>
            </scope>
            <scope name="elm.value.number.float.exponent">
                <expression>\b[0-9][0-9]*(\.[0-9][0-9]*)?e[+-]?[0-9]+\b</expression>
            </scope>
            <scope name="elm.value.number.float">
                <expression>([-]?[0-9]+\.[0-9]+)\b</expression>
            </scope>
            <scope name="elm.value.number.integer">
                <expression>(?&lt;=\s|\()(?!0[0-9]+)([-]?[0-9]+)\b</expression>
            </scope>
            <scope name="elm.value.number.integer.hexadecimal">
                <expression>\b(0x[a-fA-F0-9_]+)\b</expression>
            </scope>
            <include syntax="self" collection="strings" />
            <scope name="elm.collection.list">
                <symbol type="block">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>\[</expression>
                    <capture number="0" name="elm.bracket.square" />
                </starts-with>
                <ends-with>
                    <expression>\]</expression>
                    <capture number="0" name="elm.bracket.square" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="elm.helpers.type" />
                    <include syntax="self" collection="syntax" />
                </subscopes>
            </scope>
        </collection>
        
        <!-- 
             o8o        .o8                            .    o8o   .o88o.  o8o                              
             `"'       "888                          .o8    `"'   888 `"  `"'                              
            oooo   .oooo888   .ooooo.  ooo. .oo.   .o888oo oooo  o888oo  oooo   .ooooo.  oooo d8b  .oooo.o 
            `888  d88' `888  d88' `88b `888P"Y88b    888   `888   888    `888  d88' `88b `888""8P d88(  "8 
             888  888   888  888ooo888  888   888    888    888   888     888  888ooo888  888     `"Y88b.  
             888  888   888  888    .o  888   888    888 .  888   888     888  888    .o  888     o.  )88b 
            o888o `Y8bod88P" `Y8bod8P' o888o o888o   "888" o888o o888o   o888o `Y8bod8P' d888b    8""888P' 
        -->
        <collection name="identifiers">
            <scope name="elm.identifier.type.core.constructor">
                <strings>
                    <!-- Maybe -->
                    <string>Just</string>
                    <string>Nothing</string>
                    <!-- Order -->
                    <string>LT</string>
                    <string>EQ</string>
                    <string>GT</string>
                    <!-- Result -->
                    <string>Ok</string>
                    <string>Err</string>
                </strings>
            </scope>
            <include syntax="self" collection="elm.helpers.type" />
        </collection>
        <collection name="elm.helpers.type">
            <scope name="elm.identifier.type">
                <expression>\b(?&lt;![a-z0-9_&quot;])([A-Z][A-Za-z0-9_]*)\b</expression>
            </scope>
        </collection>
        
        <!-- 
                        .             o8o                                  
                      .o8             `"'                                  
            .oooo.o .o888oo oooo d8b oooo  ooo. .oo.    .oooooooo  .oooo.o 
            d88(  "8   888   `888""8P `888  `888P"Y88b  888' `88b  d88(  "8 
            `"Y88b.    888    888      888   888   888  888   888  `"Y88b.  
            o.  )88b   888 .  888      888   888   888  `88bod8P'  o.  )88b 
            8""888P'   "888" d888b    o888o o888o o888o `8oooooo.  8""888P' 
                                                        d"     YD           
                                                        "Y88888P'           
        -->
        <collection name="strings">
            <scope name="elm.string.multiline">
                <symbol type="comment">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>&quot;&quot;&quot;</expression>
                </starts-with>
                <ends-with>
                    <expression>&quot;&quot;&quot;</expression>
                </ends-with>
            </scope>
            <scope name="elm.string.double-quoted">
                <starts-with>
                    <expression>&quot;</expression>
                    <capture number="0" name="elm.string.quoted.double" />
                </starts-with>
                <ends-with>
                    <expression>&quot;|(?:(?&lt;!\\)$)</expression>
                    <capture number="0" name="elm.string.quoted.double" />
                </ends-with>
                <subscopes>
                    <scope name="elm.string.quoted.escape">
                        <expression>\\(?:\\|&quot;|n|r|t|b|f)</expression>
                    </scope>
                </subscopes>
            </scope>
            <scope name="elm.string.single-quoted">
                <starts-with>
                    <expression>&apos;</expression>
                    <capture number="0" name="elm.string.quoted.single" />
                </starts-with>
                <ends-with>
                    <expression>&apos;|(?:(?&lt;!\\)$)</expression>
                    <capture number="0" name="elm.string.quoted.single" />
                </ends-with>
                <subscopes>
                    <scope name="elm.string.quoted.escape">
                        <expression>\\(?:\\|&quot;|n|r|t|b|f)</expression>
                    </scope>
                </subscopes>
            </scope>
        </collection>
        
        <!-- 
                                                 .                         
                                               .o8                         
            .oooo.o oooo    ooo ooo. .oo.   .o888oo  .oooo.   oooo    ooo 
            d88(  "8  `88.  .8'  `888P"Y88b    888   `P  )88b   `88b..8P'  
            `"Y88b.    `88..8'    888   888    888    .oP"888     Y888'    
            o.  )88b    `888'     888   888    888 . d8(  888   .o8"'88b   
            8""888P'     .8'     o888o o888o   "888" `Y888""8o o88'   888o 
                      .o..P'                                                
                      `Y8P'
        -->
        <collection name="syntax">
            <scope name="elm.block.records">
                <symbol type="block">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>\{</expression>
                    <capture number="0" name="elm.bracket" />
                </starts-with>
                <ends-with>
                    <expression>\}</expression>
                    <capture number="0" name="elm.bracket" />
                </ends-with>
                <subscopes>
                    <include syntax="self" />
                </subscopes>
            </scope>
            <scope name="elm.bracket.square">
                <expression>(\[ | \])</expression>
            </scope>
            <scope name="elm.bracket.parens">
                <expression>(\( | \))</expression>
            </scope>
            <scope name="elm.bracket.curly">
                <expression>(\{ | \})</expression>
            </scope>
            <scope name="elm.operator.arrow">
                <!-- -> -->
                <expression>(\-&gt;)</expression>
            </scope>
            <scope name="elm.operator.apL">
                <!-- <| -->
                <expression>(&lt;\|)</expression>
            </scope>
            <scope name="elm.operator.le">
                <!-- <= -->
                <expression>(&lt;\=)</expression>
            </scope>
            <scope name="elm.operator.composeL">
                <!-- << -->
                <expression>(&lt;&lt;)</expression>
            </scope>
            <scope name="elm.operator.lt">
                <!-- < -->
                <expression>(&lt;)</expression>
            </scope>
            <scope name="elm.operator.apR">
                <!-- |> -->
                <expression>(\|&gt;)</expression>
            </scope>
            <scope name="elm.operator.gt">
                <!-- >= -->
                <expression>(&gt;\=)</expression>
            </scope>
            <scope name="elm.operator.composeR">
                <!-- >> -->
                <expression>(&gt;&gt;)</expression>
            </scope>
            <scope name="elm.operator.gt">
                <!-- > -->
                <expression>(&gt;)</expression>
            </scope>
            <scope name="elm.operator.and">
                <!-- && -->
                <expression>(&amp;&amp;)</expression>
            </scope>
            <scope name="elm.operator.eq">
                <!-- == -->
                <expression>(\=\=)</expression>
            </scope>
            <scope name="elm.operator">
                <!-- = -->
                <expression>(\=)</expression>
            </scope>
            <scope name="elm.operator.neq">
                <!-- /= -->
                <expression>(\/\=)</expression>
            </scope>
            <scope name="elm.operator.mul">
                <!-- * -->
                <expression>(\*)</expression>
            </scope>
            <scope name="elm.operator.append">
                <!-- ++ -->
                <expression>(\+\+)</expression>
            </scope>
            <scope name="elm.operator.add">
                <!-- + -->
                <expression>(\+)</expression>
            </scope>
            <scope name="elm.operator.sub">
                <!-- - -->
                <expression>(\-)</expression>
            </scope>
            <scope name="elm.operator.cons">
                <!-- :: -->
                <expression>(::)</expression>
            </scope>
            <scope name="elm.operator.colon">
                <!-- : -->
                <expression>(:)</expression>
            </scope>
            <scope name="elm.operator.pow">
                <!-- ^ -->
                <expression>(\^)</expression>
            </scope>
            <scope name="elm.operator.idiv">
                <!-- // -->
                <expression>(\/\/)</expression>
            </scope>
            <scope name="elm.operator.div">
                <!-- / -->
                <expression>(\/)</expression>
            </scope>
            <scope name="elm.operator.or">
                <!-- || -->
                <expression>(\|\|)</expression>
            </scope>
            <scope name="elm.operator">
                <!-- | -->
                <expression>(\|)</expression>
            </scope>
            <scope name="elm.operator.anonymous-fn">
                <!-- \\ -->
                <expression>(\\)</expression>
            </scope>

            <scope name="elm.comma">
                <expression>,</expression>
            </scope>
            <scope name="elm.dot">
                <expression>(\.)</expression>
            </scope>
        </collection>
    </collections>
</syntax>
